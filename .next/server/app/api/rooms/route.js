"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/rooms/route";
exports.ids = ["app/api/rooms/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "node:async_hooks":
/*!***********************************!*\
  !*** external "node:async_hooks" ***!
  \***********************************/
/***/ ((module) => {

module.exports = require("node:async_hooks");

/***/ }),

/***/ "node:child_process":
/*!*************************************!*\
  !*** external "node:child_process" ***!
  \*************************************/
/***/ ((module) => {

module.exports = require("node:child_process");

/***/ }),

/***/ "node:crypto":
/*!******************************!*\
  !*** external "node:crypto" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("node:crypto");

/***/ }),

/***/ "node:events":
/*!******************************!*\
  !*** external "node:events" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("node:events");

/***/ }),

/***/ "node:fs":
/*!**************************!*\
  !*** external "node:fs" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("node:fs");

/***/ }),

/***/ "node:fs/promises":
/*!***********************************!*\
  !*** external "node:fs/promises" ***!
  \***********************************/
/***/ ((module) => {

module.exports = require("node:fs/promises");

/***/ }),

/***/ "node:os":
/*!**************************!*\
  !*** external "node:os" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("node:os");

/***/ }),

/***/ "node:path":
/*!****************************!*\
  !*** external "node:path" ***!
  \****************************/
/***/ ((module) => {

module.exports = require("node:path");

/***/ }),

/***/ "node:process":
/*!*******************************!*\
  !*** external "node:process" ***!
  \*******************************/
/***/ ((module) => {

module.exports = require("node:process");

/***/ }),

/***/ "node:tty":
/*!***************************!*\
  !*** external "node:tty" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("node:tty");

/***/ }),

/***/ "node:util":
/*!****************************!*\
  !*** external "node:util" ***!
  \****************************/
/***/ ((module) => {

module.exports = require("node:util");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Frooms%2Froute&page=%2Fapi%2Frooms%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Frooms%2Froute.ts&appDir=%2FUsers%2Faunz%2FMyProject%2FNew%2Fcool_cat_resort%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Faunz%2FMyProject%2FNew%2Fcool_cat_resort&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Frooms%2Froute&page=%2Fapi%2Frooms%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Frooms%2Froute.ts&appDir=%2FUsers%2Faunz%2FMyProject%2FNew%2Fcool_cat_resort%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Faunz%2FMyProject%2FNew%2Fcool_cat_resort&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   headerHooks: () => (/* binding */ headerHooks),\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage),\n/* harmony export */   staticGenerationBailout: () => (/* binding */ staticGenerationBailout)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Users_aunz_MyProject_New_cool_cat_resort_src_app_api_rooms_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/rooms/route.ts */ \"(rsc)/./src/app/api/rooms/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/rooms/route\",\n        pathname: \"/api/rooms\",\n        filename: \"route\",\n        bundlePath: \"app/api/rooms/route\"\n    },\n    resolvedPagePath: \"/Users/aunz/MyProject/New/cool_cat_resort/src/app/api/rooms/route.ts\",\n    nextConfigOutput,\n    userland: _Users_aunz_MyProject_New_cool_cat_resort_src_app_api_rooms_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks, headerHooks, staticGenerationBailout } = routeModule;\nconst originalPathname = \"/api/rooms/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZyb29tcyUyRnJvdXRlJnBhZ2U9JTJGYXBpJTJGcm9vbXMlMkZyb3V0ZSZhcHBQYXRocz0mcGFnZVBhdGg9cHJpdmF0ZS1uZXh0LWFwcC1kaXIlMkZhcGklMkZyb29tcyUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRmF1bnolMkZNeVByb2plY3QlMkZOZXclMkZjb29sX2NhdF9yZXNvcnQlMkZzcmMlMkZhcHAmcGFnZUV4dGVuc2lvbnM9dHN4JnBhZ2VFeHRlbnNpb25zPXRzJnBhZ2VFeHRlbnNpb25zPWpzeCZwYWdlRXh0ZW5zaW9ucz1qcyZyb290RGlyPSUyRlVzZXJzJTJGYXVueiUyRk15UHJvamVjdCUyRk5ldyUyRmNvb2xfY2F0X3Jlc29ydCZpc0Rldj10cnVlJnRzY29uZmlnUGF0aD10c2NvbmZpZy5qc29uJmJhc2VQYXRoPSZhc3NldFByZWZpeD0mbmV4dENvbmZpZ091dHB1dD0mcHJlZmVycmVkUmVnaW9uPSZtaWRkbGV3YXJlQ29uZmlnPWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDYztBQUNvQjtBQUNqRztBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0hBQW1CO0FBQzNDO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLHVHQUF1RztBQUMvRztBQUNBO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQzZKOztBQUU3SiIsInNvdXJjZXMiOlsid2VicGFjazovL2Nvb2wtY2F0LXJlc29ydC1iYWNrb2ZmaWNlLz9kMGNkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcFJvdXRlUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgcGF0Y2hGZXRjaCBhcyBfcGF0Y2hGZXRjaCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2xpYi9wYXRjaC1mZXRjaFwiO1xuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi9Vc2Vycy9hdW56L015UHJvamVjdC9OZXcvY29vbF9jYXRfcmVzb3J0L3NyYy9hcHAvYXBpL3Jvb21zL3JvdXRlLnRzXCI7XG4vLyBXZSBpbmplY3QgdGhlIG5leHRDb25maWdPdXRwdXQgaGVyZSBzbyB0aGF0IHdlIGNhbiB1c2UgdGhlbSBpbiB0aGUgcm91dGVcbi8vIG1vZHVsZS5cbmNvbnN0IG5leHRDb25maWdPdXRwdXQgPSBcIlwiXG5jb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBBcHBSb3V0ZVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5BUFBfUk9VVEUsXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9yb29tcy9yb3V0ZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL3Jvb21zXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcInJvdXRlXCIsXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiYXBwL2FwaS9yb29tcy9yb3V0ZVwiXG4gICAgfSxcbiAgICByZXNvbHZlZFBhZ2VQYXRoOiBcIi9Vc2Vycy9hdW56L015UHJvamVjdC9OZXcvY29vbF9jYXRfcmVzb3J0L3NyYy9hcHAvYXBpL3Jvb21zL3JvdXRlLnRzXCIsXG4gICAgbmV4dENvbmZpZ091dHB1dCxcbiAgICB1c2VybGFuZFxufSk7XG4vLyBQdWxsIG91dCB0aGUgZXhwb3J0cyB0aGF0IHdlIG5lZWQgdG8gZXhwb3NlIGZyb20gdGhlIG1vZHVsZS4gVGhpcyBzaG91bGRcbi8vIGJlIGVsaW1pbmF0ZWQgd2hlbiB3ZSd2ZSBtb3ZlZCB0aGUgb3RoZXIgcm91dGVzIHRvIHRoZSBuZXcgZm9ybWF0LiBUaGVzZVxuLy8gYXJlIHVzZWQgdG8gaG9vayBpbnRvIHRoZSByb3V0ZS5cbmNvbnN0IHsgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIGhlYWRlckhvb2tzLCBzdGF0aWNHZW5lcmF0aW9uQmFpbG91dCB9ID0gcm91dGVNb2R1bGU7XG5jb25zdCBvcmlnaW5hbFBhdGhuYW1lID0gXCIvYXBpL3Jvb21zL3JvdXRlXCI7XG5mdW5jdGlvbiBwYXRjaEZldGNoKCkge1xuICAgIHJldHVybiBfcGF0Y2hGZXRjaCh7XG4gICAgICAgIHNlcnZlckhvb2tzLFxuICAgICAgICBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlXG4gICAgfSk7XG59XG5leHBvcnQgeyByb3V0ZU1vZHVsZSwgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIGhlYWRlckhvb2tzLCBzdGF0aWNHZW5lcmF0aW9uQmFpbG91dCwgb3JpZ2luYWxQYXRobmFtZSwgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Frooms%2Froute&page=%2Fapi%2Frooms%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Frooms%2Froute.ts&appDir=%2FUsers%2Faunz%2FMyProject%2FNew%2Fcool_cat_resort%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Faunz%2FMyProject%2FNew%2Fcool_cat_resort&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./generated/prisma/index.js":
/*!***********************************!*\
  !*** ./generated/prisma/index.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/* !!! This is code generated by Prisma. Do not edit directly. !!!\n/* eslint-disable */ \nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst { PrismaClientKnownRequestError, PrismaClientUnknownRequestError, PrismaClientRustPanicError, PrismaClientInitializationError, PrismaClientValidationError, getPrismaClient, sqltag, empty, join, raw, skip, Decimal, Debug, objectEnumValues, makeStrictEnum, Extensions, warnOnce, defineDmmfProperty, Public, getRuntime, createParam } = __webpack_require__(/*! ./runtime/library.js */ \"(rsc)/./generated/prisma/runtime/library.js\");\nconst Prisma = {};\nexports.Prisma = Prisma;\nexports.$Enums = {};\n/**\n * Prisma Client JS version: 6.13.0\n * Query Engine version: 361e86d0ea4987e9f53a565309b3eed797a6bcbd\n */ Prisma.prismaVersion = {\n    client: \"6.13.0\",\n    engine: \"361e86d0ea4987e9f53a565309b3eed797a6bcbd\"\n};\nPrisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;\nPrisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError;\nPrisma.PrismaClientRustPanicError = PrismaClientRustPanicError;\nPrisma.PrismaClientInitializationError = PrismaClientInitializationError;\nPrisma.PrismaClientValidationError = PrismaClientValidationError;\nPrisma.Decimal = Decimal;\n/**\n * Re-export of sql-template-tag\n */ Prisma.sql = sqltag;\nPrisma.empty = empty;\nPrisma.join = join;\nPrisma.raw = raw;\nPrisma.validator = Public.validator;\n/**\n* Extensions\n*/ Prisma.getExtensionContext = Extensions.getExtensionContext;\nPrisma.defineExtension = Extensions.defineExtension;\n/**\n * Shorthand utilities for JSON filtering\n */ Prisma.DbNull = objectEnumValues.instances.DbNull;\nPrisma.JsonNull = objectEnumValues.instances.JsonNull;\nPrisma.AnyNull = objectEnumValues.instances.AnyNull;\nPrisma.NullTypes = {\n    DbNull: objectEnumValues.classes.DbNull,\n    JsonNull: objectEnumValues.classes.JsonNull,\n    AnyNull: objectEnumValues.classes.AnyNull\n};\nconst path = __webpack_require__(/*! path */ \"path\");\n/**\n * Enums\n */ exports.Prisma.TransactionIsolationLevel = makeStrictEnum({\n    ReadUncommitted: \"ReadUncommitted\",\n    ReadCommitted: \"ReadCommitted\",\n    RepeatableRead: \"RepeatableRead\",\n    Serializable: \"Serializable\"\n});\nexports.Prisma.UserScalarFieldEnum = {\n    id: \"id\",\n    username: \"username\",\n    password: \"password\",\n    name: \"name\",\n    role: \"role\",\n    createdAt: \"createdAt\",\n    updatedAt: \"updatedAt\"\n};\nexports.Prisma.CustomerScalarFieldEnum = {\n    id: \"id\",\n    name: \"name\",\n    address: \"address\",\n    taxId: \"taxId\",\n    createdAt: \"createdAt\",\n    updatedAt: \"updatedAt\"\n};\nexports.Prisma.RoomScalarFieldEnum = {\n    id: \"id\",\n    name: \"name\",\n    price: \"price\",\n    createdAt: \"createdAt\",\n    updatedAt: \"updatedAt\"\n};\nexports.Prisma.ReservationScalarFieldEnum = {\n    id: \"id\",\n    number: \"number\",\n    customerId: \"customerId\",\n    checkInDate: \"checkInDate\",\n    checkOutDate: \"checkOutDate\",\n    totalAmount: \"totalAmount\",\n    extraBed: \"extraBed\",\n    notes: \"notes\",\n    createdAt: \"createdAt\",\n    updatedAt: \"updatedAt\"\n};\nexports.Prisma.ReservationRoomScalarFieldEnum = {\n    id: \"id\",\n    reservationId: \"reservationId\",\n    roomId: \"roomId\",\n    createdAt: \"createdAt\"\n};\nexports.Prisma.SortOrder = {\n    asc: \"asc\",\n    desc: \"desc\"\n};\nexports.Prisma.QueryMode = {\n    default: \"default\",\n    insensitive: \"insensitive\"\n};\nexports.Prisma.NullsOrder = {\n    first: \"first\",\n    last: \"last\"\n};\nexports.Prisma.ModelName = {\n    User: \"User\",\n    Customer: \"Customer\",\n    Room: \"Room\",\n    Reservation: \"Reservation\",\n    ReservationRoom: \"ReservationRoom\"\n};\n/**\n * Create the Client\n */ const config = {\n    \"generator\": {\n        \"name\": \"client\",\n        \"provider\": {\n            \"fromEnvVar\": null,\n            \"value\": \"prisma-client-js\"\n        },\n        \"output\": {\n            \"value\": \"/Users/aunz/MyProject/New/cool_cat_resort/generated/prisma\",\n            \"fromEnvVar\": null\n        },\n        \"config\": {\n            \"engineType\": \"library\"\n        },\n        \"binaryTargets\": [\n            {\n                \"fromEnvVar\": null,\n                \"value\": \"darwin-arm64\",\n                \"native\": true\n            }\n        ],\n        \"previewFeatures\": [],\n        \"sourceFilePath\": \"/Users/aunz/MyProject/New/cool_cat_resort/prisma/schema.prisma\",\n        \"isCustomOutput\": true\n    },\n    \"relativeEnvPaths\": {\n        \"rootEnvPath\": null,\n        \"schemaEnvPath\": \"../../.env\"\n    },\n    \"relativePath\": \"../../prisma\",\n    \"clientVersion\": \"6.13.0\",\n    \"engineVersion\": \"361e86d0ea4987e9f53a565309b3eed797a6bcbd\",\n    \"datasourceNames\": [\n        \"db\"\n    ],\n    \"activeProvider\": \"postgresql\",\n    \"postinstall\": false,\n    \"inlineDatasources\": {\n        \"db\": {\n            \"url\": {\n                \"fromEnvVar\": \"DATABASE_URL\",\n                \"value\": null\n            }\n        }\n    },\n    \"inlineSchema\": 'generator client {\\n  provider = \"prisma-client-js\"\\n  output   = \"../generated/prisma\"\\n}\\n\\ndatasource db {\\n  provider = \"postgresql\"\\n  url      = env(\"DATABASE_URL\")\\n}\\n\\nmodel User {\\n  id        String   @id @default(cuid())\\n  username  String   @unique\\n  password  String\\n  name      String\\n  role      String   @default(\"admin\")\\n  createdAt DateTime @default(now())\\n  updatedAt DateTime @updatedAt\\n\\n  @@map(\"users\")\\n}\\n\\nmodel Customer {\\n  id           String        @id @default(cuid())\\n  name         String\\n  address      String\\n  taxId        String\\n  createdAt    DateTime      @default(now())\\n  updatedAt    DateTime      @updatedAt\\n  reservations Reservation[]\\n\\n  @@map(\"customers\")\\n}\\n\\nmodel Room {\\n  id               String            @id @default(cuid())\\n  name             String            @unique\\n  price            Float\\n  createdAt        DateTime          @default(now())\\n  updatedAt        DateTime          @updatedAt\\n  reservationRooms ReservationRoom[]\\n\\n  @@map(\"rooms\")\\n}\\n\\nmodel Reservation {\\n  id           String            @id @default(cuid())\\n  number       Int\\n  customerId   String\\n  checkInDate  DateTime\\n  checkOutDate DateTime\\n  totalAmount  Float\\n  extraBed     Boolean           @default(false)\\n  notes        String?\\n  createdAt    DateTime          @default(now())\\n  updatedAt    DateTime          @updatedAt\\n  rooms        ReservationRoom[]\\n  customer     Customer          @relation(fields: [customerId], references: [id], onDelete: Cascade)\\n\\n  @@map(\"reservations\")\\n}\\n\\nmodel ReservationRoom {\\n  id            String      @id @default(cuid())\\n  reservationId String\\n  roomId        String\\n  createdAt     DateTime    @default(now())\\n  reservation   Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)\\n  room          Room        @relation(fields: [roomId], references: [id], onDelete: Cascade)\\n\\n  @@unique([reservationId, roomId])\\n  @@map(\"reservation_rooms\")\\n}\\n',\n    \"inlineSchemaHash\": \"704229dd3e40295c126ae54fb27fd214f5907a9e791ee05c2ad146a23a5688cf\",\n    \"copyEngine\": true\n};\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconfig.dirname = __dirname;\nif (!fs.existsSync(path.join(__dirname, \"schema.prisma\"))) {\n    const alternativePaths = [\n        \"generated/prisma\",\n        \"prisma\"\n    ];\n    const alternativePath = alternativePaths.find((altPath)=>{\n        return fs.existsSync(path.join(process.cwd(), altPath, \"schema.prisma\"));\n    }) ?? alternativePaths[0];\n    config.dirname = path.join(process.cwd(), alternativePath);\n    config.isBundled = true;\n}\nconfig.runtimeDataModel = JSON.parse('{\"models\":{\"User\":{\"dbName\":\"users\",\"schema\":null,\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":true,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"String\",\"nativeType\":null,\"default\":{\"name\":\"cuid\",\"args\":[1]},\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"username\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":true,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"password\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"name\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"role\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"String\",\"nativeType\":null,\"default\":\"admin\",\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"DateTime\",\"nativeType\":null,\"default\":{\"name\":\"now\",\"args\":[]},\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"DateTime\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":true}],\"primaryKey\":null,\"uniqueFields\":[],\"uniqueIndexes\":[],\"isGenerated\":false},\"Customer\":{\"dbName\":\"customers\",\"schema\":null,\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":true,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"String\",\"nativeType\":null,\"default\":{\"name\":\"cuid\",\"args\":[1]},\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"name\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"address\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"taxId\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"DateTime\",\"nativeType\":null,\"default\":{\"name\":\"now\",\"args\":[]},\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"DateTime\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":true},{\"name\":\"reservations\",\"kind\":\"object\",\"isList\":true,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Reservation\",\"nativeType\":null,\"relationName\":\"CustomerToReservation\",\"relationFromFields\":[],\"relationToFields\":[],\"isGenerated\":false,\"isUpdatedAt\":false}],\"primaryKey\":null,\"uniqueFields\":[],\"uniqueIndexes\":[],\"isGenerated\":false},\"Room\":{\"dbName\":\"rooms\",\"schema\":null,\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":true,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"String\",\"nativeType\":null,\"default\":{\"name\":\"cuid\",\"args\":[1]},\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"name\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":true,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"price\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Float\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"DateTime\",\"nativeType\":null,\"default\":{\"name\":\"now\",\"args\":[]},\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"DateTime\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":true},{\"name\":\"reservationRooms\",\"kind\":\"object\",\"isList\":true,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"ReservationRoom\",\"nativeType\":null,\"relationName\":\"ReservationRoomToRoom\",\"relationFromFields\":[],\"relationToFields\":[],\"isGenerated\":false,\"isUpdatedAt\":false}],\"primaryKey\":null,\"uniqueFields\":[],\"uniqueIndexes\":[],\"isGenerated\":false},\"Reservation\":{\"dbName\":\"reservations\",\"schema\":null,\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":true,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"String\",\"nativeType\":null,\"default\":{\"name\":\"cuid\",\"args\":[1]},\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"number\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Int\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"customerId\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":true,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"checkInDate\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"DateTime\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"checkOutDate\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"DateTime\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"totalAmount\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Float\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"extraBed\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"Boolean\",\"nativeType\":null,\"default\":false,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"notes\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"DateTime\",\"nativeType\":null,\"default\":{\"name\":\"now\",\"args\":[]},\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"DateTime\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":true},{\"name\":\"rooms\",\"kind\":\"object\",\"isList\":true,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"ReservationRoom\",\"nativeType\":null,\"relationName\":\"ReservationToReservationRoom\",\"relationFromFields\":[],\"relationToFields\":[],\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"customer\",\"kind\":\"object\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Customer\",\"nativeType\":null,\"relationName\":\"CustomerToReservation\",\"relationFromFields\":[\"customerId\"],\"relationToFields\":[\"id\"],\"relationOnDelete\":\"Cascade\",\"isGenerated\":false,\"isUpdatedAt\":false}],\"primaryKey\":null,\"uniqueFields\":[],\"uniqueIndexes\":[],\"isGenerated\":false},\"ReservationRoom\":{\"dbName\":\"reservation_rooms\",\"schema\":null,\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":true,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"String\",\"nativeType\":null,\"default\":{\"name\":\"cuid\",\"args\":[1]},\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"reservationId\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":true,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"roomId\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":true,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"DateTime\",\"nativeType\":null,\"default\":{\"name\":\"now\",\"args\":[]},\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"reservation\",\"kind\":\"object\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Reservation\",\"nativeType\":null,\"relationName\":\"ReservationToReservationRoom\",\"relationFromFields\":[\"reservationId\"],\"relationToFields\":[\"id\"],\"relationOnDelete\":\"Cascade\",\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"room\",\"kind\":\"object\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Room\",\"nativeType\":null,\"relationName\":\"ReservationRoomToRoom\",\"relationFromFields\":[\"roomId\"],\"relationToFields\":[\"id\"],\"relationOnDelete\":\"Cascade\",\"isGenerated\":false,\"isUpdatedAt\":false}],\"primaryKey\":null,\"uniqueFields\":[[\"reservationId\",\"roomId\"]],\"uniqueIndexes\":[{\"name\":null,\"fields\":[\"reservationId\",\"roomId\"]}],\"isGenerated\":false}},\"enums\":{},\"types\":{}}');\ndefineDmmfProperty(exports.Prisma, config.runtimeDataModel);\nconfig.engineWasm = undefined;\nconfig.compilerWasm = undefined;\nconst { warnEnvConflicts } = __webpack_require__(/*! ./runtime/library.js */ \"(rsc)/./generated/prisma/runtime/library.js\");\nwarnEnvConflicts({\n    rootEnvPath: config.relativeEnvPaths.rootEnvPath && path.resolve(config.dirname, config.relativeEnvPaths.rootEnvPath),\n    schemaEnvPath: config.relativeEnvPaths.schemaEnvPath && path.resolve(config.dirname, config.relativeEnvPaths.schemaEnvPath)\n});\nconst PrismaClient = getPrismaClient(config);\nexports.PrismaClient = PrismaClient;\nObject.assign(exports, Prisma);\n// file annotations for bundling tools to include these files\npath.join(__dirname, \"libquery_engine-darwin-arm64.dylib.node\");\npath.join(process.cwd(), \"generated/prisma/libquery_engine-darwin-arm64.dylib.node\");\n// file annotations for bundling tools to include these files\npath.join(__dirname, \"schema.prisma\");\npath.join(process.cwd(), \"generated/prisma/schema.prisma\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./generated/prisma/index.js\n");

/***/ }),

/***/ "(rsc)/./generated/prisma/runtime/library.js":
/*!*********************************************!*\
  !*** ./generated/prisma/runtime/library.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* !!! This is code generated by Prisma. Do not edit directly. !!!\n/* eslint-disable */ \nvar xu = Object.create;\nvar Vt = Object.defineProperty;\nvar vu = Object.getOwnPropertyDescriptor;\nvar Pu = Object.getOwnPropertyNames;\nvar Tu = Object.getPrototypeOf, Su = Object.prototype.hasOwnProperty;\nvar Oo = (e, r)=>()=>(e && (r = e(e = 0)), r);\nvar ne = (e, r)=>()=>(r || e((r = {\n            exports: {}\n        }).exports, r), r.exports), tr = (e, r)=>{\n    for(var t in r)Vt(e, t, {\n        get: r[t],\n        enumerable: !0\n    });\n}, _o = (e, r, t, n)=>{\n    if (r && typeof r == \"object\" || typeof r == \"function\") for (let i of Pu(r))!Su.call(e, i) && i !== t && Vt(e, i, {\n        get: ()=>r[i],\n        enumerable: !(n = vu(r, i)) || n.enumerable\n    });\n    return e;\n};\nvar C = (e, r, t)=>(t = e != null ? xu(Tu(e)) : {}, _o(r || !e || !e.__esModule ? Vt(t, \"default\", {\n        value: e,\n        enumerable: !0\n    }) : t, e)), Ru = (e)=>_o(Vt({}, \"__esModule\", {\n        value: !0\n    }), e);\nvar yi = ne((Fg, ss)=>{\n    \"use strict\";\n    ss.exports = (e, r = process.argv)=>{\n        let t = e.startsWith(\"-\") ? \"\" : e.length === 1 ? \"-\" : \"--\", n = r.indexOf(t + e), i = r.indexOf(\"--\");\n        return n !== -1 && (i === -1 || n < i);\n    };\n});\nvar us = ne((Mg, ls)=>{\n    \"use strict\";\n    var jc = __webpack_require__(/*! node:os */ \"node:os\"), as = __webpack_require__(/*! node:tty */ \"node:tty\"), de = yi(), { env: G } = process, Qe;\n    de(\"no-color\") || de(\"no-colors\") || de(\"color=false\") || de(\"color=never\") ? Qe = 0 : (de(\"color\") || de(\"colors\") || de(\"color=true\") || de(\"color=always\")) && (Qe = 1);\n    \"FORCE_COLOR\" in G && (G.FORCE_COLOR === \"true\" ? Qe = 1 : G.FORCE_COLOR === \"false\" ? Qe = 0 : Qe = G.FORCE_COLOR.length === 0 ? 1 : Math.min(parseInt(G.FORCE_COLOR, 10), 3));\n    function bi(e) {\n        return e === 0 ? !1 : {\n            level: e,\n            hasBasic: !0,\n            has256: e >= 2,\n            has16m: e >= 3\n        };\n    }\n    function Ei(e, r) {\n        if (Qe === 0) return 0;\n        if (de(\"color=16m\") || de(\"color=full\") || de(\"color=truecolor\")) return 3;\n        if (de(\"color=256\")) return 2;\n        if (e && !r && Qe === void 0) return 0;\n        let t = Qe || 0;\n        if (G.TERM === \"dumb\") return t;\n        if (process.platform === \"win32\") {\n            let n = jc.release().split(\".\");\n            return Number(n[0]) >= 10 && Number(n[2]) >= 10586 ? Number(n[2]) >= 14931 ? 3 : 2 : 1;\n        }\n        if (\"CI\" in G) return [\n            \"TRAVIS\",\n            \"CIRCLECI\",\n            \"APPVEYOR\",\n            \"GITLAB_CI\",\n            \"GITHUB_ACTIONS\",\n            \"BUILDKITE\"\n        ].some((n)=>n in G) || G.CI_NAME === \"codeship\" ? 1 : t;\n        if (\"TEAMCITY_VERSION\" in G) return /^(9\\.(0*[1-9]\\d*)\\.|\\d{2,}\\.)/.test(G.TEAMCITY_VERSION) ? 1 : 0;\n        if (G.COLORTERM === \"truecolor\") return 3;\n        if (\"TERM_PROGRAM\" in G) {\n            let n = parseInt((G.TERM_PROGRAM_VERSION || \"\").split(\".\")[0], 10);\n            switch(G.TERM_PROGRAM){\n                case \"iTerm.app\":\n                    return n >= 3 ? 3 : 2;\n                case \"Apple_Terminal\":\n                    return 2;\n            }\n        }\n        return /-256(color)?$/i.test(G.TERM) ? 2 : /^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(G.TERM) || \"COLORTERM\" in G ? 1 : t;\n    }\n    function Vc(e) {\n        let r = Ei(e, e && e.isTTY);\n        return bi(r);\n    }\n    ls.exports = {\n        supportsColor: Vc,\n        stdout: bi(Ei(!0, as.isatty(1))),\n        stderr: bi(Ei(!0, as.isatty(2)))\n    };\n});\nvar ds = ne(($g, ps)=>{\n    \"use strict\";\n    var Bc = us(), br = yi();\n    function cs(e) {\n        if (/^\\d{3,4}$/.test(e)) {\n            let t = /(\\d{1,2})(\\d{2})/.exec(e) || [];\n            return {\n                major: 0,\n                minor: parseInt(t[1], 10),\n                patch: parseInt(t[2], 10)\n            };\n        }\n        let r = (e || \"\").split(\".\").map((t)=>parseInt(t, 10));\n        return {\n            major: r[0],\n            minor: r[1],\n            patch: r[2]\n        };\n    }\n    function wi(e) {\n        let { CI: r, FORCE_HYPERLINK: t, NETLIFY: n, TEAMCITY_VERSION: i, TERM_PROGRAM: o, TERM_PROGRAM_VERSION: s, VTE_VERSION: a, TERM: l } = process.env;\n        if (t) return !(t.length > 0 && parseInt(t, 10) === 0);\n        if (br(\"no-hyperlink\") || br(\"no-hyperlinks\") || br(\"hyperlink=false\") || br(\"hyperlink=never\")) return !1;\n        if (br(\"hyperlink=true\") || br(\"hyperlink=always\") || n) return !0;\n        if (!Bc.supportsColor(e) || e && !e.isTTY) return !1;\n        if (\"WT_SESSION\" in process.env) return !0;\n        if (process.platform === \"win32\" || r || i) return !1;\n        if (o) {\n            let u = cs(s || \"\");\n            switch(o){\n                case \"iTerm.app\":\n                    return u.major === 3 ? u.minor >= 1 : u.major > 3;\n                case \"WezTerm\":\n                    return u.major >= 20200620;\n                case \"vscode\":\n                    return u.major > 1 || u.major === 1 && u.minor >= 72;\n                case \"ghostty\":\n                    return !0;\n            }\n        }\n        if (a) {\n            if (a === \"0.50.0\") return !1;\n            let u = cs(a);\n            return u.major > 0 || u.minor >= 50;\n        }\n        switch(l){\n            case \"alacritty\":\n                return !0;\n        }\n        return !1;\n    }\n    ps.exports = {\n        supportsHyperlink: wi,\n        stdout: wi(process.stdout),\n        stderr: wi(process.stderr)\n    };\n});\nvar ms = ne((zg, Uc)=>{\n    Uc.exports = {\n        name: \"@prisma/internals\",\n        version: \"6.13.0\",\n        description: \"This package is intended for Prisma's internal use\",\n        main: \"dist/index.js\",\n        types: \"dist/index.d.ts\",\n        repository: {\n            type: \"git\",\n            url: \"https://github.com/prisma/prisma.git\",\n            directory: \"packages/internals\"\n        },\n        homepage: \"https://www.prisma.io\",\n        author: \"Tim Suchanek <suchanek@prisma.io>\",\n        bugs: \"https://github.com/prisma/prisma/issues\",\n        license: \"Apache-2.0\",\n        scripts: {\n            dev: \"DEV=true tsx helpers/build.ts\",\n            build: \"tsx helpers/build.ts\",\n            test: \"dotenv -e ../../.db.env -- jest --silent\",\n            prepublishOnly: \"pnpm run build\"\n        },\n        files: [\n            \"README.md\",\n            \"dist\",\n            \"!**/libquery_engine*\",\n            \"!dist/get-generators/engines/*\",\n            \"scripts\"\n        ],\n        devDependencies: {\n            \"@babel/helper-validator-identifier\": \"7.25.9\",\n            \"@opentelemetry/api\": \"1.9.0\",\n            \"@swc/core\": \"1.11.5\",\n            \"@swc/jest\": \"0.2.37\",\n            \"@types/babel__helper-validator-identifier\": \"7.15.2\",\n            \"@types/jest\": \"29.5.14\",\n            \"@types/node\": \"18.19.76\",\n            \"@types/resolve\": \"1.20.6\",\n            archiver: \"6.0.2\",\n            \"checkpoint-client\": \"1.1.33\",\n            \"cli-truncate\": \"4.0.0\",\n            dotenv: \"16.5.0\",\n            esbuild: \"0.25.5\",\n            \"escape-string-regexp\": \"5.0.0\",\n            execa: \"5.1.1\",\n            \"fast-glob\": \"3.3.3\",\n            \"find-up\": \"7.0.0\",\n            \"fp-ts\": \"2.16.9\",\n            \"fs-extra\": \"11.3.0\",\n            \"fs-jetpack\": \"5.1.0\",\n            \"global-dirs\": \"4.0.0\",\n            globby: \"11.1.0\",\n            \"identifier-regex\": \"1.0.0\",\n            \"indent-string\": \"4.0.0\",\n            \"is-windows\": \"1.0.2\",\n            \"is-wsl\": \"3.1.0\",\n            jest: \"29.7.0\",\n            \"jest-junit\": \"16.0.0\",\n            kleur: \"4.1.5\",\n            \"mock-stdin\": \"1.0.0\",\n            \"new-github-issue-url\": \"0.2.1\",\n            \"node-fetch\": \"3.3.2\",\n            \"npm-packlist\": \"5.1.3\",\n            open: \"7.4.2\",\n            \"p-map\": \"4.0.0\",\n            \"read-package-up\": \"11.0.0\",\n            resolve: \"1.22.10\",\n            \"string-width\": \"7.2.0\",\n            \"strip-ansi\": \"6.0.1\",\n            \"strip-indent\": \"4.0.0\",\n            \"temp-dir\": \"2.0.0\",\n            tempy: \"1.0.1\",\n            \"terminal-link\": \"4.0.0\",\n            tmp: \"0.2.3\",\n            \"ts-node\": \"10.9.2\",\n            \"ts-pattern\": \"5.6.2\",\n            \"ts-toolbelt\": \"9.6.0\",\n            typescript: \"5.4.5\",\n            yarn: \"1.22.22\"\n        },\n        dependencies: {\n            \"@prisma/config\": \"workspace:*\",\n            \"@prisma/debug\": \"workspace:*\",\n            \"@prisma/dmmf\": \"workspace:*\",\n            \"@prisma/driver-adapter-utils\": \"workspace:*\",\n            \"@prisma/engines\": \"workspace:*\",\n            \"@prisma/fetch-engine\": \"workspace:*\",\n            \"@prisma/generator\": \"workspace:*\",\n            \"@prisma/generator-helper\": \"workspace:*\",\n            \"@prisma/get-platform\": \"workspace:*\",\n            \"@prisma/prisma-schema-wasm\": \"6.13.0-35.361e86d0ea4987e9f53a565309b3eed797a6bcbd\",\n            \"@prisma/schema-engine-wasm\": \"6.13.0-35.361e86d0ea4987e9f53a565309b3eed797a6bcbd\",\n            \"@prisma/schema-files-loader\": \"workspace:*\",\n            arg: \"5.0.2\",\n            prompts: \"2.4.2\"\n        },\n        peerDependencies: {\n            typescript: \">=5.1.0\"\n        },\n        peerDependenciesMeta: {\n            typescript: {\n                optional: !0\n            }\n        },\n        sideEffects: !1\n    };\n});\nvar Si = ne((bh, Kc)=>{\n    Kc.exports = {\n        name: \"@prisma/engines-version\",\n        version: \"6.13.0-35.361e86d0ea4987e9f53a565309b3eed797a6bcbd\",\n        main: \"index.js\",\n        types: \"index.d.ts\",\n        license: \"Apache-2.0\",\n        author: \"Tim Suchanek <suchanek@prisma.io>\",\n        prisma: {\n            enginesVersion: \"361e86d0ea4987e9f53a565309b3eed797a6bcbd\"\n        },\n        repository: {\n            type: \"git\",\n            url: \"https://github.com/prisma/engines-wrapper.git\",\n            directory: \"packages/engines-version\"\n        },\n        devDependencies: {\n            \"@types/node\": \"18.19.76\",\n            typescript: \"4.9.5\"\n        },\n        files: [\n            \"index.js\",\n            \"index.d.ts\"\n        ],\n        scripts: {\n            build: \"tsc -d\"\n        }\n    };\n});\nvar on = ne((nn)=>{\n    \"use strict\";\n    Object.defineProperty(nn, \"__esModule\", {\n        value: !0\n    });\n    nn.enginesVersion = void 0;\n    nn.enginesVersion = Si().prisma.enginesVersion;\n});\nvar bs = ne((Oh, ys)=>{\n    \"use strict\";\n    ys.exports = (e)=>{\n        let r = e.match(/^[ \\t]*(?=\\S)/gm);\n        return r ? r.reduce((t, n)=>Math.min(t, n.length), 1 / 0) : 0;\n    };\n});\nvar Di = ne((Lh, xs)=>{\n    \"use strict\";\n    xs.exports = (e, r = 1, t)=>{\n        if (t = {\n            indent: \" \",\n            includeEmptyLines: !1,\n            ...t\n        }, typeof e != \"string\") throw new TypeError(`Expected \\`input\\` to be a \\`string\\`, got \\`${typeof e}\\``);\n        if (typeof r != \"number\") throw new TypeError(`Expected \\`count\\` to be a \\`number\\`, got \\`${typeof r}\\``);\n        if (typeof t.indent != \"string\") throw new TypeError(`Expected \\`options.indent\\` to be a \\`string\\`, got \\`${typeof t.indent}\\``);\n        if (r === 0) return e;\n        let n = t.includeEmptyLines ? /^/gm : /^(?!\\s*$)/gm;\n        return e.replace(n, t.indent.repeat(r));\n    };\n});\nvar Ss = ne(($h, Ts)=>{\n    \"use strict\";\n    Ts.exports = ({ onlyFirst: e = !1 } = {})=>{\n        let r = [\n            \"[\\\\u001B\\\\u009B][[\\\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]+)*|[a-zA-Z\\\\d]+(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]*)*)?\\\\u0007)\",\n            \"(?:(?:\\\\d{1,4}(?:;\\\\d{0,4})*)?[\\\\dA-PR-TZcf-ntqry=><~]))\"\n        ].join(\"|\");\n        return new RegExp(r, e ? void 0 : \"g\");\n    };\n});\nvar Li = ne((qh, Rs)=>{\n    \"use strict\";\n    var op = Ss();\n    Rs.exports = (e)=>typeof e == \"string\" ? e.replace(op(), \"\") : e;\n});\nvar As = ne((Uh, sp)=>{\n    sp.exports = {\n        name: \"dotenv\",\n        version: \"16.5.0\",\n        description: \"Loads environment variables from .env file\",\n        main: \"lib/main.js\",\n        types: \"lib/main.d.ts\",\n        exports: {\n            \".\": {\n                types: \"./lib/main.d.ts\",\n                require: \"./lib/main.js\",\n                default: \"./lib/main.js\"\n            },\n            \"./config\": \"./config.js\",\n            \"./config.js\": \"./config.js\",\n            \"./lib/env-options\": \"./lib/env-options.js\",\n            \"./lib/env-options.js\": \"./lib/env-options.js\",\n            \"./lib/cli-options\": \"./lib/cli-options.js\",\n            \"./lib/cli-options.js\": \"./lib/cli-options.js\",\n            \"./package.json\": \"./package.json\"\n        },\n        scripts: {\n            \"dts-check\": \"tsc --project tests/types/tsconfig.json\",\n            lint: \"standard\",\n            pretest: \"npm run lint && npm run dts-check\",\n            test: \"tap run --allow-empty-coverage --disable-coverage --timeout=60000\",\n            \"test:coverage\": \"tap run --show-full-coverage --timeout=60000 --coverage-report=lcov\",\n            prerelease: \"npm test\",\n            release: \"standard-version\"\n        },\n        repository: {\n            type: \"git\",\n            url: \"git://github.com/motdotla/dotenv.git\"\n        },\n        homepage: \"https://github.com/motdotla/dotenv#readme\",\n        funding: \"https://dotenvx.com\",\n        keywords: [\n            \"dotenv\",\n            \"env\",\n            \".env\",\n            \"environment\",\n            \"variables\",\n            \"config\",\n            \"settings\"\n        ],\n        readmeFilename: \"README.md\",\n        license: \"BSD-2-Clause\",\n        devDependencies: {\n            \"@types/node\": \"^18.11.3\",\n            decache: \"^4.6.2\",\n            sinon: \"^14.0.1\",\n            standard: \"^17.0.0\",\n            \"standard-version\": \"^9.5.0\",\n            tap: \"^19.2.0\",\n            typescript: \"^4.8.4\"\n        },\n        engines: {\n            node: \">=12\"\n        },\n        browser: {\n            fs: !1\n        }\n    };\n});\nvar Os = ne((Gh, Le)=>{\n    \"use strict\";\n    var Mi = __webpack_require__(/*! node:fs */ \"node:fs\"), $i = __webpack_require__(/*! node:path */ \"node:path\"), ap = __webpack_require__(/*! node:os */ \"node:os\"), lp = __webpack_require__(/*! node:crypto */ \"node:crypto\"), up = As(), Is = up.version, cp = /(?:^|^)\\s*(?:export\\s+)?([\\w.-]+)(?:\\s*=\\s*?|:\\s+?)(\\s*'(?:\\\\'|[^'])*'|\\s*\"(?:\\\\\"|[^\"])*\"|\\s*`(?:\\\\`|[^`])*`|[^#\\r\\n]+)?\\s*(?:#.*)?(?:$|$)/mg;\n    function pp(e) {\n        let r = {}, t = e.toString();\n        t = t.replace(/\\r\\n?/mg, `\n`);\n        let n;\n        for(; (n = cp.exec(t)) != null;){\n            let i = n[1], o = n[2] || \"\";\n            o = o.trim();\n            let s = o[0];\n            o = o.replace(/^(['\"`])([\\s\\S]*)\\1$/mg, \"$2\"), s === '\"' && (o = o.replace(/\\\\n/g, `\n`), o = o.replace(/\\\\r/g, \"\\r\")), r[i] = o;\n        }\n        return r;\n    }\n    function dp(e) {\n        let r = Ds(e), t = B.configDotenv({\n            path: r\n        });\n        if (!t.parsed) {\n            let s = new Error(`MISSING_DATA: Cannot parse ${r} for an unknown reason`);\n            throw s.code = \"MISSING_DATA\", s;\n        }\n        let n = ks(e).split(\",\"), i = n.length, o;\n        for(let s = 0; s < i; s++)try {\n            let a = n[s].trim(), l = fp(t, a);\n            o = B.decrypt(l.ciphertext, l.key);\n            break;\n        } catch (a) {\n            if (s + 1 >= i) throw a;\n        }\n        return B.parse(o);\n    }\n    function mp(e) {\n        console.log(`[dotenv@${Is}][WARN] ${e}`);\n    }\n    function ot(e) {\n        console.log(`[dotenv@${Is}][DEBUG] ${e}`);\n    }\n    function ks(e) {\n        return e && e.DOTENV_KEY && e.DOTENV_KEY.length > 0 ? e.DOTENV_KEY : process.env.DOTENV_KEY && process.env.DOTENV_KEY.length > 0 ? process.env.DOTENV_KEY : \"\";\n    }\n    function fp(e, r) {\n        let t;\n        try {\n            t = new URL(r);\n        } catch (a) {\n            if (a.code === \"ERR_INVALID_URL\") {\n                let l = new Error(\"INVALID_DOTENV_KEY: Wrong format. Must be in valid uri format like dotenv://:key_1234@dotenvx.com/vault/.env.vault?environment=development\");\n                throw l.code = \"INVALID_DOTENV_KEY\", l;\n            }\n            throw a;\n        }\n        let n = t.password;\n        if (!n) {\n            let a = new Error(\"INVALID_DOTENV_KEY: Missing key part\");\n            throw a.code = \"INVALID_DOTENV_KEY\", a;\n        }\n        let i = t.searchParams.get(\"environment\");\n        if (!i) {\n            let a = new Error(\"INVALID_DOTENV_KEY: Missing environment part\");\n            throw a.code = \"INVALID_DOTENV_KEY\", a;\n        }\n        let o = `DOTENV_VAULT_${i.toUpperCase()}`, s = e.parsed[o];\n        if (!s) {\n            let a = new Error(`NOT_FOUND_DOTENV_ENVIRONMENT: Cannot locate environment ${o} in your .env.vault file.`);\n            throw a.code = \"NOT_FOUND_DOTENV_ENVIRONMENT\", a;\n        }\n        return {\n            ciphertext: s,\n            key: n\n        };\n    }\n    function Ds(e) {\n        let r = null;\n        if (e && e.path && e.path.length > 0) if (Array.isArray(e.path)) for (let t of e.path)Mi.existsSync(t) && (r = t.endsWith(\".vault\") ? t : `${t}.vault`);\n        else r = e.path.endsWith(\".vault\") ? e.path : `${e.path}.vault`;\n        else r = $i.resolve(process.cwd(), \".env.vault\");\n        return Mi.existsSync(r) ? r : null;\n    }\n    function Cs(e) {\n        return e[0] === \"~\" ? $i.join(ap.homedir(), e.slice(1)) : e;\n    }\n    function gp(e) {\n        !!(e && e.debug) && ot(\"Loading env from encrypted .env.vault\");\n        let t = B._parseVault(e), n = process.env;\n        return e && e.processEnv != null && (n = e.processEnv), B.populate(n, t, e), {\n            parsed: t\n        };\n    }\n    function hp(e) {\n        let r = $i.resolve(process.cwd(), \".env\"), t = \"utf8\", n = !!(e && e.debug);\n        e && e.encoding ? t = e.encoding : n && ot(\"No encoding is specified. UTF-8 is used by default\");\n        let i = [\n            r\n        ];\n        if (e && e.path) if (!Array.isArray(e.path)) i = [\n            Cs(e.path)\n        ];\n        else {\n            i = [];\n            for (let l of e.path)i.push(Cs(l));\n        }\n        let o, s = {};\n        for (let l of i)try {\n            let u = B.parse(Mi.readFileSync(l, {\n                encoding: t\n            }));\n            B.populate(s, u, e);\n        } catch (u) {\n            n && ot(`Failed to load ${l} ${u.message}`), o = u;\n        }\n        let a = process.env;\n        return e && e.processEnv != null && (a = e.processEnv), B.populate(a, s, e), o ? {\n            parsed: s,\n            error: o\n        } : {\n            parsed: s\n        };\n    }\n    function yp(e) {\n        if (ks(e).length === 0) return B.configDotenv(e);\n        let r = Ds(e);\n        return r ? B._configVault(e) : (mp(`You set DOTENV_KEY but you are missing a .env.vault file at ${r}. Did you forget to build it?`), B.configDotenv(e));\n    }\n    function bp(e, r) {\n        let t = Buffer.from(r.slice(-64), \"hex\"), n = Buffer.from(e, \"base64\"), i = n.subarray(0, 12), o = n.subarray(-16);\n        n = n.subarray(12, -16);\n        try {\n            let s = lp.createDecipheriv(\"aes-256-gcm\", t, i);\n            return s.setAuthTag(o), `${s.update(n)}${s.final()}`;\n        } catch (s) {\n            let a = s instanceof RangeError, l = s.message === \"Invalid key length\", u = s.message === \"Unsupported state or unable to authenticate data\";\n            if (a || l) {\n                let c = new Error(\"INVALID_DOTENV_KEY: It must be 64 characters long (or more)\");\n                throw c.code = \"INVALID_DOTENV_KEY\", c;\n            } else if (u) {\n                let c = new Error(\"DECRYPTION_FAILED: Please check your DOTENV_KEY\");\n                throw c.code = \"DECRYPTION_FAILED\", c;\n            } else throw s;\n        }\n    }\n    function Ep(e, r, t = {}) {\n        let n = !!(t && t.debug), i = !!(t && t.override);\n        if (typeof r != \"object\") {\n            let o = new Error(\"OBJECT_REQUIRED: Please check the processEnv argument being passed to populate\");\n            throw o.code = \"OBJECT_REQUIRED\", o;\n        }\n        for (let o of Object.keys(r))Object.prototype.hasOwnProperty.call(e, o) ? (i === !0 && (e[o] = r[o]), n && ot(i === !0 ? `\"${o}\" is already defined and WAS overwritten` : `\"${o}\" is already defined and was NOT overwritten`)) : e[o] = r[o];\n    }\n    var B = {\n        configDotenv: hp,\n        _configVault: gp,\n        _parseVault: dp,\n        config: yp,\n        decrypt: bp,\n        parse: pp,\n        populate: Ep\n    };\n    Le.exports.configDotenv = B.configDotenv;\n    Le.exports._configVault = B._configVault;\n    Le.exports._parseVault = B._parseVault;\n    Le.exports.config = B.config;\n    Le.exports.decrypt = B.decrypt;\n    Le.exports.parse = B.parse;\n    Le.exports.populate = B.populate;\n    Le.exports = B;\n});\nvar Fs = ne((Yh, cn)=>{\n    \"use strict\";\n    cn.exports = (e = {})=>{\n        let r;\n        if (e.repoUrl) r = e.repoUrl;\n        else if (e.user && e.repo) r = `https://github.com/${e.user}/${e.repo}`;\n        else throw new Error(\"You need to specify either the `repoUrl` option or both the `user` and `repo` options\");\n        let t = new URL(`${r}/issues/new`), n = [\n            \"body\",\n            \"title\",\n            \"labels\",\n            \"template\",\n            \"milestone\",\n            \"assignee\",\n            \"projects\"\n        ];\n        for (let i of n){\n            let o = e[i];\n            if (o !== void 0) {\n                if (i === \"labels\" || i === \"projects\") {\n                    if (!Array.isArray(o)) throw new TypeError(`The \\`${i}\\` option should be an array`);\n                    o = o.join(\",\");\n                }\n                t.searchParams.set(i, o);\n            }\n        }\n        return t.toString();\n    };\n    cn.exports.default = cn.exports;\n});\nvar Ki = ne((Ab, oa)=>{\n    \"use strict\";\n    oa.exports = function() {\n        function e(r, t, n, i, o) {\n            return r < t || n < t ? r > n ? n + 1 : r + 1 : i === o ? t : t + 1;\n        }\n        return function(r, t) {\n            if (r === t) return 0;\n            if (r.length > t.length) {\n                var n = r;\n                r = t, t = n;\n            }\n            for(var i = r.length, o = t.length; i > 0 && r.charCodeAt(i - 1) === t.charCodeAt(o - 1);)i--, o--;\n            for(var s = 0; s < i && r.charCodeAt(s) === t.charCodeAt(s);)s++;\n            if (i -= s, o -= s, i === 0 || o < 3) return o;\n            var a = 0, l, u, c, p, d, f, h, g, S, P, R, b, D = [];\n            for(l = 0; l < i; l++)D.push(l + 1), D.push(r.charCodeAt(s + l));\n            for(var me = D.length - 1; a < o - 3;)for(S = t.charCodeAt(s + (u = a)), P = t.charCodeAt(s + (c = a + 1)), R = t.charCodeAt(s + (p = a + 2)), b = t.charCodeAt(s + (d = a + 3)), f = a += 4, l = 0; l < me; l += 2)h = D[l], g = D[l + 1], u = e(h, u, c, S, g), c = e(u, c, p, P, g), p = e(c, p, d, R, g), f = e(p, d, f, b, g), D[l] = f, d = p, p = c, c = u, u = h;\n            for(; a < o;)for(S = t.charCodeAt(s + (u = a)), f = ++a, l = 0; l < me; l += 2)h = D[l], D[l] = f = e(h, u, f, S, D[l + 1]), u = h;\n            return f;\n        };\n    }();\n});\nvar ca = Oo(()=>{\n    \"use strict\";\n});\nvar pa = Oo(()=>{\n    \"use strict\";\n});\nvar Gf = {};\ntr(Gf, {\n    DMMF: ()=>ct,\n    Debug: ()=>N,\n    Decimal: ()=>ve,\n    Extensions: ()=>ii,\n    MetricsClient: ()=>Fr,\n    PrismaClientInitializationError: ()=>T,\n    PrismaClientKnownRequestError: ()=>z,\n    PrismaClientRustPanicError: ()=>le,\n    PrismaClientUnknownRequestError: ()=>j,\n    PrismaClientValidationError: ()=>Z,\n    Public: ()=>oi,\n    Sql: ()=>oe,\n    createParam: ()=>Aa,\n    defineDmmfProperty: ()=>_a,\n    deserializeJsonResponse: ()=>Tr,\n    deserializeRawResult: ()=>ei,\n    dmmfToRuntimeDataModel: ()=>Xs,\n    empty: ()=>Fa,\n    getPrismaClient: ()=>bu,\n    getRuntime: ()=>Gn,\n    join: ()=>La,\n    makeStrictEnum: ()=>Eu,\n    makeTypedQueryFactory: ()=>Na,\n    objectEnumValues: ()=>kn,\n    raw: ()=>io,\n    serializeJsonQuery: ()=>Mn,\n    skip: ()=>Fn,\n    sqltag: ()=>oo,\n    warnEnvConflicts: ()=>wu,\n    warnOnce: ()=>at\n});\nmodule.exports = Ru(Gf);\nvar ii = {};\ntr(ii, {\n    defineExtension: ()=>No,\n    getExtensionContext: ()=>Lo\n});\nfunction No(e) {\n    return typeof e == \"function\" ? e : (r)=>r.$extends(e);\n}\nfunction Lo(e) {\n    return e;\n}\nvar oi = {};\ntr(oi, {\n    validator: ()=>Fo\n});\nfunction Fo(...e) {\n    return (r)=>r;\n}\nvar Bt = {};\ntr(Bt, {\n    $: ()=>Vo,\n    bgBlack: ()=>Fu,\n    bgBlue: ()=>ju,\n    bgCyan: ()=>Bu,\n    bgGreen: ()=>$u,\n    bgMagenta: ()=>Vu,\n    bgRed: ()=>Mu,\n    bgWhite: ()=>Uu,\n    bgYellow: ()=>qu,\n    black: ()=>Ou,\n    blue: ()=>nr,\n    bold: ()=>W,\n    cyan: ()=>De,\n    dim: ()=>Ie,\n    gray: ()=>Kr,\n    green: ()=>qe,\n    grey: ()=>Lu,\n    hidden: ()=>ku,\n    inverse: ()=>Iu,\n    italic: ()=>Cu,\n    magenta: ()=>_u,\n    red: ()=>ce,\n    reset: ()=>Au,\n    strikethrough: ()=>Du,\n    underline: ()=>Y,\n    white: ()=>Nu,\n    yellow: ()=>ke\n});\nvar si, Mo, $o, qo, jo = !0;\ntypeof process < \"u\" && ({ FORCE_COLOR: si, NODE_DISABLE_COLORS: Mo, NO_COLOR: $o, TERM: qo } = process.env || {}, jo = process.stdout && process.stdout.isTTY);\nvar Vo = {\n    enabled: !Mo && $o == null && qo !== \"dumb\" && (si != null && si !== \"0\" || jo)\n};\nfunction F(e, r) {\n    let t = new RegExp(`\\\\x1b\\\\[${r}m`, \"g\"), n = `\\x1B[${e}m`, i = `\\x1B[${r}m`;\n    return function(o) {\n        return !Vo.enabled || o == null ? o : n + (~(\"\" + o).indexOf(i) ? o.replace(t, i + n) : o) + i;\n    };\n}\nvar Au = F(0, 0), W = F(1, 22), Ie = F(2, 22), Cu = F(3, 23), Y = F(4, 24), Iu = F(7, 27), ku = F(8, 28), Du = F(9, 29), Ou = F(30, 39), ce = F(31, 39), qe = F(32, 39), ke = F(33, 39), nr = F(34, 39), _u = F(35, 39), De = F(36, 39), Nu = F(37, 39), Kr = F(90, 39), Lu = F(90, 39), Fu = F(40, 49), Mu = F(41, 49), $u = F(42, 49), qu = F(43, 49), ju = F(44, 49), Vu = F(45, 49), Bu = F(46, 49), Uu = F(47, 49);\nvar Gu = 100, Bo = [\n    \"green\",\n    \"yellow\",\n    \"blue\",\n    \"magenta\",\n    \"cyan\",\n    \"red\"\n], Yr = [], Uo = Date.now(), Qu = 0, ai = typeof process < \"u\" ? process.env : {};\nglobalThis.DEBUG ??= ai.DEBUG ?? \"\";\nglobalThis.DEBUG_COLORS ??= ai.DEBUG_COLORS ? ai.DEBUG_COLORS === \"true\" : !0;\nvar zr = {\n    enable (e) {\n        typeof e == \"string\" && (globalThis.DEBUG = e);\n    },\n    disable () {\n        let e = globalThis.DEBUG;\n        return globalThis.DEBUG = \"\", e;\n    },\n    enabled (e) {\n        let r = globalThis.DEBUG.split(\",\").map((i)=>i.replace(/[.+?^${}()|[\\]\\\\]/g, \"\\\\$&\")), t = r.some((i)=>i === \"\" || i[0] === \"-\" ? !1 : e.match(RegExp(i.split(\"*\").join(\".*\") + \"$\"))), n = r.some((i)=>i === \"\" || i[0] !== \"-\" ? !1 : e.match(RegExp(i.slice(1).split(\"*\").join(\".*\") + \"$\")));\n        return t && !n;\n    },\n    log: (...e)=>{\n        let [r, t, ...n] = e;\n        (console.warn ?? console.log)(`${r} ${t}`, ...n);\n    },\n    formatters: {}\n};\nfunction Wu(e) {\n    let r = {\n        color: Bo[Qu++ % Bo.length],\n        enabled: zr.enabled(e),\n        namespace: e,\n        log: zr.log,\n        extend: ()=>{}\n    }, t = (...n)=>{\n        let { enabled: i, namespace: o, color: s, log: a } = r;\n        if (n.length !== 0 && Yr.push([\n            o,\n            ...n\n        ]), Yr.length > Gu && Yr.shift(), zr.enabled(o) || i) {\n            let l = n.map((c)=>typeof c == \"string\" ? c : Ju(c)), u = `+${Date.now() - Uo}ms`;\n            Uo = Date.now(), globalThis.DEBUG_COLORS ? a(Bt[s](W(o)), ...l, Bt[s](u)) : a(o, ...l, u);\n        }\n    };\n    return new Proxy(t, {\n        get: (n, i)=>r[i],\n        set: (n, i, o)=>r[i] = o\n    });\n}\nvar N = new Proxy(Wu, {\n    get: (e, r)=>zr[r],\n    set: (e, r, t)=>zr[r] = t\n});\nfunction Ju(e, r = 2) {\n    let t = new Set;\n    return JSON.stringify(e, (n, i)=>{\n        if (typeof i == \"object\" && i !== null) {\n            if (t.has(i)) return \"[Circular *]\";\n            t.add(i);\n        } else if (typeof i == \"bigint\") return i.toString();\n        return i;\n    }, r);\n}\nfunction Go(e = 7500) {\n    let r = Yr.map(([t, ...n])=>`${t} ${n.map((i)=>typeof i == \"string\" ? i : JSON.stringify(i)).join(\" \")}`).join(`\n`);\n    return r.length < e ? r : r.slice(-e);\n}\nfunction Qo() {\n    Yr.length = 0;\n}\nvar gr = N;\nvar Wo = C(__webpack_require__(/*! node:fs */ \"node:fs\"));\nfunction li() {\n    let e = process.env.PRISMA_QUERY_ENGINE_LIBRARY;\n    if (!(e && Wo.default.existsSync(e)) && process.arch === \"ia32\") throw new Error('The default query engine type (Node-API, \"library\") is currently not supported for 32bit Node. Please set `engineType = \"binary\"` in the \"generator\" block of your \"schema.prisma\" file (or use the environment variables \"PRISMA_CLIENT_ENGINE_TYPE=binary\" and/or \"PRISMA_CLI_QUERY_ENGINE_TYPE=binary\".)');\n}\nvar ui = [\n    \"darwin\",\n    \"darwin-arm64\",\n    \"debian-openssl-1.0.x\",\n    \"debian-openssl-1.1.x\",\n    \"debian-openssl-3.0.x\",\n    \"rhel-openssl-1.0.x\",\n    \"rhel-openssl-1.1.x\",\n    \"rhel-openssl-3.0.x\",\n    \"linux-arm64-openssl-1.1.x\",\n    \"linux-arm64-openssl-1.0.x\",\n    \"linux-arm64-openssl-3.0.x\",\n    \"linux-arm-openssl-1.1.x\",\n    \"linux-arm-openssl-1.0.x\",\n    \"linux-arm-openssl-3.0.x\",\n    \"linux-musl\",\n    \"linux-musl-openssl-3.0.x\",\n    \"linux-musl-arm64-openssl-1.1.x\",\n    \"linux-musl-arm64-openssl-3.0.x\",\n    \"linux-nixos\",\n    \"linux-static-x64\",\n    \"linux-static-arm64\",\n    \"windows\",\n    \"freebsd11\",\n    \"freebsd12\",\n    \"freebsd13\",\n    \"freebsd14\",\n    \"freebsd15\",\n    \"openbsd\",\n    \"netbsd\",\n    \"arm\"\n];\nvar Ut = \"libquery_engine\";\nfunction Gt(e, r) {\n    let t = r === \"url\";\n    return e.includes(\"windows\") ? t ? \"query_engine.dll.node\" : `query_engine-${e}.dll.node` : e.includes(\"darwin\") ? t ? `${Ut}.dylib.node` : `${Ut}-${e}.dylib.node` : t ? `${Ut}.so.node` : `${Ut}-${e}.so.node`;\n}\nvar Yo = C(__webpack_require__(/*! node:child_process */ \"node:child_process\")), fi = C(__webpack_require__(/*! node:fs/promises */ \"node:fs/promises\")), Kt = C(__webpack_require__(/*! node:os */ \"node:os\"));\nvar Oe = Symbol.for(\"@ts-pattern/matcher\"), Hu = Symbol.for(\"@ts-pattern/isVariadic\"), Wt = \"@ts-pattern/anonymous-select-key\", ci = (e)=>!!(e && typeof e == \"object\"), Qt = (e)=>e && !!e[Oe], Ee = (e, r, t)=>{\n    if (Qt(e)) {\n        let n = e[Oe](), { matched: i, selections: o } = n.match(r);\n        return i && o && Object.keys(o).forEach((s)=>t(s, o[s])), i;\n    }\n    if (ci(e)) {\n        if (!ci(r)) return !1;\n        if (Array.isArray(e)) {\n            if (!Array.isArray(r)) return !1;\n            let n = [], i = [], o = [];\n            for (let s of e.keys()){\n                let a = e[s];\n                Qt(a) && a[Hu] ? o.push(a) : o.length ? i.push(a) : n.push(a);\n            }\n            if (o.length) {\n                if (o.length > 1) throw new Error(\"Pattern error: Using `...P.array(...)` several times in a single pattern is not allowed.\");\n                if (r.length < n.length + i.length) return !1;\n                let s = r.slice(0, n.length), a = i.length === 0 ? [] : r.slice(-i.length), l = r.slice(n.length, i.length === 0 ? 1 / 0 : -i.length);\n                return n.every((u, c)=>Ee(u, s[c], t)) && i.every((u, c)=>Ee(u, a[c], t)) && (o.length === 0 || Ee(o[0], l, t));\n            }\n            return e.length === r.length && e.every((s, a)=>Ee(s, r[a], t));\n        }\n        return Reflect.ownKeys(e).every((n)=>{\n            let i = e[n];\n            return (n in r || Qt(o = i) && o[Oe]().matcherType === \"optional\") && Ee(i, r[n], t);\n            var o;\n        });\n    }\n    return Object.is(r, e);\n}, Ge = (e)=>{\n    var r, t, n;\n    return ci(e) ? Qt(e) ? (r = (t = (n = e[Oe]()).getSelectionKeys) == null ? void 0 : t.call(n)) != null ? r : [] : Array.isArray(e) ? Zr(e, Ge) : Zr(Object.values(e), Ge) : [];\n}, Zr = (e, r)=>e.reduce((t, n)=>t.concat(r(n)), []);\nfunction pe(e) {\n    return Object.assign(e, {\n        optional: ()=>Ku(e),\n        and: (r)=>q(e, r),\n        or: (r)=>Yu(e, r),\n        select: (r)=>r === void 0 ? Jo(e) : Jo(r, e)\n    });\n}\nfunction Ku(e) {\n    return pe({\n        [Oe]: ()=>({\n                match: (r)=>{\n                    let t = {}, n = (i, o)=>{\n                        t[i] = o;\n                    };\n                    return r === void 0 ? (Ge(e).forEach((i)=>n(i, void 0)), {\n                        matched: !0,\n                        selections: t\n                    }) : {\n                        matched: Ee(e, r, n),\n                        selections: t\n                    };\n                },\n                getSelectionKeys: ()=>Ge(e),\n                matcherType: \"optional\"\n            })\n    });\n}\nfunction q(...e) {\n    return pe({\n        [Oe]: ()=>({\n                match: (r)=>{\n                    let t = {}, n = (i, o)=>{\n                        t[i] = o;\n                    };\n                    return {\n                        matched: e.every((i)=>Ee(i, r, n)),\n                        selections: t\n                    };\n                },\n                getSelectionKeys: ()=>Zr(e, Ge),\n                matcherType: \"and\"\n            })\n    });\n}\nfunction Yu(...e) {\n    return pe({\n        [Oe]: ()=>({\n                match: (r)=>{\n                    let t = {}, n = (i, o)=>{\n                        t[i] = o;\n                    };\n                    return Zr(e, Ge).forEach((i)=>n(i, void 0)), {\n                        matched: e.some((i)=>Ee(i, r, n)),\n                        selections: t\n                    };\n                },\n                getSelectionKeys: ()=>Zr(e, Ge),\n                matcherType: \"or\"\n            })\n    });\n}\nfunction I(e) {\n    return {\n        [Oe]: ()=>({\n                match: (r)=>({\n                        matched: !!e(r)\n                    })\n            })\n    };\n}\nfunction Jo(...e) {\n    let r = typeof e[0] == \"string\" ? e[0] : void 0, t = e.length === 2 ? e[1] : typeof e[0] == \"string\" ? void 0 : e[0];\n    return pe({\n        [Oe]: ()=>({\n                match: (n)=>{\n                    let i = {\n                        [r ?? Wt]: n\n                    };\n                    return {\n                        matched: t === void 0 || Ee(t, n, (o, s)=>{\n                            i[o] = s;\n                        }),\n                        selections: i\n                    };\n                },\n                getSelectionKeys: ()=>[\n                        r ?? Wt\n                    ].concat(t === void 0 ? [] : Ge(t))\n            })\n    });\n}\nfunction ye(e) {\n    return typeof e == \"number\";\n}\nfunction je(e) {\n    return typeof e == \"string\";\n}\nfunction Ve(e) {\n    return typeof e == \"bigint\";\n}\nvar ng = pe(I(function(e) {\n    return !0;\n}));\nvar Be = (e)=>Object.assign(pe(e), {\n        startsWith: (r)=>{\n            return Be(q(e, (t = r, I((n)=>je(n) && n.startsWith(t)))));\n            var t;\n        },\n        endsWith: (r)=>{\n            return Be(q(e, (t = r, I((n)=>je(n) && n.endsWith(t)))));\n            var t;\n        },\n        minLength: (r)=>Be(q(e, ((t)=>I((n)=>je(n) && n.length >= t))(r))),\n        length: (r)=>Be(q(e, ((t)=>I((n)=>je(n) && n.length === t))(r))),\n        maxLength: (r)=>Be(q(e, ((t)=>I((n)=>je(n) && n.length <= t))(r))),\n        includes: (r)=>{\n            return Be(q(e, (t = r, I((n)=>je(n) && n.includes(t)))));\n            var t;\n        },\n        regex: (r)=>{\n            return Be(q(e, (t = r, I((n)=>je(n) && !!n.match(t)))));\n            var t;\n        }\n    }), ig = Be(I(je)), be = (e)=>Object.assign(pe(e), {\n        between: (r, t)=>be(q(e, ((n, i)=>I((o)=>ye(o) && n <= o && i >= o))(r, t))),\n        lt: (r)=>be(q(e, ((t)=>I((n)=>ye(n) && n < t))(r))),\n        gt: (r)=>be(q(e, ((t)=>I((n)=>ye(n) && n > t))(r))),\n        lte: (r)=>be(q(e, ((t)=>I((n)=>ye(n) && n <= t))(r))),\n        gte: (r)=>be(q(e, ((t)=>I((n)=>ye(n) && n >= t))(r))),\n        int: ()=>be(q(e, I((r)=>ye(r) && Number.isInteger(r)))),\n        finite: ()=>be(q(e, I((r)=>ye(r) && Number.isFinite(r)))),\n        positive: ()=>be(q(e, I((r)=>ye(r) && r > 0))),\n        negative: ()=>be(q(e, I((r)=>ye(r) && r < 0)))\n    }), og = be(I(ye)), Ue = (e)=>Object.assign(pe(e), {\n        between: (r, t)=>Ue(q(e, ((n, i)=>I((o)=>Ve(o) && n <= o && i >= o))(r, t))),\n        lt: (r)=>Ue(q(e, ((t)=>I((n)=>Ve(n) && n < t))(r))),\n        gt: (r)=>Ue(q(e, ((t)=>I((n)=>Ve(n) && n > t))(r))),\n        lte: (r)=>Ue(q(e, ((t)=>I((n)=>Ve(n) && n <= t))(r))),\n        gte: (r)=>Ue(q(e, ((t)=>I((n)=>Ve(n) && n >= t))(r))),\n        positive: ()=>Ue(q(e, I((r)=>Ve(r) && r > 0))),\n        negative: ()=>Ue(q(e, I((r)=>Ve(r) && r < 0)))\n    }), sg = Ue(I(Ve)), ag = pe(I(function(e) {\n    return typeof e == \"boolean\";\n})), lg = pe(I(function(e) {\n    return typeof e == \"symbol\";\n})), ug = pe(I(function(e) {\n    return e == null;\n})), cg = pe(I(function(e) {\n    return e != null;\n}));\nvar pi = class extends Error {\n    constructor(r){\n        let t;\n        try {\n            t = JSON.stringify(r);\n        } catch  {\n            t = r;\n        }\n        super(`Pattern matching error: no pattern matches value ${t}`), this.input = void 0, this.input = r;\n    }\n}, di = {\n    matched: !1,\n    value: void 0\n};\nfunction hr(e) {\n    return new mi(e, di);\n}\nvar mi = class e {\n    constructor(r, t){\n        this.input = void 0, this.state = void 0, this.input = r, this.state = t;\n    }\n    with(...r) {\n        if (this.state.matched) return this;\n        let t = r[r.length - 1], n = [\n            r[0]\n        ], i;\n        r.length === 3 && typeof r[1] == \"function\" ? i = r[1] : r.length > 2 && n.push(...r.slice(1, r.length - 1));\n        let o = !1, s = {}, a = (u, c)=>{\n            o = !0, s[u] = c;\n        }, l = !n.some((u)=>Ee(u, this.input, a)) || i && !i(this.input) ? di : {\n            matched: !0,\n            value: t(o ? Wt in s ? s[Wt] : s : this.input, this.input)\n        };\n        return new e(this.input, l);\n    }\n    when(r, t) {\n        if (this.state.matched) return this;\n        let n = !!r(this.input);\n        return new e(this.input, n ? {\n            matched: !0,\n            value: t(this.input, this.input)\n        } : di);\n    }\n    otherwise(r) {\n        return this.state.matched ? this.state.value : r(this.input);\n    }\n    exhaustive() {\n        if (this.state.matched) return this.state.value;\n        throw new pi(this.input);\n    }\n    run() {\n        return this.exhaustive();\n    }\n    returnType() {\n        return this;\n    }\n};\nvar zo = __webpack_require__(/*! node:util */ \"node:util\");\nvar zu = {\n    warn: ke(\"prisma:warn\")\n}, Zu = {\n    warn: ()=>!process.env.PRISMA_DISABLE_WARNINGS\n};\nfunction Jt(e, ...r) {\n    Zu.warn() && console.warn(`${zu.warn} ${e}`, ...r);\n}\nvar Xu = (0, zo.promisify)(Yo.default.exec), ee = gr(\"prisma:get-platform\"), ec = [\n    \"1.0.x\",\n    \"1.1.x\",\n    \"3.0.x\"\n];\nasync function Zo() {\n    let e = Kt.default.platform(), r = process.arch;\n    if (e === \"freebsd\") {\n        let s = await Yt(\"freebsd-version\");\n        if (s && s.trim().length > 0) {\n            let l = /^(\\d+)\\.?/.exec(s);\n            if (l) return {\n                platform: \"freebsd\",\n                targetDistro: `freebsd${l[1]}`,\n                arch: r\n            };\n        }\n    }\n    if (e !== \"linux\") return {\n        platform: e,\n        arch: r\n    };\n    let t = await tc(), n = await cc(), i = ic({\n        arch: r,\n        archFromUname: n,\n        familyDistro: t.familyDistro\n    }), { libssl: o } = await oc(i);\n    return {\n        platform: \"linux\",\n        libssl: o,\n        arch: r,\n        archFromUname: n,\n        ...t\n    };\n}\nfunction rc(e) {\n    let r = /^ID=\"?([^\"\\n]*)\"?$/im, t = /^ID_LIKE=\"?([^\"\\n]*)\"?$/im, n = r.exec(e), i = n && n[1] && n[1].toLowerCase() || \"\", o = t.exec(e), s = o && o[1] && o[1].toLowerCase() || \"\", a = hr({\n        id: i,\n        idLike: s\n    }).with({\n        id: \"alpine\"\n    }, ({ id: l })=>({\n            targetDistro: \"musl\",\n            familyDistro: l,\n            originalDistro: l\n        })).with({\n        id: \"raspbian\"\n    }, ({ id: l })=>({\n            targetDistro: \"arm\",\n            familyDistro: \"debian\",\n            originalDistro: l\n        })).with({\n        id: \"nixos\"\n    }, ({ id: l })=>({\n            targetDistro: \"nixos\",\n            originalDistro: l,\n            familyDistro: \"nixos\"\n        })).with({\n        id: \"debian\"\n    }, {\n        id: \"ubuntu\"\n    }, ({ id: l })=>({\n            targetDistro: \"debian\",\n            familyDistro: \"debian\",\n            originalDistro: l\n        })).with({\n        id: \"rhel\"\n    }, {\n        id: \"centos\"\n    }, {\n        id: \"fedora\"\n    }, ({ id: l })=>({\n            targetDistro: \"rhel\",\n            familyDistro: \"rhel\",\n            originalDistro: l\n        })).when(({ idLike: l })=>l.includes(\"debian\") || l.includes(\"ubuntu\"), ({ id: l })=>({\n            targetDistro: \"debian\",\n            familyDistro: \"debian\",\n            originalDistro: l\n        })).when(({ idLike: l })=>i === \"arch\" || l.includes(\"arch\"), ({ id: l })=>({\n            targetDistro: \"debian\",\n            familyDistro: \"arch\",\n            originalDistro: l\n        })).when(({ idLike: l })=>l.includes(\"centos\") || l.includes(\"fedora\") || l.includes(\"rhel\") || l.includes(\"suse\"), ({ id: l })=>({\n            targetDistro: \"rhel\",\n            familyDistro: \"rhel\",\n            originalDistro: l\n        })).otherwise(({ id: l })=>({\n            targetDistro: void 0,\n            familyDistro: void 0,\n            originalDistro: l\n        }));\n    return ee(`Found distro info:\n${JSON.stringify(a, null, 2)}`), a;\n}\nasync function tc() {\n    let e = \"/etc/os-release\";\n    try {\n        let r = await fi.default.readFile(e, {\n            encoding: \"utf-8\"\n        });\n        return rc(r);\n    } catch  {\n        return {\n            targetDistro: void 0,\n            familyDistro: void 0,\n            originalDistro: void 0\n        };\n    }\n}\nfunction nc(e) {\n    let r = /^OpenSSL\\s(\\d+\\.\\d+)\\.\\d+/.exec(e);\n    if (r) {\n        let t = `${r[1]}.x`;\n        return Xo(t);\n    }\n}\nfunction Ho(e) {\n    let r = /libssl\\.so\\.(\\d)(\\.\\d)?/.exec(e);\n    if (r) {\n        let t = `${r[1]}${r[2] ?? \".0\"}.x`;\n        return Xo(t);\n    }\n}\nfunction Xo(e) {\n    let r = (()=>{\n        if (rs(e)) return e;\n        let t = e.split(\".\");\n        return t[1] = \"0\", t.join(\".\");\n    })();\n    if (ec.includes(r)) return r;\n}\nfunction ic(e) {\n    return hr(e).with({\n        familyDistro: \"musl\"\n    }, ()=>(ee('Trying platform-specific paths for \"alpine\"'), [\n            \"/lib\",\n            \"/usr/lib\"\n        ])).with({\n        familyDistro: \"debian\"\n    }, ({ archFromUname: r })=>(ee('Trying platform-specific paths for \"debian\" (and \"ubuntu\")'), [\n            `/usr/lib/${r}-linux-gnu`,\n            `/lib/${r}-linux-gnu`\n        ])).with({\n        familyDistro: \"rhel\"\n    }, ()=>(ee('Trying platform-specific paths for \"rhel\"'), [\n            \"/lib64\",\n            \"/usr/lib64\"\n        ])).otherwise(({ familyDistro: r, arch: t, archFromUname: n })=>(ee(`Don't know any platform-specific paths for \"${r}\" on ${t} (${n})`), []));\n}\nasync function oc(e) {\n    let r = 'grep -v \"libssl.so.0\"', t = await Ko(e);\n    if (t) {\n        ee(`Found libssl.so file using platform-specific paths: ${t}`);\n        let o = Ho(t);\n        if (ee(`The parsed libssl version is: ${o}`), o) return {\n            libssl: o,\n            strategy: \"libssl-specific-path\"\n        };\n    }\n    ee('Falling back to \"ldconfig\" and other generic paths');\n    let n = await Yt(`ldconfig -p | sed \"s/.*=>s*//\" | sed \"s|.*/||\" | grep libssl | sort | ${r}`);\n    if (n || (n = await Ko([\n        \"/lib64\",\n        \"/usr/lib64\",\n        \"/lib\",\n        \"/usr/lib\"\n    ])), n) {\n        ee(`Found libssl.so file using \"ldconfig\" or other generic paths: ${n}`);\n        let o = Ho(n);\n        if (ee(`The parsed libssl version is: ${o}`), o) return {\n            libssl: o,\n            strategy: \"ldconfig\"\n        };\n    }\n    let i = await Yt(\"openssl version -v\");\n    if (i) {\n        ee(`Found openssl binary with version: ${i}`);\n        let o = nc(i);\n        if (ee(`The parsed openssl version is: ${o}`), o) return {\n            libssl: o,\n            strategy: \"openssl-binary\"\n        };\n    }\n    return ee(\"Couldn't find any version of libssl or OpenSSL in the system\"), {};\n}\nasync function Ko(e) {\n    for (let r of e){\n        let t = await sc(r);\n        if (t) return t;\n    }\n}\nasync function sc(e) {\n    try {\n        return (await fi.default.readdir(e)).find((t)=>t.startsWith(\"libssl.so.\") && !t.startsWith(\"libssl.so.0\"));\n    } catch (r) {\n        if (r.code === \"ENOENT\") return;\n        throw r;\n    }\n}\nasync function ir() {\n    let { binaryTarget: e } = await es();\n    return e;\n}\nfunction ac(e) {\n    return e.binaryTarget !== void 0;\n}\nasync function gi() {\n    let { memoized: e, ...r } = await es();\n    return r;\n}\nvar Ht = {};\nasync function es() {\n    if (ac(Ht)) return Promise.resolve({\n        ...Ht,\n        memoized: !0\n    });\n    let e = await Zo(), r = lc(e);\n    return Ht = {\n        ...e,\n        binaryTarget: r\n    }, {\n        ...Ht,\n        memoized: !1\n    };\n}\nfunction lc(e) {\n    let { platform: r, arch: t, archFromUname: n, libssl: i, targetDistro: o, familyDistro: s, originalDistro: a } = e;\n    r === \"linux\" && ![\n        \"x64\",\n        \"arm64\"\n    ].includes(t) && Jt(`Prisma only officially supports Linux on amd64 (x86_64) and arm64 (aarch64) system architectures (detected \"${t}\" instead). If you are using your own custom Prisma engines, you can ignore this warning, as long as you've compiled the engines for your system architecture \"${n}\".`);\n    let l = \"1.1.x\";\n    if (r === \"linux\" && i === void 0) {\n        let c = hr({\n            familyDistro: s\n        }).with({\n            familyDistro: \"debian\"\n        }, ()=>\"Please manually install OpenSSL via `apt-get update -y && apt-get install -y openssl` and try installing Prisma again. If you're running Prisma on Docker, add this command to your Dockerfile, or switch to an image that already has OpenSSL installed.\").otherwise(()=>\"Please manually install OpenSSL and try installing Prisma again.\");\n        Jt(`Prisma failed to detect the libssl/openssl version to use, and may not work as expected. Defaulting to \"openssl-${l}\".\n${c}`);\n    }\n    let u = \"debian\";\n    if (r === \"linux\" && o === void 0 && ee(`Distro is \"${a}\". Falling back to Prisma engines built for \"${u}\".`), r === \"darwin\" && t === \"arm64\") return \"darwin-arm64\";\n    if (r === \"darwin\") return \"darwin\";\n    if (r === \"win32\") return \"windows\";\n    if (r === \"freebsd\") return o;\n    if (r === \"openbsd\") return \"openbsd\";\n    if (r === \"netbsd\") return \"netbsd\";\n    if (r === \"linux\" && o === \"nixos\") return \"linux-nixos\";\n    if (r === \"linux\" && t === \"arm64\") return `${o === \"musl\" ? \"linux-musl-arm64\" : \"linux-arm64\"}-openssl-${i || l}`;\n    if (r === \"linux\" && t === \"arm\") return `linux-arm-openssl-${i || l}`;\n    if (r === \"linux\" && o === \"musl\") {\n        let c = \"linux-musl\";\n        return !i || rs(i) ? c : `${c}-openssl-${i}`;\n    }\n    return r === \"linux\" && o && i ? `${o}-openssl-${i}` : (r !== \"linux\" && Jt(`Prisma detected unknown OS \"${r}\" and may not work as expected. Defaulting to \"linux\".`), i ? `${u}-openssl-${i}` : o ? `${o}-openssl-${l}` : `${u}-openssl-${l}`);\n}\nasync function uc(e) {\n    try {\n        return await e();\n    } catch  {\n        return;\n    }\n}\nfunction Yt(e) {\n    return uc(async ()=>{\n        let r = await Xu(e);\n        return ee(`Command \"${e}\" successfully returned \"${r.stdout}\"`), r.stdout;\n    });\n}\nasync function cc() {\n    return typeof Kt.default.machine == \"function\" ? Kt.default.machine() : (await Yt(\"uname -m\"))?.trim();\n}\nfunction rs(e) {\n    return e.startsWith(\"1.\");\n}\nvar Xt = {};\ntr(Xt, {\n    beep: ()=>Fc,\n    clearScreen: ()=>Oc,\n    clearTerminal: ()=>_c,\n    cursorBackward: ()=>yc,\n    cursorDown: ()=>gc,\n    cursorForward: ()=>hc,\n    cursorGetPosition: ()=>wc,\n    cursorHide: ()=>Pc,\n    cursorLeft: ()=>is,\n    cursorMove: ()=>fc,\n    cursorNextLine: ()=>xc,\n    cursorPrevLine: ()=>vc,\n    cursorRestorePosition: ()=>Ec,\n    cursorSavePosition: ()=>bc,\n    cursorShow: ()=>Tc,\n    cursorTo: ()=>mc,\n    cursorUp: ()=>ns,\n    enterAlternativeScreen: ()=>Nc,\n    eraseDown: ()=>Cc,\n    eraseEndLine: ()=>Rc,\n    eraseLine: ()=>os,\n    eraseLines: ()=>Sc,\n    eraseScreen: ()=>hi,\n    eraseStartLine: ()=>Ac,\n    eraseUp: ()=>Ic,\n    exitAlternativeScreen: ()=>Lc,\n    iTerm: ()=>qc,\n    image: ()=>$c,\n    link: ()=>Mc,\n    scrollDown: ()=>Dc,\n    scrollUp: ()=>kc\n});\nvar Zt = C(__webpack_require__(/*! node:process */ \"node:process\"), 1);\nvar zt = globalThis.window?.document !== void 0, bg = globalThis.process?.versions?.node !== void 0, Eg = globalThis.process?.versions?.bun !== void 0, wg = globalThis.Deno?.version?.deno !== void 0, xg = globalThis.process?.versions?.electron !== void 0, vg = globalThis.navigator?.userAgent?.includes(\"jsdom\") === !0, Pg = typeof WorkerGlobalScope < \"u\" && globalThis instanceof WorkerGlobalScope, Tg = typeof DedicatedWorkerGlobalScope < \"u\" && globalThis instanceof DedicatedWorkerGlobalScope, Sg = typeof SharedWorkerGlobalScope < \"u\" && globalThis instanceof SharedWorkerGlobalScope, Rg = typeof ServiceWorkerGlobalScope < \"u\" && globalThis instanceof ServiceWorkerGlobalScope, Xr = globalThis.navigator?.userAgentData?.platform, Ag = Xr === \"macOS\" || globalThis.navigator?.platform === \"MacIntel\" || globalThis.navigator?.userAgent?.includes(\" Mac \") === !0 || globalThis.process?.platform === \"darwin\", Cg = Xr === \"Windows\" || globalThis.navigator?.platform === \"Win32\" || globalThis.process?.platform === \"win32\", Ig = Xr === \"Linux\" || globalThis.navigator?.platform?.startsWith(\"Linux\") === !0 || globalThis.navigator?.userAgent?.includes(\" Linux \") === !0 || globalThis.process?.platform === \"linux\", kg = Xr === \"iOS\" || globalThis.navigator?.platform === \"MacIntel\" && globalThis.navigator?.maxTouchPoints > 1 || /iPad|iPhone|iPod/.test(globalThis.navigator?.platform), Dg = Xr === \"Android\" || globalThis.navigator?.platform === \"Android\" || globalThis.navigator?.userAgent?.includes(\" Android \") === !0 || globalThis.process?.platform === \"android\";\nvar k = \"\\x1b[\", rt = \"\\x1b]\", yr = \"\\x07\", et = \";\", ts = !zt && Zt.default.env.TERM_PROGRAM === \"Apple_Terminal\", pc = !zt && Zt.default.platform === \"win32\", dc = zt ? ()=>{\n    throw new Error(\"`process.cwd()` only works in Node.js, not the browser.\");\n} : Zt.default.cwd, mc = (e, r)=>{\n    if (typeof e != \"number\") throw new TypeError(\"The `x` argument is required\");\n    return typeof r != \"number\" ? k + (e + 1) + \"G\" : k + (r + 1) + et + (e + 1) + \"H\";\n}, fc = (e, r)=>{\n    if (typeof e != \"number\") throw new TypeError(\"The `x` argument is required\");\n    let t = \"\";\n    return e < 0 ? t += k + -e + \"D\" : e > 0 && (t += k + e + \"C\"), r < 0 ? t += k + -r + \"A\" : r > 0 && (t += k + r + \"B\"), t;\n}, ns = (e = 1)=>k + e + \"A\", gc = (e = 1)=>k + e + \"B\", hc = (e = 1)=>k + e + \"C\", yc = (e = 1)=>k + e + \"D\", is = k + \"G\", bc = ts ? \"\\x1b7\" : k + \"s\", Ec = ts ? \"\\x1b8\" : k + \"u\", wc = k + \"6n\", xc = k + \"E\", vc = k + \"F\", Pc = k + \"?25l\", Tc = k + \"?25h\", Sc = (e)=>{\n    let r = \"\";\n    for(let t = 0; t < e; t++)r += os + (t < e - 1 ? ns() : \"\");\n    return e && (r += is), r;\n}, Rc = k + \"K\", Ac = k + \"1K\", os = k + \"2K\", Cc = k + \"J\", Ic = k + \"1J\", hi = k + \"2J\", kc = k + \"S\", Dc = k + \"T\", Oc = \"\\x1bc\", _c = pc ? `${hi}${k}0f` : `${hi}${k}3J${k}H`, Nc = k + \"?1049h\", Lc = k + \"?1049l\", Fc = yr, Mc = (e, r)=>[\n        rt,\n        \"8\",\n        et,\n        et,\n        r,\n        yr,\n        e,\n        rt,\n        \"8\",\n        et,\n        et,\n        yr\n    ].join(\"\"), $c = (e, r = {})=>{\n    let t = `${rt}1337;File=inline=1`;\n    return r.width && (t += `;width=${r.width}`), r.height && (t += `;height=${r.height}`), r.preserveAspectRatio === !1 && (t += \";preserveAspectRatio=0\"), t + \":\" + Buffer.from(e).toString(\"base64\") + yr;\n}, qc = {\n    setCwd: (e = dc())=>`${rt}50;CurrentDir=${e}${yr}`,\n    annotation (e, r = {}) {\n        let t = `${rt}1337;`, n = r.x !== void 0, i = r.y !== void 0;\n        if ((n || i) && !(n && i && r.length !== void 0)) throw new Error(\"`x`, `y` and `length` must be defined when `x` or `y` is defined\");\n        return e = e.replaceAll(\"|\", \"\"), t += r.isHidden ? \"AddHiddenAnnotation=\" : \"AddAnnotation=\", r.length > 0 ? t += (n ? [\n            e,\n            r.length,\n            r.x,\n            r.y\n        ] : [\n            r.length,\n            e\n        ]).join(\"|\") : t += e, t + yr;\n    }\n};\nvar en = C(ds(), 1);\nfunction or(e, r, { target: t = \"stdout\", ...n } = {}) {\n    return en.default[t] ? Xt.link(e, r) : n.fallback === !1 ? e : typeof n.fallback == \"function\" ? n.fallback(e, r) : `${e} (\\u200B${r}\\u200B)`;\n}\nor.isSupported = en.default.stdout;\nor.stderr = (e, r, t = {})=>or(e, r, {\n        target: \"stderr\",\n        ...t\n    });\nor.stderr.isSupported = en.default.stderr;\nfunction xi(e) {\n    return or(e, e, {\n        fallback: Y\n    });\n}\nvar Gc = ms(), vi = Gc.version;\nfunction Er(e) {\n    let r = Qc();\n    return r || (e?.config.engineType === \"library\" ? \"library\" : e?.config.engineType === \"binary\" ? \"binary\" : e?.config.engineType === \"client\" ? \"client\" : Wc(e));\n}\nfunction Qc() {\n    let e = process.env.PRISMA_CLIENT_ENGINE_TYPE;\n    return e === \"library\" ? \"library\" : e === \"binary\" ? \"binary\" : e === \"client\" ? \"client\" : void 0;\n}\nfunction Wc(e) {\n    return e?.previewFeatures.includes(\"queryCompiler\") ? \"client\" : \"library\";\n}\nfunction Pi(e) {\n    return e.name === \"DriverAdapterError\" && typeof e.cause == \"object\";\n}\nfunction rn(e) {\n    return {\n        ok: !0,\n        value: e,\n        map (r) {\n            return rn(r(e));\n        },\n        flatMap (r) {\n            return r(e);\n        }\n    };\n}\nfunction sr(e) {\n    return {\n        ok: !1,\n        error: e,\n        map () {\n            return sr(e);\n        },\n        flatMap () {\n            return sr(e);\n        }\n    };\n}\nvar fs = N(\"driver-adapter-utils\"), Ti = class {\n    consumeError(r) {\n        return this.registeredErrors[r];\n    }\n    registerNewError(r) {\n        let t = 0;\n        for(; this.registeredErrors[t] !== void 0;)t++;\n        return this.registeredErrors[t] = {\n            error: r\n        }, t;\n    }\n    constructor(){\n        this.registeredErrors = [];\n    }\n};\nvar tn = (e, r = new Ti)=>{\n    let t = {\n        adapterName: e.adapterName,\n        errorRegistry: r,\n        queryRaw: _e(r, e.queryRaw.bind(e)),\n        executeRaw: _e(r, e.executeRaw.bind(e)),\n        executeScript: _e(r, e.executeScript.bind(e)),\n        dispose: _e(r, e.dispose.bind(e)),\n        provider: e.provider,\n        startTransaction: async (...n)=>(await _e(r, e.startTransaction.bind(e))(...n)).map((o)=>Jc(r, o))\n    };\n    return e.getConnectionInfo && (t.getConnectionInfo = Hc(r, e.getConnectionInfo.bind(e))), t;\n}, Jc = (e, r)=>({\n        adapterName: r.adapterName,\n        provider: r.provider,\n        options: r.options,\n        queryRaw: _e(e, r.queryRaw.bind(r)),\n        executeRaw: _e(e, r.executeRaw.bind(r)),\n        commit: _e(e, r.commit.bind(r)),\n        rollback: _e(e, r.rollback.bind(r))\n    });\nfunction _e(e, r) {\n    return async (...t)=>{\n        try {\n            return rn(await r(...t));\n        } catch (n) {\n            if (fs(\"[error@wrapAsync]\", n), Pi(n)) return sr(n.cause);\n            let i = e.registerNewError(n);\n            return sr({\n                kind: \"GenericJs\",\n                id: i\n            });\n        }\n    };\n}\nfunction Hc(e, r) {\n    return (...t)=>{\n        try {\n            return rn(r(...t));\n        } catch (n) {\n            if (fs(\"[error@wrapSync]\", n), Pi(n)) return sr(n.cause);\n            let i = e.registerNewError(n);\n            return sr({\n                kind: \"GenericJs\",\n                id: i\n            });\n        }\n    };\n}\nvar Yc = C(on());\nvar M = C(__webpack_require__(/*! node:path */ \"node:path\")), zc = C(on()), Ph = N(\"prisma:engines\");\nfunction gs() {\n    return M.default.join(__dirname, \"../\");\n}\nvar Th = \"libquery-engine\";\nM.default.join(__dirname, \"../query-engine-darwin\");\nM.default.join(__dirname, \"../query-engine-darwin-arm64\");\nM.default.join(__dirname, \"../query-engine-debian-openssl-1.0.x\");\nM.default.join(__dirname, \"../query-engine-debian-openssl-1.1.x\");\nM.default.join(__dirname, \"../query-engine-debian-openssl-3.0.x\");\nM.default.join(__dirname, \"../query-engine-linux-static-x64\");\nM.default.join(__dirname, \"../query-engine-linux-static-arm64\");\nM.default.join(__dirname, \"../query-engine-rhel-openssl-1.0.x\");\nM.default.join(__dirname, \"../query-engine-rhel-openssl-1.1.x\");\nM.default.join(__dirname, \"../query-engine-rhel-openssl-3.0.x\");\nM.default.join(__dirname, \"../libquery_engine-darwin.dylib.node\");\nM.default.join(__dirname, \"../libquery_engine-darwin-arm64.dylib.node\");\nM.default.join(__dirname, \"../libquery_engine-debian-openssl-1.0.x.so.node\");\nM.default.join(__dirname, \"../libquery_engine-debian-openssl-1.1.x.so.node\");\nM.default.join(__dirname, \"../libquery_engine-debian-openssl-3.0.x.so.node\");\nM.default.join(__dirname, \"../libquery_engine-linux-arm64-openssl-1.0.x.so.node\");\nM.default.join(__dirname, \"../libquery_engine-linux-arm64-openssl-1.1.x.so.node\");\nM.default.join(__dirname, \"../libquery_engine-linux-arm64-openssl-3.0.x.so.node\");\nM.default.join(__dirname, \"../libquery_engine-linux-musl.so.node\");\nM.default.join(__dirname, \"../libquery_engine-linux-musl-openssl-3.0.x.so.node\");\nM.default.join(__dirname, \"../libquery_engine-rhel-openssl-1.0.x.so.node\");\nM.default.join(__dirname, \"../libquery_engine-rhel-openssl-1.1.x.so.node\");\nM.default.join(__dirname, \"../libquery_engine-rhel-openssl-3.0.x.so.node\");\nM.default.join(__dirname, \"../query_engine-windows.dll.node\");\nvar Ri = C(__webpack_require__(/*! node:fs */ \"node:fs\")), hs = gr(\"chmodPlusX\");\nfunction Ai(e) {\n    if (process.platform === \"win32\") return;\n    let r = Ri.default.statSync(e), t = r.mode | 64 | 8 | 1;\n    if (r.mode === t) {\n        hs(`Execution permissions of ${e} are fine`);\n        return;\n    }\n    let n = t.toString(8).slice(-3);\n    hs(`Have to call chmodPlusX on ${e}`), Ri.default.chmodSync(e, n);\n}\nfunction Ci(e) {\n    let r = e.e, t = (a)=>`Prisma cannot find the required \\`${a}\\` system library in your system`, n = r.message.includes(\"cannot open shared object file\"), i = `Please refer to the documentation about Prisma's system requirements: ${xi(\"https://pris.ly/d/system-requirements\")}`, o = `Unable to require(\\`${Ie(e.id)}\\`).`, s = hr({\n        message: r.message,\n        code: r.code\n    }).with({\n        code: \"ENOENT\"\n    }, ()=>\"File does not exist.\").when(({ message: a })=>n && a.includes(\"libz\"), ()=>`${t(\"libz\")}. Please install it and try again.`).when(({ message: a })=>n && a.includes(\"libgcc_s\"), ()=>`${t(\"libgcc_s\")}. Please install it and try again.`).when(({ message: a })=>n && a.includes(\"libssl\"), ()=>{\n        let a = e.platformInfo.libssl ? `openssl-${e.platformInfo.libssl}` : \"openssl\";\n        return `${t(\"libssl\")}. Please install ${a} and try again.`;\n    }).when(({ message: a })=>a.includes(\"GLIBC\"), ()=>`Prisma has detected an incompatible version of the \\`glibc\\` C standard library installed in your system. This probably means your system may be too old to run Prisma. ${i}`).when(({ message: a })=>e.platformInfo.platform === \"linux\" && a.includes(\"symbol not found\"), ()=>`The Prisma engines are not compatible with your system ${e.platformInfo.originalDistro} on (${e.platformInfo.archFromUname}) which uses the \\`${e.platformInfo.binaryTarget}\\` binaryTarget by default. ${i}`).otherwise(()=>`The Prisma engines do not seem to be compatible with your system. ${i}`);\n    return `${o}\n${s}\n\nDetails: ${r.message}`;\n}\nvar Es = C(bs(), 1);\nfunction Ii(e) {\n    let r = (0, Es.default)(e);\n    if (r === 0) return e;\n    let t = new RegExp(`^[ \\\\t]{${r}}`, \"gm\");\n    return e.replace(t, \"\");\n}\nvar ws = \"prisma+postgres\", sn = `${ws}:`;\nfunction an(e) {\n    return e?.toString().startsWith(`${sn}//`) ?? !1;\n}\nfunction ki(e) {\n    if (!an(e)) return !1;\n    let { host: r } = new URL(e);\n    return r.includes(\"localhost\") || r.includes(\"127.0.0.1\") || r.includes(\"[::1]\");\n}\nvar vs = C(Di());\nfunction _i(e) {\n    return String(new Oi(e));\n}\nvar Oi = class {\n    constructor(r){\n        this.config = r;\n    }\n    toString() {\n        let { config: r } = this, t = r.provider.fromEnvVar ? `env(\"${r.provider.fromEnvVar}\")` : r.provider.value, n = JSON.parse(JSON.stringify({\n            provider: t,\n            binaryTargets: Zc(r.binaryTargets)\n        }));\n        return `generator ${r.name} {\n${(0, vs.default)(Xc(n), 2)}\n}`;\n    }\n};\nfunction Zc(e) {\n    let r;\n    if (e.length > 0) {\n        let t = e.find((n)=>n.fromEnvVar !== null);\n        t ? r = `env(\"${t.fromEnvVar}\")` : r = e.map((n)=>n.native ? \"native\" : n.value);\n    } else r = void 0;\n    return r;\n}\nfunction Xc(e) {\n    let r = Object.keys(e).reduce((t, n)=>Math.max(t, n.length), 0);\n    return Object.entries(e).map(([t, n])=>`${t.padEnd(r)} = ${ep(n)}`).join(`\n`);\n}\nfunction ep(e) {\n    return JSON.parse(JSON.stringify(e, (r, t)=>Array.isArray(t) ? `[${t.map((n)=>JSON.stringify(n)).join(\", \")}]` : JSON.stringify(t)));\n}\nvar nt = {};\ntr(nt, {\n    error: ()=>np,\n    info: ()=>tp,\n    log: ()=>rp,\n    query: ()=>ip,\n    should: ()=>Ps,\n    tags: ()=>tt,\n    warn: ()=>Ni\n});\nvar tt = {\n    error: ce(\"prisma:error\"),\n    warn: ke(\"prisma:warn\"),\n    info: De(\"prisma:info\"),\n    query: nr(\"prisma:query\")\n}, Ps = {\n    warn: ()=>!process.env.PRISMA_DISABLE_WARNINGS\n};\nfunction rp(...e) {\n    console.log(...e);\n}\nfunction Ni(e, ...r) {\n    Ps.warn() && console.warn(`${tt.warn} ${e}`, ...r);\n}\nfunction tp(e, ...r) {\n    console.info(`${tt.info} ${e}`, ...r);\n}\nfunction np(e, ...r) {\n    console.error(`${tt.error} ${e}`, ...r);\n}\nfunction ip(e, ...r) {\n    console.log(`${tt.query} ${e}`, ...r);\n}\nfunction ln(e, r) {\n    if (!e) throw new Error(`${r}. This should never happen. If you see this error, please, open an issue at https://pris.ly/prisma-prisma-bug-report`);\n}\nfunction Ne(e, r) {\n    throw new Error(r);\n}\nvar it = C(__webpack_require__(/*! node:path */ \"node:path\"));\nfunction Fi(e) {\n    return it.default.sep === it.default.posix.sep ? e : e.split(it.default.sep).join(it.default.posix.sep);\n}\nvar ji = C(Os()), un = C(__webpack_require__(/*! node:fs */ \"node:fs\"));\nvar wr = C(__webpack_require__(/*! node:path */ \"node:path\"));\nfunction _s(e) {\n    let r = e.ignoreProcessEnv ? {} : process.env, t = (n)=>n.match(/(.?\\${(?:[a-zA-Z0-9_]+)?})/g)?.reduce(function(o, s) {\n            let a = /(.?)\\${([a-zA-Z0-9_]+)?}/g.exec(s);\n            if (!a) return o;\n            let l = a[1], u, c;\n            if (l === \"\\\\\") c = a[0], u = c.replace(\"\\\\$\", \"$\");\n            else {\n                let p = a[2];\n                c = a[0].substring(l.length), u = Object.hasOwnProperty.call(r, p) ? r[p] : e.parsed[p] || \"\", u = t(u);\n            }\n            return o.replace(c, u);\n        }, n) ?? n;\n    for(let n in e.parsed){\n        let i = Object.hasOwnProperty.call(r, n) ? r[n] : e.parsed[n];\n        e.parsed[n] = t(i);\n    }\n    for(let n in e.parsed)r[n] = e.parsed[n];\n    return e;\n}\nvar qi = gr(\"prisma:tryLoadEnv\");\nfunction st({ rootEnvPath: e, schemaEnvPath: r }, t = {\n    conflictCheck: \"none\"\n}) {\n    let n = Ns(e);\n    t.conflictCheck !== \"none\" && wp(n, r, t.conflictCheck);\n    let i = null;\n    return Ls(n?.path, r) || (i = Ns(r)), !n && !i && qi(\"No Environment variables loaded\"), i?.dotenvResult.error ? console.error(ce(W(\"Schema Env Error: \")) + i.dotenvResult.error) : {\n        message: [\n            n?.message,\n            i?.message\n        ].filter(Boolean).join(`\n`),\n        parsed: {\n            ...n?.dotenvResult?.parsed,\n            ...i?.dotenvResult?.parsed\n        }\n    };\n}\nfunction wp(e, r, t) {\n    let n = e?.dotenvResult.parsed, i = !Ls(e?.path, r);\n    if (n && r && i && un.default.existsSync(r)) {\n        let o = ji.default.parse(un.default.readFileSync(r)), s = [];\n        for(let a in o)n[a] === o[a] && s.push(a);\n        if (s.length > 0) {\n            let a = wr.default.relative(process.cwd(), e.path), l = wr.default.relative(process.cwd(), r);\n            if (t === \"error\") {\n                let u = `There is a conflict between env var${s.length > 1 ? \"s\" : \"\"} in ${Y(a)} and ${Y(l)}\nConflicting env vars:\n${s.map((c)=>`  ${W(c)}`).join(`\n`)}\n\nWe suggest to move the contents of ${Y(l)} to ${Y(a)} to consolidate your env vars.\n`;\n                throw new Error(u);\n            } else if (t === \"warn\") {\n                let u = `Conflict for env var${s.length > 1 ? \"s\" : \"\"} ${s.map((c)=>W(c)).join(\", \")} in ${Y(a)} and ${Y(l)}\nEnv vars from ${Y(l)} overwrite the ones from ${Y(a)}\n      `;\n                console.warn(`${ke(\"warn(prisma)\")} ${u}`);\n            }\n        }\n    }\n}\nfunction Ns(e) {\n    if (xp(e)) {\n        qi(`Environment variables loaded from ${e}`);\n        let r = ji.default.config({\n            path: e,\n            debug: process.env.DOTENV_CONFIG_DEBUG ? !0 : void 0\n        });\n        return {\n            dotenvResult: _s(r),\n            message: Ie(`Environment variables loaded from ${wr.default.relative(process.cwd(), e)}`),\n            path: e\n        };\n    } else qi(`Environment variables not found at ${e}`);\n    return null;\n}\nfunction Ls(e, r) {\n    return e && r && wr.default.resolve(e) === wr.default.resolve(r);\n}\nfunction xp(e) {\n    return !!(e && un.default.existsSync(e));\n}\nfunction Vi(e, r) {\n    return Object.prototype.hasOwnProperty.call(e, r);\n}\nfunction xr(e, r) {\n    let t = {};\n    for (let n of Object.keys(e))t[n] = r(e[n], n);\n    return t;\n}\nfunction Bi(e, r) {\n    if (e.length === 0) return;\n    let t = e[0];\n    for(let n = 1; n < e.length; n++)r(t, e[n]) < 0 && (t = e[n]);\n    return t;\n}\nfunction x(e, r) {\n    Object.defineProperty(e, \"name\", {\n        value: r,\n        configurable: !0\n    });\n}\nvar Ms = new Set, at = (e, r, ...t)=>{\n    Ms.has(e) || (Ms.add(e), Ni(r, ...t));\n};\nvar T = class e extends Error {\n    constructor(r, t, n){\n        super(r), this.name = \"PrismaClientInitializationError\", this.clientVersion = t, this.errorCode = n, Error.captureStackTrace(e);\n    }\n    get [Symbol.toStringTag]() {\n        return \"PrismaClientInitializationError\";\n    }\n};\nx(T, \"PrismaClientInitializationError\");\nvar z = class extends Error {\n    constructor(r, { code: t, clientVersion: n, meta: i, batchRequestIdx: o }){\n        super(r), this.name = \"PrismaClientKnownRequestError\", this.code = t, this.clientVersion = n, this.meta = i, Object.defineProperty(this, \"batchRequestIdx\", {\n            value: o,\n            enumerable: !1,\n            writable: !0\n        });\n    }\n    get [Symbol.toStringTag]() {\n        return \"PrismaClientKnownRequestError\";\n    }\n};\nx(z, \"PrismaClientKnownRequestError\");\nvar le = class extends Error {\n    constructor(r, t){\n        super(r), this.name = \"PrismaClientRustPanicError\", this.clientVersion = t;\n    }\n    get [Symbol.toStringTag]() {\n        return \"PrismaClientRustPanicError\";\n    }\n};\nx(le, \"PrismaClientRustPanicError\");\nvar j = class extends Error {\n    constructor(r, { clientVersion: t, batchRequestIdx: n }){\n        super(r), this.name = \"PrismaClientUnknownRequestError\", this.clientVersion = t, Object.defineProperty(this, \"batchRequestIdx\", {\n            value: n,\n            writable: !0,\n            enumerable: !1\n        });\n    }\n    get [Symbol.toStringTag]() {\n        return \"PrismaClientUnknownRequestError\";\n    }\n};\nx(j, \"PrismaClientUnknownRequestError\");\nvar Z = class extends Error {\n    constructor(r, { clientVersion: t }){\n        var _temp;\n        _temp = super(r), this.name = \"PrismaClientValidationError\", _temp, this.clientVersion = t;\n    }\n    get [Symbol.toStringTag]() {\n        return \"PrismaClientValidationError\";\n    }\n};\nx(Z, \"PrismaClientValidationError\");\nvar vr = 9e15, Ke = 1e9, Ui = \"0123456789abcdef\", fn = \"2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058\", gn = \"3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789\", Gi = {\n    precision: 20,\n    rounding: 4,\n    modulo: 1,\n    toExpNeg: -7,\n    toExpPos: 21,\n    minE: -vr,\n    maxE: vr,\n    crypto: !1\n}, Vs, Fe, w = !0, yn = \"[DecimalError] \", He = yn + \"Invalid argument: \", Bs = yn + \"Precision limit exceeded\", Us = yn + \"crypto unavailable\", Gs = \"[object Decimal]\", X = Math.floor, U = Math.pow, vp = /^0b([01]+(\\.[01]*)?|\\.[01]+)(p[+-]?\\d+)?$/i, Pp = /^0x([0-9a-f]+(\\.[0-9a-f]*)?|\\.[0-9a-f]+)(p[+-]?\\d+)?$/i, Tp = /^0o([0-7]+(\\.[0-7]*)?|\\.[0-7]+)(p[+-]?\\d+)?$/i, Qs = /^(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i, fe = 1e7, E = 7, Sp = 9007199254740991, Rp = fn.length - 1, Qi = gn.length - 1, m = {\n    toStringTag: Gs\n};\nm.absoluteValue = m.abs = function() {\n    var e = new this.constructor(this);\n    return e.s < 0 && (e.s = 1), y(e);\n};\nm.ceil = function() {\n    return y(new this.constructor(this), this.e + 1, 2);\n};\nm.clampedTo = m.clamp = function(e, r) {\n    var t, n = this, i = n.constructor;\n    if (e = new i(e), r = new i(r), !e.s || !r.s) return new i(NaN);\n    if (e.gt(r)) throw Error(He + r);\n    return t = n.cmp(e), t < 0 ? e : n.cmp(r) > 0 ? r : new i(n);\n};\nm.comparedTo = m.cmp = function(e) {\n    var r, t, n, i, o = this, s = o.d, a = (e = new o.constructor(e)).d, l = o.s, u = e.s;\n    if (!s || !a) return !l || !u ? NaN : l !== u ? l : s === a ? 0 : !s ^ l < 0 ? 1 : -1;\n    if (!s[0] || !a[0]) return s[0] ? l : a[0] ? -u : 0;\n    if (l !== u) return l;\n    if (o.e !== e.e) return o.e > e.e ^ l < 0 ? 1 : -1;\n    for(n = s.length, i = a.length, r = 0, t = n < i ? n : i; r < t; ++r)if (s[r] !== a[r]) return s[r] > a[r] ^ l < 0 ? 1 : -1;\n    return n === i ? 0 : n > i ^ l < 0 ? 1 : -1;\n};\nm.cosine = m.cos = function() {\n    var e, r, t = this, n = t.constructor;\n    return t.d ? t.d[0] ? (e = n.precision, r = n.rounding, n.precision = e + Math.max(t.e, t.sd()) + E, n.rounding = 1, t = Ap(n, Ys(n, t)), n.precision = e, n.rounding = r, y(Fe == 2 || Fe == 3 ? t.neg() : t, e, r, !0)) : new n(1) : new n(NaN);\n};\nm.cubeRoot = m.cbrt = function() {\n    var e, r, t, n, i, o, s, a, l, u, c = this, p = c.constructor;\n    if (!c.isFinite() || c.isZero()) return new p(c);\n    for(w = !1, o = c.s * U(c.s * c, 1 / 3), !o || Math.abs(o) == 1 / 0 ? (t = J(c.d), e = c.e, (o = (e - t.length + 1) % 3) && (t += o == 1 || o == -2 ? \"0\" : \"00\"), o = U(t, 1 / 3), e = X((e + 1) / 3) - (e % 3 == (e < 0 ? -1 : 2)), o == 1 / 0 ? t = \"5e\" + e : (t = o.toExponential(), t = t.slice(0, t.indexOf(\"e\") + 1) + e), n = new p(t), n.s = c.s) : n = new p(o.toString()), s = (e = p.precision) + 3;;)if (a = n, l = a.times(a).times(a), u = l.plus(c), n = L(u.plus(c).times(a), u.plus(l), s + 2, 1), J(a.d).slice(0, s) === (t = J(n.d)).slice(0, s)) if (t = t.slice(s - 3, s + 1), t == \"9999\" || !i && t == \"4999\") {\n        if (!i && (y(a, e + 1, 0), a.times(a).times(a).eq(c))) {\n            n = a;\n            break;\n        }\n        s += 4, i = 1;\n    } else {\n        (!+t || !+t.slice(1) && t.charAt(0) == \"5\") && (y(n, e + 1, 1), r = !n.times(n).times(n).eq(c));\n        break;\n    }\n    return w = !0, y(n, e, p.rounding, r);\n};\nm.decimalPlaces = m.dp = function() {\n    var e, r = this.d, t = NaN;\n    if (r) {\n        if (e = r.length - 1, t = (e - X(this.e / E)) * E, e = r[e], e) for(; e % 10 == 0; e /= 10)t--;\n        t < 0 && (t = 0);\n    }\n    return t;\n};\nm.dividedBy = m.div = function(e) {\n    return L(this, new this.constructor(e));\n};\nm.dividedToIntegerBy = m.divToInt = function(e) {\n    var r = this, t = r.constructor;\n    return y(L(r, new t(e), 0, 1, 1), t.precision, t.rounding);\n};\nm.equals = m.eq = function(e) {\n    return this.cmp(e) === 0;\n};\nm.floor = function() {\n    return y(new this.constructor(this), this.e + 1, 3);\n};\nm.greaterThan = m.gt = function(e) {\n    return this.cmp(e) > 0;\n};\nm.greaterThanOrEqualTo = m.gte = function(e) {\n    var r = this.cmp(e);\n    return r == 1 || r === 0;\n};\nm.hyperbolicCosine = m.cosh = function() {\n    var e, r, t, n, i, o = this, s = o.constructor, a = new s(1);\n    if (!o.isFinite()) return new s(o.s ? 1 / 0 : NaN);\n    if (o.isZero()) return a;\n    t = s.precision, n = s.rounding, s.precision = t + Math.max(o.e, o.sd()) + 4, s.rounding = 1, i = o.d.length, i < 32 ? (e = Math.ceil(i / 3), r = (1 / En(4, e)).toString()) : (e = 16, r = \"2.3283064365386962890625e-10\"), o = Pr(s, 1, o.times(r), new s(1), !0);\n    for(var l, u = e, c = new s(8); u--;)l = o.times(o), o = a.minus(l.times(c.minus(l.times(c))));\n    return y(o, s.precision = t, s.rounding = n, !0);\n};\nm.hyperbolicSine = m.sinh = function() {\n    var e, r, t, n, i = this, o = i.constructor;\n    if (!i.isFinite() || i.isZero()) return new o(i);\n    if (r = o.precision, t = o.rounding, o.precision = r + Math.max(i.e, i.sd()) + 4, o.rounding = 1, n = i.d.length, n < 3) i = Pr(o, 2, i, i, !0);\n    else {\n        e = 1.4 * Math.sqrt(n), e = e > 16 ? 16 : e | 0, i = i.times(1 / En(5, e)), i = Pr(o, 2, i, i, !0);\n        for(var s, a = new o(5), l = new o(16), u = new o(20); e--;)s = i.times(i), i = i.times(a.plus(s.times(l.times(s).plus(u))));\n    }\n    return o.precision = r, o.rounding = t, y(i, r, t, !0);\n};\nm.hyperbolicTangent = m.tanh = function() {\n    var e, r, t = this, n = t.constructor;\n    return t.isFinite() ? t.isZero() ? new n(t) : (e = n.precision, r = n.rounding, n.precision = e + 7, n.rounding = 1, L(t.sinh(), t.cosh(), n.precision = e, n.rounding = r)) : new n(t.s);\n};\nm.inverseCosine = m.acos = function() {\n    var e = this, r = e.constructor, t = e.abs().cmp(1), n = r.precision, i = r.rounding;\n    return t !== -1 ? t === 0 ? e.isNeg() ? we(r, n, i) : new r(0) : new r(NaN) : e.isZero() ? we(r, n + 4, i).times(.5) : (r.precision = n + 6, r.rounding = 1, e = new r(1).minus(e).div(e.plus(1)).sqrt().atan(), r.precision = n, r.rounding = i, e.times(2));\n};\nm.inverseHyperbolicCosine = m.acosh = function() {\n    var e, r, t = this, n = t.constructor;\n    return t.lte(1) ? new n(t.eq(1) ? 0 : NaN) : t.isFinite() ? (e = n.precision, r = n.rounding, n.precision = e + Math.max(Math.abs(t.e), t.sd()) + 4, n.rounding = 1, w = !1, t = t.times(t).minus(1).sqrt().plus(t), w = !0, n.precision = e, n.rounding = r, t.ln()) : new n(t);\n};\nm.inverseHyperbolicSine = m.asinh = function() {\n    var e, r, t = this, n = t.constructor;\n    return !t.isFinite() || t.isZero() ? new n(t) : (e = n.precision, r = n.rounding, n.precision = e + 2 * Math.max(Math.abs(t.e), t.sd()) + 6, n.rounding = 1, w = !1, t = t.times(t).plus(1).sqrt().plus(t), w = !0, n.precision = e, n.rounding = r, t.ln());\n};\nm.inverseHyperbolicTangent = m.atanh = function() {\n    var e, r, t, n, i = this, o = i.constructor;\n    return i.isFinite() ? i.e >= 0 ? new o(i.abs().eq(1) ? i.s / 0 : i.isZero() ? i : NaN) : (e = o.precision, r = o.rounding, n = i.sd(), Math.max(n, e) < 2 * -i.e - 1 ? y(new o(i), e, r, !0) : (o.precision = t = n - i.e, i = L(i.plus(1), new o(1).minus(i), t + e, 1), o.precision = e + 4, o.rounding = 1, i = i.ln(), o.precision = e, o.rounding = r, i.times(.5))) : new o(NaN);\n};\nm.inverseSine = m.asin = function() {\n    var e, r, t, n, i = this, o = i.constructor;\n    return i.isZero() ? new o(i) : (r = i.abs().cmp(1), t = o.precision, n = o.rounding, r !== -1 ? r === 0 ? (e = we(o, t + 4, n).times(.5), e.s = i.s, e) : new o(NaN) : (o.precision = t + 6, o.rounding = 1, i = i.div(new o(1).minus(i.times(i)).sqrt().plus(1)).atan(), o.precision = t, o.rounding = n, i.times(2)));\n};\nm.inverseTangent = m.atan = function() {\n    var e, r, t, n, i, o, s, a, l, u = this, c = u.constructor, p = c.precision, d = c.rounding;\n    if (u.isFinite()) {\n        if (u.isZero()) return new c(u);\n        if (u.abs().eq(1) && p + 4 <= Qi) return s = we(c, p + 4, d).times(.25), s.s = u.s, s;\n    } else {\n        if (!u.s) return new c(NaN);\n        if (p + 4 <= Qi) return s = we(c, p + 4, d).times(.5), s.s = u.s, s;\n    }\n    for(c.precision = a = p + 10, c.rounding = 1, t = Math.min(28, a / E + 2 | 0), e = t; e; --e)u = u.div(u.times(u).plus(1).sqrt().plus(1));\n    for(w = !1, r = Math.ceil(a / E), n = 1, l = u.times(u), s = new c(u), i = u; e !== -1;)if (i = i.times(l), o = s.minus(i.div(n += 2)), i = i.times(l), s = o.plus(i.div(n += 2)), s.d[r] !== void 0) for(e = r; s.d[e] === o.d[e] && e--;);\n    return t && (s = s.times(2 << t - 1)), w = !0, y(s, c.precision = p, c.rounding = d, !0);\n};\nm.isFinite = function() {\n    return !!this.d;\n};\nm.isInteger = m.isInt = function() {\n    return !!this.d && X(this.e / E) > this.d.length - 2;\n};\nm.isNaN = function() {\n    return !this.s;\n};\nm.isNegative = m.isNeg = function() {\n    return this.s < 0;\n};\nm.isPositive = m.isPos = function() {\n    return this.s > 0;\n};\nm.isZero = function() {\n    return !!this.d && this.d[0] === 0;\n};\nm.lessThan = m.lt = function(e) {\n    return this.cmp(e) < 0;\n};\nm.lessThanOrEqualTo = m.lte = function(e) {\n    return this.cmp(e) < 1;\n};\nm.logarithm = m.log = function(e) {\n    var r, t, n, i, o, s, a, l, u = this, c = u.constructor, p = c.precision, d = c.rounding, f = 5;\n    if (e == null) e = new c(10), r = !0;\n    else {\n        if (e = new c(e), t = e.d, e.s < 0 || !t || !t[0] || e.eq(1)) return new c(NaN);\n        r = e.eq(10);\n    }\n    if (t = u.d, u.s < 0 || !t || !t[0] || u.eq(1)) return new c(t && !t[0] ? -1 / 0 : u.s != 1 ? NaN : t ? 0 : 1 / 0);\n    if (r) if (t.length > 1) o = !0;\n    else {\n        for(i = t[0]; i % 10 === 0;)i /= 10;\n        o = i !== 1;\n    }\n    if (w = !1, a = p + f, s = Je(u, a), n = r ? hn(c, a + 10) : Je(e, a), l = L(s, n, a, 1), lt(l.d, i = p, d)) do if (a += 10, s = Je(u, a), n = r ? hn(c, a + 10) : Je(e, a), l = L(s, n, a, 1), !o) {\n        +J(l.d).slice(i + 1, i + 15) + 1 == 1e14 && (l = y(l, p + 1, 0));\n        break;\n    }\n    while (lt(l.d, i += 10, d));\n    return w = !0, y(l, p, d);\n};\nm.minus = m.sub = function(e) {\n    var r, t, n, i, o, s, a, l, u, c, p, d, f = this, h = f.constructor;\n    if (e = new h(e), !f.d || !e.d) return !f.s || !e.s ? e = new h(NaN) : f.d ? e.s = -e.s : e = new h(e.d || f.s !== e.s ? f : NaN), e;\n    if (f.s != e.s) return e.s = -e.s, f.plus(e);\n    if (u = f.d, d = e.d, a = h.precision, l = h.rounding, !u[0] || !d[0]) {\n        if (d[0]) e.s = -e.s;\n        else if (u[0]) e = new h(f);\n        else return new h(l === 3 ? -0 : 0);\n        return w ? y(e, a, l) : e;\n    }\n    if (t = X(e.e / E), c = X(f.e / E), u = u.slice(), o = c - t, o) {\n        for(p = o < 0, p ? (r = u, o = -o, s = d.length) : (r = d, t = c, s = u.length), n = Math.max(Math.ceil(a / E), s) + 2, o > n && (o = n, r.length = 1), r.reverse(), n = o; n--;)r.push(0);\n        r.reverse();\n    } else {\n        for(n = u.length, s = d.length, p = n < s, p && (s = n), n = 0; n < s; n++)if (u[n] != d[n]) {\n            p = u[n] < d[n];\n            break;\n        }\n        o = 0;\n    }\n    for(p && (r = u, u = d, d = r, e.s = -e.s), s = u.length, n = d.length - s; n > 0; --n)u[s++] = 0;\n    for(n = d.length; n > o;){\n        if (u[--n] < d[n]) {\n            for(i = n; i && u[--i] === 0;)u[i] = fe - 1;\n            --u[i], u[n] += fe;\n        }\n        u[n] -= d[n];\n    }\n    for(; u[--s] === 0;)u.pop();\n    for(; u[0] === 0; u.shift())--t;\n    return u[0] ? (e.d = u, e.e = bn(u, t), w ? y(e, a, l) : e) : new h(l === 3 ? -0 : 0);\n};\nm.modulo = m.mod = function(e) {\n    var r, t = this, n = t.constructor;\n    return e = new n(e), !t.d || !e.s || e.d && !e.d[0] ? new n(NaN) : !e.d || t.d && !t.d[0] ? y(new n(t), n.precision, n.rounding) : (w = !1, n.modulo == 9 ? (r = L(t, e.abs(), 0, 3, 1), r.s *= e.s) : r = L(t, e, 0, n.modulo, 1), r = r.times(e), w = !0, t.minus(r));\n};\nm.naturalExponential = m.exp = function() {\n    return Wi(this);\n};\nm.naturalLogarithm = m.ln = function() {\n    return Je(this);\n};\nm.negated = m.neg = function() {\n    var e = new this.constructor(this);\n    return e.s = -e.s, y(e);\n};\nm.plus = m.add = function(e) {\n    var r, t, n, i, o, s, a, l, u, c, p = this, d = p.constructor;\n    if (e = new d(e), !p.d || !e.d) return !p.s || !e.s ? e = new d(NaN) : p.d || (e = new d(e.d || p.s === e.s ? p : NaN)), e;\n    if (p.s != e.s) return e.s = -e.s, p.minus(e);\n    if (u = p.d, c = e.d, a = d.precision, l = d.rounding, !u[0] || !c[0]) return c[0] || (e = new d(p)), w ? y(e, a, l) : e;\n    if (o = X(p.e / E), n = X(e.e / E), u = u.slice(), i = o - n, i) {\n        for(i < 0 ? (t = u, i = -i, s = c.length) : (t = c, n = o, s = u.length), o = Math.ceil(a / E), s = o > s ? o + 1 : s + 1, i > s && (i = s, t.length = 1), t.reverse(); i--;)t.push(0);\n        t.reverse();\n    }\n    for(s = u.length, i = c.length, s - i < 0 && (i = s, t = c, c = u, u = t), r = 0; i;)r = (u[--i] = u[i] + c[i] + r) / fe | 0, u[i] %= fe;\n    for(r && (u.unshift(r), ++n), s = u.length; u[--s] == 0;)u.pop();\n    return e.d = u, e.e = bn(u, n), w ? y(e, a, l) : e;\n};\nm.precision = m.sd = function(e) {\n    var r, t = this;\n    if (e !== void 0 && e !== !!e && e !== 1 && e !== 0) throw Error(He + e);\n    return t.d ? (r = Ws(t.d), e && t.e + 1 > r && (r = t.e + 1)) : r = NaN, r;\n};\nm.round = function() {\n    var e = this, r = e.constructor;\n    return y(new r(e), e.e + 1, r.rounding);\n};\nm.sine = m.sin = function() {\n    var e, r, t = this, n = t.constructor;\n    return t.isFinite() ? t.isZero() ? new n(t) : (e = n.precision, r = n.rounding, n.precision = e + Math.max(t.e, t.sd()) + E, n.rounding = 1, t = Ip(n, Ys(n, t)), n.precision = e, n.rounding = r, y(Fe > 2 ? t.neg() : t, e, r, !0)) : new n(NaN);\n};\nm.squareRoot = m.sqrt = function() {\n    var e, r, t, n, i, o, s = this, a = s.d, l = s.e, u = s.s, c = s.constructor;\n    if (u !== 1 || !a || !a[0]) return new c(!u || u < 0 && (!a || a[0]) ? NaN : a ? s : 1 / 0);\n    for(w = !1, u = Math.sqrt(+s), u == 0 || u == 1 / 0 ? (r = J(a), (r.length + l) % 2 == 0 && (r += \"0\"), u = Math.sqrt(r), l = X((l + 1) / 2) - (l < 0 || l % 2), u == 1 / 0 ? r = \"5e\" + l : (r = u.toExponential(), r = r.slice(0, r.indexOf(\"e\") + 1) + l), n = new c(r)) : n = new c(u.toString()), t = (l = c.precision) + 3;;)if (o = n, n = o.plus(L(s, o, t + 2, 1)).times(.5), J(o.d).slice(0, t) === (r = J(n.d)).slice(0, t)) if (r = r.slice(t - 3, t + 1), r == \"9999\" || !i && r == \"4999\") {\n        if (!i && (y(o, l + 1, 0), o.times(o).eq(s))) {\n            n = o;\n            break;\n        }\n        t += 4, i = 1;\n    } else {\n        (!+r || !+r.slice(1) && r.charAt(0) == \"5\") && (y(n, l + 1, 1), e = !n.times(n).eq(s));\n        break;\n    }\n    return w = !0, y(n, l, c.rounding, e);\n};\nm.tangent = m.tan = function() {\n    var e, r, t = this, n = t.constructor;\n    return t.isFinite() ? t.isZero() ? new n(t) : (e = n.precision, r = n.rounding, n.precision = e + 10, n.rounding = 1, t = t.sin(), t.s = 1, t = L(t, new n(1).minus(t.times(t)).sqrt(), e + 10, 0), n.precision = e, n.rounding = r, y(Fe == 2 || Fe == 4 ? t.neg() : t, e, r, !0)) : new n(NaN);\n};\nm.times = m.mul = function(e) {\n    var r, t, n, i, o, s, a, l, u, c = this, p = c.constructor, d = c.d, f = (e = new p(e)).d;\n    if (e.s *= c.s, !d || !d[0] || !f || !f[0]) return new p(!e.s || d && !d[0] && !f || f && !f[0] && !d ? NaN : !d || !f ? e.s / 0 : e.s * 0);\n    for(t = X(c.e / E) + X(e.e / E), l = d.length, u = f.length, l < u && (o = d, d = f, f = o, s = l, l = u, u = s), o = [], s = l + u, n = s; n--;)o.push(0);\n    for(n = u; --n >= 0;){\n        for(r = 0, i = l + n; i > n;)a = o[i] + f[n] * d[i - n - 1] + r, o[i--] = a % fe | 0, r = a / fe | 0;\n        o[i] = (o[i] + r) % fe | 0;\n    }\n    for(; !o[--s];)o.pop();\n    return r ? ++t : o.shift(), e.d = o, e.e = bn(o, t), w ? y(e, p.precision, p.rounding) : e;\n};\nm.toBinary = function(e, r) {\n    return Ji(this, 2, e, r);\n};\nm.toDecimalPlaces = m.toDP = function(e, r) {\n    var t = this, n = t.constructor;\n    return t = new n(t), e === void 0 ? t : (ie(e, 0, Ke), r === void 0 ? r = n.rounding : ie(r, 0, 8), y(t, e + t.e + 1, r));\n};\nm.toExponential = function(e, r) {\n    var t, n = this, i = n.constructor;\n    return e === void 0 ? t = xe(n, !0) : (ie(e, 0, Ke), r === void 0 ? r = i.rounding : ie(r, 0, 8), n = y(new i(n), e + 1, r), t = xe(n, !0, e + 1)), n.isNeg() && !n.isZero() ? \"-\" + t : t;\n};\nm.toFixed = function(e, r) {\n    var t, n, i = this, o = i.constructor;\n    return e === void 0 ? t = xe(i) : (ie(e, 0, Ke), r === void 0 ? r = o.rounding : ie(r, 0, 8), n = y(new o(i), e + i.e + 1, r), t = xe(n, !1, e + n.e + 1)), i.isNeg() && !i.isZero() ? \"-\" + t : t;\n};\nm.toFraction = function(e) {\n    var r, t, n, i, o, s, a, l, u, c, p, d, f = this, h = f.d, g = f.constructor;\n    if (!h) return new g(f);\n    if (u = t = new g(1), n = l = new g(0), r = new g(n), o = r.e = Ws(h) - f.e - 1, s = o % E, r.d[0] = U(10, s < 0 ? E + s : s), e == null) e = o > 0 ? r : u;\n    else {\n        if (a = new g(e), !a.isInt() || a.lt(u)) throw Error(He + a);\n        e = a.gt(r) ? o > 0 ? r : u : a;\n    }\n    for(w = !1, a = new g(J(h)), c = g.precision, g.precision = o = h.length * E * 2; p = L(a, r, 0, 1, 1), i = t.plus(p.times(n)), i.cmp(e) != 1;)t = n, n = i, i = u, u = l.plus(p.times(i)), l = i, i = r, r = a.minus(p.times(i)), a = i;\n    return i = L(e.minus(t), n, 0, 1, 1), l = l.plus(i.times(u)), t = t.plus(i.times(n)), l.s = u.s = f.s, d = L(u, n, o, 1).minus(f).abs().cmp(L(l, t, o, 1).minus(f).abs()) < 1 ? [\n        u,\n        n\n    ] : [\n        l,\n        t\n    ], g.precision = c, w = !0, d;\n};\nm.toHexadecimal = m.toHex = function(e, r) {\n    return Ji(this, 16, e, r);\n};\nm.toNearest = function(e, r) {\n    var t = this, n = t.constructor;\n    if (t = new n(t), e == null) {\n        if (!t.d) return t;\n        e = new n(1), r = n.rounding;\n    } else {\n        if (e = new n(e), r === void 0 ? r = n.rounding : ie(r, 0, 8), !t.d) return e.s ? t : e;\n        if (!e.d) return e.s && (e.s = t.s), e;\n    }\n    return e.d[0] ? (w = !1, t = L(t, e, 0, r, 1).times(e), w = !0, y(t)) : (e.s = t.s, t = e), t;\n};\nm.toNumber = function() {\n    return +this;\n};\nm.toOctal = function(e, r) {\n    return Ji(this, 8, e, r);\n};\nm.toPower = m.pow = function(e) {\n    var r, t, n, i, o, s, a = this, l = a.constructor, u = +(e = new l(e));\n    if (!a.d || !e.d || !a.d[0] || !e.d[0]) return new l(U(+a, u));\n    if (a = new l(a), a.eq(1)) return a;\n    if (n = l.precision, o = l.rounding, e.eq(1)) return y(a, n, o);\n    if (r = X(e.e / E), r >= e.d.length - 1 && (t = u < 0 ? -u : u) <= Sp) return i = Js(l, a, t, n), e.s < 0 ? new l(1).div(i) : y(i, n, o);\n    if (s = a.s, s < 0) {\n        if (r < e.d.length - 1) return new l(NaN);\n        if ((e.d[r] & 1) == 0 && (s = 1), a.e == 0 && a.d[0] == 1 && a.d.length == 1) return a.s = s, a;\n    }\n    return t = U(+a, u), r = t == 0 || !isFinite(t) ? X(u * (Math.log(\"0.\" + J(a.d)) / Math.LN10 + a.e + 1)) : new l(t + \"\").e, r > l.maxE + 1 || r < l.minE - 1 ? new l(r > 0 ? s / 0 : 0) : (w = !1, l.rounding = a.s = 1, t = Math.min(12, (r + \"\").length), i = Wi(e.times(Je(a, n + t)), n), i.d && (i = y(i, n + 5, 1), lt(i.d, n, o) && (r = n + 10, i = y(Wi(e.times(Je(a, r + t)), r), r + 5, 1), +J(i.d).slice(n + 1, n + 15) + 1 == 1e14 && (i = y(i, n + 1, 0)))), i.s = s, w = !0, l.rounding = o, y(i, n, o));\n};\nm.toPrecision = function(e, r) {\n    var t, n = this, i = n.constructor;\n    return e === void 0 ? t = xe(n, n.e <= i.toExpNeg || n.e >= i.toExpPos) : (ie(e, 1, Ke), r === void 0 ? r = i.rounding : ie(r, 0, 8), n = y(new i(n), e, r), t = xe(n, e <= n.e || n.e <= i.toExpNeg, e)), n.isNeg() && !n.isZero() ? \"-\" + t : t;\n};\nm.toSignificantDigits = m.toSD = function(e, r) {\n    var t = this, n = t.constructor;\n    return e === void 0 ? (e = n.precision, r = n.rounding) : (ie(e, 1, Ke), r === void 0 ? r = n.rounding : ie(r, 0, 8)), y(new n(t), e, r);\n};\nm.toString = function() {\n    var e = this, r = e.constructor, t = xe(e, e.e <= r.toExpNeg || e.e >= r.toExpPos);\n    return e.isNeg() && !e.isZero() ? \"-\" + t : t;\n};\nm.truncated = m.trunc = function() {\n    return y(new this.constructor(this), this.e + 1, 1);\n};\nm.valueOf = m.toJSON = function() {\n    var e = this, r = e.constructor, t = xe(e, e.e <= r.toExpNeg || e.e >= r.toExpPos);\n    return e.isNeg() ? \"-\" + t : t;\n};\nfunction J(e) {\n    var r, t, n, i = e.length - 1, o = \"\", s = e[0];\n    if (i > 0) {\n        for(o += s, r = 1; r < i; r++)n = e[r] + \"\", t = E - n.length, t && (o += We(t)), o += n;\n        s = e[r], n = s + \"\", t = E - n.length, t && (o += We(t));\n    } else if (s === 0) return \"0\";\n    for(; s % 10 === 0;)s /= 10;\n    return o + s;\n}\nfunction ie(e, r, t) {\n    if (e !== ~~e || e < r || e > t) throw Error(He + e);\n}\nfunction lt(e, r, t, n) {\n    var i, o, s, a;\n    for(o = e[0]; o >= 10; o /= 10)--r;\n    return --r < 0 ? (r += E, i = 0) : (i = Math.ceil((r + 1) / E), r %= E), o = U(10, E - r), a = e[i] % o | 0, n == null ? r < 3 ? (r == 0 ? a = a / 100 | 0 : r == 1 && (a = a / 10 | 0), s = t < 4 && a == 99999 || t > 3 && a == 49999 || a == 5e4 || a == 0) : s = (t < 4 && a + 1 == o || t > 3 && a + 1 == o / 2) && (e[i + 1] / o / 100 | 0) == U(10, r - 2) - 1 || (a == o / 2 || a == 0) && (e[i + 1] / o / 100 | 0) == 0 : r < 4 ? (r == 0 ? a = a / 1e3 | 0 : r == 1 ? a = a / 100 | 0 : r == 2 && (a = a / 10 | 0), s = (n || t < 4) && a == 9999 || !n && t > 3 && a == 4999) : s = ((n || t < 4) && a + 1 == o || !n && t > 3 && a + 1 == o / 2) && (e[i + 1] / o / 1e3 | 0) == U(10, r - 3) - 1, s;\n}\nfunction dn(e, r, t) {\n    for(var n, i = [\n        0\n    ], o, s = 0, a = e.length; s < a;){\n        for(o = i.length; o--;)i[o] *= r;\n        for(i[0] += Ui.indexOf(e.charAt(s++)), n = 0; n < i.length; n++)i[n] > t - 1 && (i[n + 1] === void 0 && (i[n + 1] = 0), i[n + 1] += i[n] / t | 0, i[n] %= t);\n    }\n    return i.reverse();\n}\nfunction Ap(e, r) {\n    var t, n, i;\n    if (r.isZero()) return r;\n    n = r.d.length, n < 32 ? (t = Math.ceil(n / 3), i = (1 / En(4, t)).toString()) : (t = 16, i = \"2.3283064365386962890625e-10\"), e.precision += t, r = Pr(e, 1, r.times(i), new e(1));\n    for(var o = t; o--;){\n        var s = r.times(r);\n        r = s.times(s).minus(s).times(8).plus(1);\n    }\n    return e.precision -= t, r;\n}\nvar L = function() {\n    function e(n, i, o) {\n        var s, a = 0, l = n.length;\n        for(n = n.slice(); l--;)s = n[l] * i + a, n[l] = s % o | 0, a = s / o | 0;\n        return a && n.unshift(a), n;\n    }\n    function r(n, i, o, s) {\n        var a, l;\n        if (o != s) l = o > s ? 1 : -1;\n        else for(a = l = 0; a < o; a++)if (n[a] != i[a]) {\n            l = n[a] > i[a] ? 1 : -1;\n            break;\n        }\n        return l;\n    }\n    function t(n, i, o, s) {\n        for(var a = 0; o--;)n[o] -= a, a = n[o] < i[o] ? 1 : 0, n[o] = a * s + n[o] - i[o];\n        for(; !n[0] && n.length > 1;)n.shift();\n    }\n    return function(n, i, o, s, a, l) {\n        var u, c, p, d, f, h, g, S, P, R, b, D, me, ae, Hr, V, te, Ce, H, fr, jt = n.constructor, ni = n.s == i.s ? 1 : -1, K = n.d, _ = i.d;\n        if (!K || !K[0] || !_ || !_[0]) return new jt(!n.s || !i.s || (K ? _ && K[0] == _[0] : !_) ? NaN : K && K[0] == 0 || !_ ? ni * 0 : ni / 0);\n        for(l ? (f = 1, c = n.e - i.e) : (l = fe, f = E, c = X(n.e / f) - X(i.e / f)), H = _.length, te = K.length, P = new jt(ni), R = P.d = [], p = 0; _[p] == (K[p] || 0); p++);\n        if (_[p] > (K[p] || 0) && c--, o == null ? (ae = o = jt.precision, s = jt.rounding) : a ? ae = o + (n.e - i.e) + 1 : ae = o, ae < 0) R.push(1), h = !0;\n        else {\n            if (ae = ae / f + 2 | 0, p = 0, H == 1) {\n                for(d = 0, _ = _[0], ae++; (p < te || d) && ae--; p++)Hr = d * l + (K[p] || 0), R[p] = Hr / _ | 0, d = Hr % _ | 0;\n                h = d || p < te;\n            } else {\n                for(d = l / (_[0] + 1) | 0, d > 1 && (_ = e(_, d, l), K = e(K, d, l), H = _.length, te = K.length), V = H, b = K.slice(0, H), D = b.length; D < H;)b[D++] = 0;\n                fr = _.slice(), fr.unshift(0), Ce = _[0], _[1] >= l / 2 && ++Ce;\n                do d = 0, u = r(_, b, H, D), u < 0 ? (me = b[0], H != D && (me = me * l + (b[1] || 0)), d = me / Ce | 0, d > 1 ? (d >= l && (d = l - 1), g = e(_, d, l), S = g.length, D = b.length, u = r(g, b, S, D), u == 1 && (d--, t(g, H < S ? fr : _, S, l))) : (d == 0 && (u = d = 1), g = _.slice()), S = g.length, S < D && g.unshift(0), t(b, g, D, l), u == -1 && (D = b.length, u = r(_, b, H, D), u < 1 && (d++, t(b, H < D ? fr : _, D, l))), D = b.length) : u === 0 && (d++, b = [\n                    0\n                ]), R[p++] = d, u && b[0] ? b[D++] = K[V] || 0 : (b = [\n                    K[V]\n                ], D = 1);\n                while ((V++ < te || b[0] !== void 0) && ae--);\n                h = b[0] !== void 0;\n            }\n            R[0] || R.shift();\n        }\n        if (f == 1) P.e = c, Vs = h;\n        else {\n            for(p = 1, d = R[0]; d >= 10; d /= 10)p++;\n            P.e = p + c * f - 1, y(P, a ? o + P.e + 1 : o, s, h);\n        }\n        return P;\n    };\n}();\nfunction y(e, r, t, n) {\n    var i, o, s, a, l, u, c, p, d, f = e.constructor;\n    e: if (r != null) {\n        if (p = e.d, !p) return e;\n        for(i = 1, a = p[0]; a >= 10; a /= 10)i++;\n        if (o = r - i, o < 0) o += E, s = r, c = p[d = 0], l = c / U(10, i - s - 1) % 10 | 0;\n        else if (d = Math.ceil((o + 1) / E), a = p.length, d >= a) if (n) {\n            for(; a++ <= d;)p.push(0);\n            c = l = 0, i = 1, o %= E, s = o - E + 1;\n        } else break e;\n        else {\n            for(c = a = p[d], i = 1; a >= 10; a /= 10)i++;\n            o %= E, s = o - E + i, l = s < 0 ? 0 : c / U(10, i - s - 1) % 10 | 0;\n        }\n        if (n = n || r < 0 || p[d + 1] !== void 0 || (s < 0 ? c : c % U(10, i - s - 1)), u = t < 4 ? (l || n) && (t == 0 || t == (e.s < 0 ? 3 : 2)) : l > 5 || l == 5 && (t == 4 || n || t == 6 && (o > 0 ? s > 0 ? c / U(10, i - s) : 0 : p[d - 1]) % 10 & 1 || t == (e.s < 0 ? 8 : 7)), r < 1 || !p[0]) return p.length = 0, u ? (r -= e.e + 1, p[0] = U(10, (E - r % E) % E), e.e = -r || 0) : p[0] = e.e = 0, e;\n        if (o == 0 ? (p.length = d, a = 1, d--) : (p.length = d + 1, a = U(10, E - o), p[d] = s > 0 ? (c / U(10, i - s) % U(10, s) | 0) * a : 0), u) for(;;)if (d == 0) {\n            for(o = 1, s = p[0]; s >= 10; s /= 10)o++;\n            for(s = p[0] += a, a = 1; s >= 10; s /= 10)a++;\n            o != a && (e.e++, p[0] == fe && (p[0] = 1));\n            break;\n        } else {\n            if (p[d] += a, p[d] != fe) break;\n            p[d--] = 0, a = 1;\n        }\n        for(o = p.length; p[--o] === 0;)p.pop();\n    }\n    return w && (e.e > f.maxE ? (e.d = null, e.e = NaN) : e.e < f.minE && (e.e = 0, e.d = [\n        0\n    ])), e;\n}\nfunction xe(e, r, t) {\n    if (!e.isFinite()) return Ks(e);\n    var n, i = e.e, o = J(e.d), s = o.length;\n    return r ? (t && (n = t - s) > 0 ? o = o.charAt(0) + \".\" + o.slice(1) + We(n) : s > 1 && (o = o.charAt(0) + \".\" + o.slice(1)), o = o + (e.e < 0 ? \"e\" : \"e+\") + e.e) : i < 0 ? (o = \"0.\" + We(-i - 1) + o, t && (n = t - s) > 0 && (o += We(n))) : i >= s ? (o += We(i + 1 - s), t && (n = t - i - 1) > 0 && (o = o + \".\" + We(n))) : ((n = i + 1) < s && (o = o.slice(0, n) + \".\" + o.slice(n)), t && (n = t - s) > 0 && (i + 1 === s && (o += \".\"), o += We(n))), o;\n}\nfunction bn(e, r) {\n    var t = e[0];\n    for(r *= E; t >= 10; t /= 10)r++;\n    return r;\n}\nfunction hn(e, r, t) {\n    if (r > Rp) throw w = !0, t && (e.precision = t), Error(Bs);\n    return y(new e(fn), r, 1, !0);\n}\nfunction we(e, r, t) {\n    if (r > Qi) throw Error(Bs);\n    return y(new e(gn), r, t, !0);\n}\nfunction Ws(e) {\n    var r = e.length - 1, t = r * E + 1;\n    if (r = e[r], r) {\n        for(; r % 10 == 0; r /= 10)t--;\n        for(r = e[0]; r >= 10; r /= 10)t++;\n    }\n    return t;\n}\nfunction We(e) {\n    for(var r = \"\"; e--;)r += \"0\";\n    return r;\n}\nfunction Js(e, r, t, n) {\n    var i, o = new e(1), s = Math.ceil(n / E + 4);\n    for(w = !1;;){\n        if (t % 2 && (o = o.times(r), qs(o.d, s) && (i = !0)), t = X(t / 2), t === 0) {\n            t = o.d.length - 1, i && o.d[t] === 0 && ++o.d[t];\n            break;\n        }\n        r = r.times(r), qs(r.d, s);\n    }\n    return w = !0, o;\n}\nfunction $s(e) {\n    return e.d[e.d.length - 1] & 1;\n}\nfunction Hs(e, r, t) {\n    for(var n, i, o = new e(r[0]), s = 0; ++s < r.length;){\n        if (i = new e(r[s]), !i.s) {\n            o = i;\n            break;\n        }\n        n = o.cmp(i), (n === t || n === 0 && o.s === t) && (o = i);\n    }\n    return o;\n}\nfunction Wi(e, r) {\n    var t, n, i, o, s, a, l, u = 0, c = 0, p = 0, d = e.constructor, f = d.rounding, h = d.precision;\n    if (!e.d || !e.d[0] || e.e > 17) return new d(e.d ? e.d[0] ? e.s < 0 ? 0 : 1 / 0 : 1 : e.s ? e.s < 0 ? 0 : e : NaN);\n    for(r == null ? (w = !1, l = h) : l = r, a = new d(.03125); e.e > -2;)e = e.times(a), p += 5;\n    for(n = Math.log(U(2, p)) / Math.LN10 * 2 + 5 | 0, l += n, t = o = s = new d(1), d.precision = l;;){\n        if (o = y(o.times(e), l, 1), t = t.times(++c), a = s.plus(L(o, t, l, 1)), J(a.d).slice(0, l) === J(s.d).slice(0, l)) {\n            for(i = p; i--;)s = y(s.times(s), l, 1);\n            if (r == null) if (u < 3 && lt(s.d, l - n, f, u)) d.precision = l += 10, t = o = a = new d(1), c = 0, u++;\n            else return y(s, d.precision = h, f, w = !0);\n            else return d.precision = h, s;\n        }\n        s = a;\n    }\n}\nfunction Je(e, r) {\n    var t, n, i, o, s, a, l, u, c, p, d, f = 1, h = 10, g = e, S = g.d, P = g.constructor, R = P.rounding, b = P.precision;\n    if (g.s < 0 || !S || !S[0] || !g.e && S[0] == 1 && S.length == 1) return new P(S && !S[0] ? -1 / 0 : g.s != 1 ? NaN : S ? 0 : g);\n    if (r == null ? (w = !1, c = b) : c = r, P.precision = c += h, t = J(S), n = t.charAt(0), Math.abs(o = g.e) < 15e14) {\n        for(; n < 7 && n != 1 || n == 1 && t.charAt(1) > 3;)g = g.times(e), t = J(g.d), n = t.charAt(0), f++;\n        o = g.e, n > 1 ? (g = new P(\"0.\" + t), o++) : g = new P(n + \".\" + t.slice(1));\n    } else return u = hn(P, c + 2, b).times(o + \"\"), g = Je(new P(n + \".\" + t.slice(1)), c - h).plus(u), P.precision = b, r == null ? y(g, b, R, w = !0) : g;\n    for(p = g, l = s = g = L(g.minus(1), g.plus(1), c, 1), d = y(g.times(g), c, 1), i = 3;;){\n        if (s = y(s.times(d), c, 1), u = l.plus(L(s, new P(i), c, 1)), J(u.d).slice(0, c) === J(l.d).slice(0, c)) if (l = l.times(2), o !== 0 && (l = l.plus(hn(P, c + 2, b).times(o + \"\"))), l = L(l, new P(f), c, 1), r == null) if (lt(l.d, c - h, R, a)) P.precision = c += h, u = s = g = L(p.minus(1), p.plus(1), c, 1), d = y(g.times(g), c, 1), i = a = 1;\n        else return y(l, P.precision = b, R, w = !0);\n        else return P.precision = b, l;\n        l = u, i += 2;\n    }\n}\nfunction Ks(e) {\n    return String(e.s * e.s / 0);\n}\nfunction mn(e, r) {\n    var t, n, i;\n    for((t = r.indexOf(\".\")) > -1 && (r = r.replace(\".\", \"\")), (n = r.search(/e/i)) > 0 ? (t < 0 && (t = n), t += +r.slice(n + 1), r = r.substring(0, n)) : t < 0 && (t = r.length), n = 0; r.charCodeAt(n) === 48; n++);\n    for(i = r.length; r.charCodeAt(i - 1) === 48; --i);\n    if (r = r.slice(n, i), r) {\n        if (i -= n, e.e = t = t - n - 1, e.d = [], n = (t + 1) % E, t < 0 && (n += E), n < i) {\n            for(n && e.d.push(+r.slice(0, n)), i -= E; n < i;)e.d.push(+r.slice(n, n += E));\n            r = r.slice(n), n = E - r.length;\n        } else n -= i;\n        for(; n--;)r += \"0\";\n        e.d.push(+r), w && (e.e > e.constructor.maxE ? (e.d = null, e.e = NaN) : e.e < e.constructor.minE && (e.e = 0, e.d = [\n            0\n        ]));\n    } else e.e = 0, e.d = [\n        0\n    ];\n    return e;\n}\nfunction Cp(e, r) {\n    var t, n, i, o, s, a, l, u, c;\n    if (r.indexOf(\"_\") > -1) {\n        if (r = r.replace(/(\\d)_(?=\\d)/g, \"$1\"), Qs.test(r)) return mn(e, r);\n    } else if (r === \"Infinity\" || r === \"NaN\") return +r || (e.s = NaN), e.e = NaN, e.d = null, e;\n    if (Pp.test(r)) t = 16, r = r.toLowerCase();\n    else if (vp.test(r)) t = 2;\n    else if (Tp.test(r)) t = 8;\n    else throw Error(He + r);\n    for(o = r.search(/p/i), o > 0 ? (l = +r.slice(o + 1), r = r.substring(2, o)) : r = r.slice(2), o = r.indexOf(\".\"), s = o >= 0, n = e.constructor, s && (r = r.replace(\".\", \"\"), a = r.length, o = a - o, i = Js(n, new n(t), o, o * 2)), u = dn(r, t, fe), c = u.length - 1, o = c; u[o] === 0; --o)u.pop();\n    return o < 0 ? new n(e.s * 0) : (e.e = bn(u, c), e.d = u, w = !1, s && (e = L(e, i, a * 4)), l && (e = e.times(Math.abs(l) < 54 ? U(2, l) : ar.pow(2, l))), w = !0, e);\n}\nfunction Ip(e, r) {\n    var t, n = r.d.length;\n    if (n < 3) return r.isZero() ? r : Pr(e, 2, r, r);\n    t = 1.4 * Math.sqrt(n), t = t > 16 ? 16 : t | 0, r = r.times(1 / En(5, t)), r = Pr(e, 2, r, r);\n    for(var i, o = new e(5), s = new e(16), a = new e(20); t--;)i = r.times(r), r = r.times(o.plus(i.times(s.times(i).minus(a))));\n    return r;\n}\nfunction Pr(e, r, t, n, i) {\n    var o, s, a, l, u = 1, c = e.precision, p = Math.ceil(c / E);\n    for(w = !1, l = t.times(t), a = new e(n);;){\n        if (s = L(a.times(l), new e(r++ * r++), c, 1), a = i ? n.plus(s) : n.minus(s), n = L(s.times(l), new e(r++ * r++), c, 1), s = a.plus(n), s.d[p] !== void 0) {\n            for(o = p; s.d[o] === a.d[o] && o--;);\n            if (o == -1) break;\n        }\n        o = a, a = n, n = s, s = o, u++;\n    }\n    return w = !0, s.d.length = p + 1, s;\n}\nfunction En(e, r) {\n    for(var t = e; --r;)t *= e;\n    return t;\n}\nfunction Ys(e, r) {\n    var t, n = r.s < 0, i = we(e, e.precision, 1), o = i.times(.5);\n    if (r = r.abs(), r.lte(o)) return Fe = n ? 4 : 1, r;\n    if (t = r.divToInt(i), t.isZero()) Fe = n ? 3 : 2;\n    else {\n        if (r = r.minus(t.times(i)), r.lte(o)) return Fe = $s(t) ? n ? 2 : 3 : n ? 4 : 1, r;\n        Fe = $s(t) ? n ? 1 : 4 : n ? 3 : 2;\n    }\n    return r.minus(i).abs();\n}\nfunction Ji(e, r, t, n) {\n    var i, o, s, a, l, u, c, p, d, f = e.constructor, h = t !== void 0;\n    if (h ? (ie(t, 1, Ke), n === void 0 ? n = f.rounding : ie(n, 0, 8)) : (t = f.precision, n = f.rounding), !e.isFinite()) c = Ks(e);\n    else {\n        for(c = xe(e), s = c.indexOf(\".\"), h ? (i = 2, r == 16 ? t = t * 4 - 3 : r == 8 && (t = t * 3 - 2)) : i = r, s >= 0 && (c = c.replace(\".\", \"\"), d = new f(1), d.e = c.length - s, d.d = dn(xe(d), 10, i), d.e = d.d.length), p = dn(c, 10, i), o = l = p.length; p[--l] == 0;)p.pop();\n        if (!p[0]) c = h ? \"0p+0\" : \"0\";\n        else {\n            if (s < 0 ? o-- : (e = new f(e), e.d = p, e.e = o, e = L(e, d, t, n, 0, i), p = e.d, o = e.e, u = Vs), s = p[t], a = i / 2, u = u || p[t + 1] !== void 0, u = n < 4 ? (s !== void 0 || u) && (n === 0 || n === (e.s < 0 ? 3 : 2)) : s > a || s === a && (n === 4 || u || n === 6 && p[t - 1] & 1 || n === (e.s < 0 ? 8 : 7)), p.length = t, u) for(; ++p[--t] > i - 1;)p[t] = 0, t || (++o, p.unshift(1));\n            for(l = p.length; !p[l - 1]; --l);\n            for(s = 0, c = \"\"; s < l; s++)c += Ui.charAt(p[s]);\n            if (h) {\n                if (l > 1) if (r == 16 || r == 8) {\n                    for(s = r == 16 ? 4 : 3, --l; l % s; l++)c += \"0\";\n                    for(p = dn(c, i, r), l = p.length; !p[l - 1]; --l);\n                    for(s = 1, c = \"1.\"; s < l; s++)c += Ui.charAt(p[s]);\n                } else c = c.charAt(0) + \".\" + c.slice(1);\n                c = c + (o < 0 ? \"p\" : \"p+\") + o;\n            } else if (o < 0) {\n                for(; ++o;)c = \"0\" + c;\n                c = \"0.\" + c;\n            } else if (++o > l) for(o -= l; o--;)c += \"0\";\n            else o < l && (c = c.slice(0, o) + \".\" + c.slice(o));\n        }\n        c = (r == 16 ? \"0x\" : r == 2 ? \"0b\" : r == 8 ? \"0o\" : \"\") + c;\n    }\n    return e.s < 0 ? \"-\" + c : c;\n}\nfunction qs(e, r) {\n    if (e.length > r) return e.length = r, !0;\n}\nfunction kp(e) {\n    return new this(e).abs();\n}\nfunction Dp(e) {\n    return new this(e).acos();\n}\nfunction Op(e) {\n    return new this(e).acosh();\n}\nfunction _p(e, r) {\n    return new this(e).plus(r);\n}\nfunction Np(e) {\n    return new this(e).asin();\n}\nfunction Lp(e) {\n    return new this(e).asinh();\n}\nfunction Fp(e) {\n    return new this(e).atan();\n}\nfunction Mp(e) {\n    return new this(e).atanh();\n}\nfunction $p(e, r) {\n    e = new this(e), r = new this(r);\n    var t, n = this.precision, i = this.rounding, o = n + 4;\n    return !e.s || !r.s ? t = new this(NaN) : !e.d && !r.d ? (t = we(this, o, 1).times(r.s > 0 ? .25 : .75), t.s = e.s) : !r.d || e.isZero() ? (t = r.s < 0 ? we(this, n, i) : new this(0), t.s = e.s) : !e.d || r.isZero() ? (t = we(this, o, 1).times(.5), t.s = e.s) : r.s < 0 ? (this.precision = o, this.rounding = 1, t = this.atan(L(e, r, o, 1)), r = we(this, o, 1), this.precision = n, this.rounding = i, t = e.s < 0 ? t.minus(r) : t.plus(r)) : t = this.atan(L(e, r, o, 1)), t;\n}\nfunction qp(e) {\n    return new this(e).cbrt();\n}\nfunction jp(e) {\n    return y(e = new this(e), e.e + 1, 2);\n}\nfunction Vp(e, r, t) {\n    return new this(e).clamp(r, t);\n}\nfunction Bp(e) {\n    if (!e || typeof e != \"object\") throw Error(yn + \"Object expected\");\n    var r, t, n, i = e.defaults === !0, o = [\n        \"precision\",\n        1,\n        Ke,\n        \"rounding\",\n        0,\n        8,\n        \"toExpNeg\",\n        -vr,\n        0,\n        \"toExpPos\",\n        0,\n        vr,\n        \"maxE\",\n        0,\n        vr,\n        \"minE\",\n        -vr,\n        0,\n        \"modulo\",\n        0,\n        9\n    ];\n    for(r = 0; r < o.length; r += 3)if (t = o[r], i && (this[t] = Gi[t]), (n = e[t]) !== void 0) if (X(n) === n && n >= o[r + 1] && n <= o[r + 2]) this[t] = n;\n    else throw Error(He + t + \": \" + n);\n    if (t = \"crypto\", i && (this[t] = Gi[t]), (n = e[t]) !== void 0) if (n === !0 || n === !1 || n === 0 || n === 1) if (n) if (typeof crypto < \"u\" && crypto && (crypto.getRandomValues || crypto.randomBytes)) this[t] = !0;\n    else throw Error(Us);\n    else this[t] = !1;\n    else throw Error(He + t + \": \" + n);\n    return this;\n}\nfunction Up(e) {\n    return new this(e).cos();\n}\nfunction Gp(e) {\n    return new this(e).cosh();\n}\nfunction zs(e) {\n    var r, t, n;\n    function i(o) {\n        var s, a, l, u = this;\n        if (!(u instanceof i)) return new i(o);\n        if (u.constructor = i, js(o)) {\n            u.s = o.s, w ? !o.d || o.e > i.maxE ? (u.e = NaN, u.d = null) : o.e < i.minE ? (u.e = 0, u.d = [\n                0\n            ]) : (u.e = o.e, u.d = o.d.slice()) : (u.e = o.e, u.d = o.d ? o.d.slice() : o.d);\n            return;\n        }\n        if (l = typeof o, l === \"number\") {\n            if (o === 0) {\n                u.s = 1 / o < 0 ? -1 : 1, u.e = 0, u.d = [\n                    0\n                ];\n                return;\n            }\n            if (o < 0 ? (o = -o, u.s = -1) : u.s = 1, o === ~~o && o < 1e7) {\n                for(s = 0, a = o; a >= 10; a /= 10)s++;\n                w ? s > i.maxE ? (u.e = NaN, u.d = null) : s < i.minE ? (u.e = 0, u.d = [\n                    0\n                ]) : (u.e = s, u.d = [\n                    o\n                ]) : (u.e = s, u.d = [\n                    o\n                ]);\n                return;\n            }\n            if (o * 0 !== 0) {\n                o || (u.s = NaN), u.e = NaN, u.d = null;\n                return;\n            }\n            return mn(u, o.toString());\n        }\n        if (l === \"string\") return (a = o.charCodeAt(0)) === 45 ? (o = o.slice(1), u.s = -1) : (a === 43 && (o = o.slice(1)), u.s = 1), Qs.test(o) ? mn(u, o) : Cp(u, o);\n        if (l === \"bigint\") return o < 0 ? (o = -o, u.s = -1) : u.s = 1, mn(u, o.toString());\n        throw Error(He + o);\n    }\n    if (i.prototype = m, i.ROUND_UP = 0, i.ROUND_DOWN = 1, i.ROUND_CEIL = 2, i.ROUND_FLOOR = 3, i.ROUND_HALF_UP = 4, i.ROUND_HALF_DOWN = 5, i.ROUND_HALF_EVEN = 6, i.ROUND_HALF_CEIL = 7, i.ROUND_HALF_FLOOR = 8, i.EUCLID = 9, i.config = i.set = Bp, i.clone = zs, i.isDecimal = js, i.abs = kp, i.acos = Dp, i.acosh = Op, i.add = _p, i.asin = Np, i.asinh = Lp, i.atan = Fp, i.atanh = Mp, i.atan2 = $p, i.cbrt = qp, i.ceil = jp, i.clamp = Vp, i.cos = Up, i.cosh = Gp, i.div = Qp, i.exp = Wp, i.floor = Jp, i.hypot = Hp, i.ln = Kp, i.log = Yp, i.log10 = Zp, i.log2 = zp, i.max = Xp, i.min = ed, i.mod = rd, i.mul = td, i.pow = nd, i.random = id, i.round = od, i.sign = sd, i.sin = ad, i.sinh = ld, i.sqrt = ud, i.sub = cd, i.sum = pd, i.tan = dd, i.tanh = md, i.trunc = fd, e === void 0 && (e = {}), e && e.defaults !== !0) for(n = [\n        \"precision\",\n        \"rounding\",\n        \"toExpNeg\",\n        \"toExpPos\",\n        \"maxE\",\n        \"minE\",\n        \"modulo\",\n        \"crypto\"\n    ], r = 0; r < n.length;)e.hasOwnProperty(t = n[r++]) || (e[t] = this[t]);\n    return i.config(e), i;\n}\nfunction Qp(e, r) {\n    return new this(e).div(r);\n}\nfunction Wp(e) {\n    return new this(e).exp();\n}\nfunction Jp(e) {\n    return y(e = new this(e), e.e + 1, 3);\n}\nfunction Hp() {\n    var e, r, t = new this(0);\n    for(w = !1, e = 0; e < arguments.length;)if (r = new this(arguments[e++]), r.d) t.d && (t = t.plus(r.times(r)));\n    else {\n        if (r.s) return w = !0, new this(1 / 0);\n        t = r;\n    }\n    return w = !0, t.sqrt();\n}\nfunction js(e) {\n    return e instanceof ar || e && e.toStringTag === Gs || !1;\n}\nfunction Kp(e) {\n    return new this(e).ln();\n}\nfunction Yp(e, r) {\n    return new this(e).log(r);\n}\nfunction zp(e) {\n    return new this(e).log(2);\n}\nfunction Zp(e) {\n    return new this(e).log(10);\n}\nfunction Xp() {\n    return Hs(this, arguments, -1);\n}\nfunction ed() {\n    return Hs(this, arguments, 1);\n}\nfunction rd(e, r) {\n    return new this(e).mod(r);\n}\nfunction td(e, r) {\n    return new this(e).mul(r);\n}\nfunction nd(e, r) {\n    return new this(e).pow(r);\n}\nfunction id(e) {\n    var r, t, n, i, o = 0, s = new this(1), a = [];\n    if (e === void 0 ? e = this.precision : ie(e, 1, Ke), n = Math.ceil(e / E), this.crypto) if (crypto.getRandomValues) for(r = crypto.getRandomValues(new Uint32Array(n)); o < n;)i = r[o], i >= 429e7 ? r[o] = crypto.getRandomValues(new Uint32Array(1))[0] : a[o++] = i % 1e7;\n    else if (crypto.randomBytes) {\n        for(r = crypto.randomBytes(n *= 4); o < n;)i = r[o] + (r[o + 1] << 8) + (r[o + 2] << 16) + ((r[o + 3] & 127) << 24), i >= 214e7 ? crypto.randomBytes(4).copy(r, o) : (a.push(i % 1e7), o += 4);\n        o = n / 4;\n    } else throw Error(Us);\n    else for(; o < n;)a[o++] = Math.random() * 1e7 | 0;\n    for(n = a[--o], e %= E, n && e && (i = U(10, E - e), a[o] = (n / i | 0) * i); a[o] === 0; o--)a.pop();\n    if (o < 0) t = 0, a = [\n        0\n    ];\n    else {\n        for(t = -1; a[0] === 0; t -= E)a.shift();\n        for(n = 1, i = a[0]; i >= 10; i /= 10)n++;\n        n < E && (t -= E - n);\n    }\n    return s.e = t, s.d = a, s;\n}\nfunction od(e) {\n    return y(e = new this(e), e.e + 1, this.rounding);\n}\nfunction sd(e) {\n    return e = new this(e), e.d ? e.d[0] ? e.s : 0 * e.s : e.s || NaN;\n}\nfunction ad(e) {\n    return new this(e).sin();\n}\nfunction ld(e) {\n    return new this(e).sinh();\n}\nfunction ud(e) {\n    return new this(e).sqrt();\n}\nfunction cd(e, r) {\n    return new this(e).sub(r);\n}\nfunction pd() {\n    var e = 0, r = arguments, t = new this(r[e]);\n    for(w = !1; t.s && ++e < r.length;)t = t.plus(r[e]);\n    return w = !0, y(t, this.precision, this.rounding);\n}\nfunction dd(e) {\n    return new this(e).tan();\n}\nfunction md(e) {\n    return new this(e).tanh();\n}\nfunction fd(e) {\n    return y(e = new this(e), e.e + 1, 1);\n}\nm[Symbol.for(\"nodejs.util.inspect.custom\")] = m.toString;\nm[Symbol.toStringTag] = \"Decimal\";\nvar ar = m.constructor = zs(Gi);\nfn = new ar(fn);\ngn = new ar(gn);\nvar ve = ar;\nfunction Tr(e) {\n    return e === null ? e : Array.isArray(e) ? e.map(Tr) : typeof e == \"object\" ? gd(e) ? hd(e) : e.constructor !== null && e.constructor.name !== \"Object\" ? e : xr(e, Tr) : e;\n}\nfunction gd(e) {\n    return e !== null && typeof e == \"object\" && typeof e.$type == \"string\";\n}\nfunction hd({ $type: e, value: r }) {\n    switch(e){\n        case \"BigInt\":\n            return BigInt(r);\n        case \"Bytes\":\n            {\n                let { buffer: t, byteOffset: n, byteLength: i } = Buffer.from(r, \"base64\");\n                return new Uint8Array(t, n, i);\n            }\n        case \"DateTime\":\n            return new Date(r);\n        case \"Decimal\":\n            return new ve(r);\n        case \"Json\":\n            return JSON.parse(r);\n        default:\n            Ne(r, \"Unknown tagged value\");\n    }\n}\nvar Pe = class {\n    get(r) {\n        return this._map.get(r)?.value;\n    }\n    set(r, t) {\n        this._map.set(r, {\n            value: t\n        });\n    }\n    getOrCreate(r, t) {\n        let n = this._map.get(r);\n        if (n) return n.value;\n        let i = t();\n        return this.set(r, i), i;\n    }\n    constructor(){\n        this._map = new Map;\n    }\n};\nfunction Ye(e) {\n    return e.substring(0, 1).toLowerCase() + e.substring(1);\n}\nfunction Zs(e, r) {\n    let t = {};\n    for (let n of e){\n        let i = n[r];\n        t[i] = n;\n    }\n    return t;\n}\nfunction ut(e) {\n    let r;\n    return {\n        get () {\n            return r || (r = {\n                value: e()\n            }), r.value;\n        }\n    };\n}\nfunction Xs(e) {\n    return {\n        models: Hi(e.models),\n        enums: Hi(e.enums),\n        types: Hi(e.types)\n    };\n}\nfunction Hi(e) {\n    let r = {};\n    for (let { name: t, ...n } of e)r[t] = n;\n    return r;\n}\nfunction Sr(e) {\n    return e instanceof Date || Object.prototype.toString.call(e) === \"[object Date]\";\n}\nfunction wn(e) {\n    return e.toString() !== \"Invalid Date\";\n}\nfunction Rr(e) {\n    return ar.isDecimal(e) ? !0 : e !== null && typeof e == \"object\" && typeof e.s == \"number\" && typeof e.e == \"number\" && typeof e.toFixed == \"function\" && Array.isArray(e.d);\n}\nvar ct = {};\ntr(ct, {\n    ModelAction: ()=>Ar,\n    datamodelEnumToSchemaEnum: ()=>yd\n});\nfunction yd(e) {\n    return {\n        name: e.name,\n        values: e.values.map((r)=>r.name)\n    };\n}\nvar Ar = ((b)=>(b.findUnique = \"findUnique\", b.findUniqueOrThrow = \"findUniqueOrThrow\", b.findFirst = \"findFirst\", b.findFirstOrThrow = \"findFirstOrThrow\", b.findMany = \"findMany\", b.create = \"create\", b.createMany = \"createMany\", b.createManyAndReturn = \"createManyAndReturn\", b.update = \"update\", b.updateMany = \"updateMany\", b.updateManyAndReturn = \"updateManyAndReturn\", b.upsert = \"upsert\", b.delete = \"delete\", b.deleteMany = \"deleteMany\", b.groupBy = \"groupBy\", b.count = \"count\", b.aggregate = \"aggregate\", b.findRaw = \"findRaw\", b.aggregateRaw = \"aggregateRaw\", b))(Ar || {});\nvar ia = C(Di());\nvar na = C(__webpack_require__(/*! node:fs */ \"node:fs\"));\nvar ea = {\n    keyword: De,\n    entity: De,\n    value: (e)=>W(nr(e)),\n    punctuation: nr,\n    directive: De,\n    function: De,\n    variable: (e)=>W(nr(e)),\n    string: (e)=>W(qe(e)),\n    boolean: ke,\n    number: De,\n    comment: Kr\n};\nvar bd = (e)=>e, xn = {}, Ed = 0, v = {\n    manual: xn.Prism && xn.Prism.manual,\n    disableWorkerMessageHandler: xn.Prism && xn.Prism.disableWorkerMessageHandler,\n    util: {\n        encode: function(e) {\n            if (e instanceof ge) {\n                let r = e;\n                return new ge(r.type, v.util.encode(r.content), r.alias);\n            } else return Array.isArray(e) ? e.map(v.util.encode) : e.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/\\u00a0/g, \" \");\n        },\n        type: function(e) {\n            return Object.prototype.toString.call(e).slice(8, -1);\n        },\n        objId: function(e) {\n            return e.__id || Object.defineProperty(e, \"__id\", {\n                value: ++Ed\n            }), e.__id;\n        },\n        clone: function e(r, t) {\n            let n, i, o = v.util.type(r);\n            switch(t = t || {}, o){\n                case \"Object\":\n                    if (i = v.util.objId(r), t[i]) return t[i];\n                    n = {}, t[i] = n;\n                    for(let s in r)r.hasOwnProperty(s) && (n[s] = e(r[s], t));\n                    return n;\n                case \"Array\":\n                    return i = v.util.objId(r), t[i] ? t[i] : (n = [], t[i] = n, r.forEach(function(s, a) {\n                        n[a] = e(s, t);\n                    }), n);\n                default:\n                    return r;\n            }\n        }\n    },\n    languages: {\n        extend: function(e, r) {\n            let t = v.util.clone(v.languages[e]);\n            for(let n in r)t[n] = r[n];\n            return t;\n        },\n        insertBefore: function(e, r, t, n) {\n            n = n || v.languages;\n            let i = n[e], o = {};\n            for(let a in i)if (i.hasOwnProperty(a)) {\n                if (a == r) for(let l in t)t.hasOwnProperty(l) && (o[l] = t[l]);\n                t.hasOwnProperty(a) || (o[a] = i[a]);\n            }\n            let s = n[e];\n            return n[e] = o, v.languages.DFS(v.languages, function(a, l) {\n                l === s && a != e && (this[a] = o);\n            }), o;\n        },\n        DFS: function e(r, t, n, i) {\n            i = i || {};\n            let o = v.util.objId;\n            for(let s in r)if (r.hasOwnProperty(s)) {\n                t.call(r, s, r[s], n || s);\n                let a = r[s], l = v.util.type(a);\n                l === \"Object\" && !i[o(a)] ? (i[o(a)] = !0, e(a, t, null, i)) : l === \"Array\" && !i[o(a)] && (i[o(a)] = !0, e(a, t, s, i));\n            }\n        }\n    },\n    plugins: {},\n    highlight: function(e, r, t) {\n        let n = {\n            code: e,\n            grammar: r,\n            language: t\n        };\n        return v.hooks.run(\"before-tokenize\", n), n.tokens = v.tokenize(n.code, n.grammar), v.hooks.run(\"after-tokenize\", n), ge.stringify(v.util.encode(n.tokens), n.language);\n    },\n    matchGrammar: function(e, r, t, n, i, o, s) {\n        for(let g in t){\n            if (!t.hasOwnProperty(g) || !t[g]) continue;\n            if (g == s) return;\n            let S = t[g];\n            S = v.util.type(S) === \"Array\" ? S : [\n                S\n            ];\n            for(let P = 0; P < S.length; ++P){\n                let R = S[P], b = R.inside, D = !!R.lookbehind, me = !!R.greedy, ae = 0, Hr = R.alias;\n                if (me && !R.pattern.global) {\n                    let V = R.pattern.toString().match(/[imuy]*$/)[0];\n                    R.pattern = RegExp(R.pattern.source, V + \"g\");\n                }\n                R = R.pattern || R;\n                for(let V = n, te = i; V < r.length; te += r[V].length, ++V){\n                    let Ce = r[V];\n                    if (r.length > e.length) return;\n                    if (Ce instanceof ge) continue;\n                    if (me && V != r.length - 1) {\n                        R.lastIndex = te;\n                        var p = R.exec(e);\n                        if (!p) break;\n                        var c = p.index + (D ? p[1].length : 0), d = p.index + p[0].length, a = V, l = te;\n                        for(let _ = r.length; a < _ && (l < d || !r[a].type && !r[a - 1].greedy); ++a)l += r[a].length, c >= l && (++V, te = l);\n                        if (r[V] instanceof ge) continue;\n                        u = a - V, Ce = e.slice(te, l), p.index -= te;\n                    } else {\n                        R.lastIndex = 0;\n                        var p = R.exec(Ce), u = 1;\n                    }\n                    if (!p) {\n                        if (o) break;\n                        continue;\n                    }\n                    D && (ae = p[1] ? p[1].length : 0);\n                    var c = p.index + ae, p = p[0].slice(ae), d = c + p.length, f = Ce.slice(0, c), h = Ce.slice(d);\n                    let H = [\n                        V,\n                        u\n                    ];\n                    f && (++V, te += f.length, H.push(f));\n                    let fr = new ge(g, b ? v.tokenize(p, b) : p, Hr, p, me);\n                    if (H.push(fr), h && H.push(h), Array.prototype.splice.apply(r, H), u != 1 && v.matchGrammar(e, r, t, V, te, !0, g), o) break;\n                }\n            }\n        }\n    },\n    tokenize: function(e, r) {\n        let t = [\n            e\n        ], n = r.rest;\n        if (n) {\n            for(let i in n)r[i] = n[i];\n            delete r.rest;\n        }\n        return v.matchGrammar(e, t, r, 0, 0, !1), t;\n    },\n    hooks: {\n        all: {},\n        add: function(e, r) {\n            let t = v.hooks.all;\n            t[e] = t[e] || [], t[e].push(r);\n        },\n        run: function(e, r) {\n            let t = v.hooks.all[e];\n            if (!(!t || !t.length)) for(var n = 0, i; i = t[n++];)i(r);\n        }\n    },\n    Token: ge\n};\nv.languages.clike = {\n    comment: [\n        {\n            pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n            lookbehind: !0\n        },\n        {\n            pattern: /(^|[^\\\\:])\\/\\/.*/,\n            lookbehind: !0,\n            greedy: !0\n        }\n    ],\n    string: {\n        pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n        greedy: !0\n    },\n    \"class-name\": {\n        pattern: /((?:\\b(?:class|interface|extends|implements|trait|instanceof|new)\\s+)|(?:catch\\s+\\())[\\w.\\\\]+/i,\n        lookbehind: !0,\n        inside: {\n            punctuation: /[.\\\\]/\n        }\n    },\n    keyword: /\\b(?:if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\\b/,\n    boolean: /\\b(?:true|false)\\b/,\n    function: /\\w+(?=\\()/,\n    number: /\\b0x[\\da-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,\n    operator: /--?|\\+\\+?|!=?=?|<=?|>=?|==?=?|&&?|\\|\\|?|\\?|\\*|\\/|~|\\^|%/,\n    punctuation: /[{}[\\];(),.:]/\n};\nv.languages.javascript = v.languages.extend(\"clike\", {\n    \"class-name\": [\n        v.languages.clike[\"class-name\"],\n        {\n            pattern: /(^|[^$\\w\\xA0-\\uFFFF])[_$A-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\.(?:prototype|constructor))/,\n            lookbehind: !0\n        }\n    ],\n    keyword: [\n        {\n            pattern: /((?:^|})\\s*)(?:catch|finally)\\b/,\n            lookbehind: !0\n        },\n        {\n            pattern: /(^|[^.])\\b(?:as|async(?=\\s*(?:function\\b|\\(|[$\\w\\xA0-\\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\\b/,\n            lookbehind: !0\n        }\n    ],\n    number: /\\b(?:(?:0[xX](?:[\\dA-Fa-f](?:_[\\dA-Fa-f])?)+|0[bB](?:[01](?:_[01])?)+|0[oO](?:[0-7](?:_[0-7])?)+)n?|(?:\\d(?:_\\d)?)+n|NaN|Infinity)\\b|(?:\\b(?:\\d(?:_\\d)?)+\\.?(?:\\d(?:_\\d)?)*|\\B\\.(?:\\d(?:_\\d)?)+)(?:[Ee][+-]?(?:\\d(?:_\\d)?)+)?/,\n    function: /[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*(?:\\.\\s*(?:apply|bind|call)\\s*)?\\()/,\n    operator: /-[-=]?|\\+[+=]?|!=?=?|<<?=?|>>?>?=?|=(?:==?|>)?|&[&=]?|\\|[|=]?|\\*\\*?=?|\\/=?|~|\\^=?|%=?|\\?|\\.{3}/\n});\nv.languages.javascript[\"class-name\"][0].pattern = /(\\b(?:class|interface|extends|implements|instanceof|new)\\s+)[\\w.\\\\]+/;\nv.languages.insertBefore(\"javascript\", \"keyword\", {\n    regex: {\n        pattern: /((?:^|[^$\\w\\xA0-\\uFFFF.\"'\\])\\s])\\s*)\\/(\\[(?:[^\\]\\\\\\r\\n]|\\\\.)*]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[gimyus]{0,6}(?=\\s*($|[\\r\\n,.;})\\]]))/,\n        lookbehind: !0,\n        greedy: !0\n    },\n    \"function-variable\": {\n        pattern: /[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*[=:]\\s*(?:async\\s*)?(?:\\bfunction\\b|(?:\\((?:[^()]|\\([^()]*\\))*\\)|[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*)\\s*=>))/,\n        alias: \"function\"\n    },\n    parameter: [\n        {\n            pattern: /(function(?:\\s+[_$A-Za-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*)?\\s*\\(\\s*)(?!\\s)(?:[^()]|\\([^()]*\\))+?(?=\\s*\\))/,\n            lookbehind: !0,\n            inside: v.languages.javascript\n        },\n        {\n            pattern: /[_$a-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*=>)/i,\n            inside: v.languages.javascript\n        },\n        {\n            pattern: /(\\(\\s*)(?!\\s)(?:[^()]|\\([^()]*\\))+?(?=\\s*\\)\\s*=>)/,\n            lookbehind: !0,\n            inside: v.languages.javascript\n        },\n        {\n            pattern: /((?:\\b|\\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\\w\\xA0-\\uFFFF]))(?:[_$A-Za-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*\\s*)\\(\\s*)(?!\\s)(?:[^()]|\\([^()]*\\))+?(?=\\s*\\)\\s*\\{)/,\n            lookbehind: !0,\n            inside: v.languages.javascript\n        }\n    ],\n    constant: /\\b[A-Z](?:[A-Z_]|\\dx?)*\\b/\n});\nv.languages.markup && v.languages.markup.tag.addInlined(\"script\", \"javascript\");\nv.languages.js = v.languages.javascript;\nv.languages.typescript = v.languages.extend(\"javascript\", {\n    keyword: /\\b(?:abstract|as|async|await|break|case|catch|class|const|constructor|continue|debugger|declare|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|is|keyof|let|module|namespace|new|null|of|package|private|protected|public|readonly|return|require|set|static|super|switch|this|throw|try|type|typeof|var|void|while|with|yield)\\b/,\n    builtin: /\\b(?:string|Function|any|number|boolean|Array|symbol|console|Promise|unknown|never)\\b/\n});\nv.languages.ts = v.languages.typescript;\nfunction ge(e, r, t, n, i) {\n    this.type = e, this.content = r, this.alias = t, this.length = (n || \"\").length | 0, this.greedy = !!i;\n}\nge.stringify = function(e, r) {\n    return typeof e == \"string\" ? e : Array.isArray(e) ? e.map(function(t) {\n        return ge.stringify(t, r);\n    }).join(\"\") : wd(e.type)(e.content);\n};\nfunction wd(e) {\n    return ea[e] || bd;\n}\nfunction ra(e) {\n    return xd(e, v.languages.javascript);\n}\nfunction xd(e, r) {\n    return v.tokenize(e, r).map((n)=>ge.stringify(n)).join(\"\");\n}\nfunction ta(e) {\n    return Ii(e);\n}\nvar vn = class e {\n    static read(r) {\n        let t;\n        try {\n            t = na.default.readFileSync(r, \"utf-8\");\n        } catch  {\n            return null;\n        }\n        return e.fromContent(t);\n    }\n    static fromContent(r) {\n        let t = r.split(/\\r?\\n/);\n        return new e(1, t);\n    }\n    constructor(r, t){\n        this.firstLineNumber = r, this.lines = t;\n    }\n    get lastLineNumber() {\n        return this.firstLineNumber + this.lines.length - 1;\n    }\n    mapLineAt(r, t) {\n        if (r < this.firstLineNumber || r > this.lines.length + this.firstLineNumber) return this;\n        let n = r - this.firstLineNumber, i = [\n            ...this.lines\n        ];\n        return i[n] = t(i[n]), new e(this.firstLineNumber, i);\n    }\n    mapLines(r) {\n        return new e(this.firstLineNumber, this.lines.map((t, n)=>r(t, this.firstLineNumber + n)));\n    }\n    lineAt(r) {\n        return this.lines[r - this.firstLineNumber];\n    }\n    prependSymbolAt(r, t) {\n        return this.mapLines((n, i)=>i === r ? `${t} ${n}` : `  ${n}`);\n    }\n    slice(r, t) {\n        let n = this.lines.slice(r - 1, t).join(`\n`);\n        return new e(r, ta(n).split(`\n`));\n    }\n    highlight() {\n        let r = ra(this.toString());\n        return new e(this.firstLineNumber, r.split(`\n`));\n    }\n    toString() {\n        return this.lines.join(`\n`);\n    }\n};\nvar vd = {\n    red: ce,\n    gray: Kr,\n    dim: Ie,\n    bold: W,\n    underline: Y,\n    highlightSource: (e)=>e.highlight()\n}, Pd = {\n    red: (e)=>e,\n    gray: (e)=>e,\n    dim: (e)=>e,\n    bold: (e)=>e,\n    underline: (e)=>e,\n    highlightSource: (e)=>e\n};\nfunction Td({ message: e, originalMethod: r, isPanic: t, callArguments: n }) {\n    return {\n        functionName: `prisma.${r}()`,\n        message: e,\n        isPanic: t ?? !1,\n        callArguments: n\n    };\n}\nfunction Sd({ callsite: e, message: r, originalMethod: t, isPanic: n, callArguments: i }, o) {\n    let s = Td({\n        message: r,\n        originalMethod: t,\n        isPanic: n,\n        callArguments: i\n    });\n    if (!e || \"undefined\" < \"u\" || \"development\" === \"production\") return s;\n    let a = e.getLocation();\n    if (!a || !a.lineNumber || !a.columnNumber) return s;\n    let l = Math.max(1, a.lineNumber - 3), u = vn.read(a.fileName)?.slice(l, a.lineNumber), c = u?.lineAt(a.lineNumber);\n    if (u && c) {\n        let p = Ad(c), d = Rd(c);\n        if (!d) return s;\n        s.functionName = `${d.code})`, s.location = a, n || (u = u.mapLineAt(a.lineNumber, (h)=>h.slice(0, d.openingBraceIndex))), u = o.highlightSource(u);\n        let f = String(u.lastLineNumber).length;\n        if (s.contextLines = u.mapLines((h, g)=>o.gray(String(g).padStart(f)) + \" \" + h).mapLines((h)=>o.dim(h)).prependSymbolAt(a.lineNumber, o.bold(o.red(\"→\"))), i) {\n            let h = p + f + 1;\n            h += 2, s.callArguments = (0, ia.default)(i, h).slice(h);\n        }\n    }\n    return s;\n}\nfunction Rd(e) {\n    let r = Object.keys(Ar).join(\"|\"), n = new RegExp(String.raw`\\.(${r})\\(`).exec(e);\n    if (n) {\n        let i = n.index + n[0].length, o = e.lastIndexOf(\" \", n.index) + 1;\n        return {\n            code: e.slice(o, i),\n            openingBraceIndex: i\n        };\n    }\n    return null;\n}\nfunction Ad(e) {\n    let r = 0;\n    for(let t = 0; t < e.length; t++){\n        if (e.charAt(t) !== \" \") return r;\n        r++;\n    }\n    return r;\n}\nfunction Cd({ functionName: e, location: r, message: t, isPanic: n, contextLines: i, callArguments: o }, s) {\n    let a = [\n        \"\"\n    ], l = r ? \" in\" : \":\";\n    if (n ? (a.push(s.red(`Oops, an unknown error occurred! This is ${s.bold(\"on us\")}, you did nothing wrong.`)), a.push(s.red(`It occurred in the ${s.bold(`\\`${e}\\``)} invocation${l}`))) : a.push(s.red(`Invalid ${s.bold(`\\`${e}\\``)} invocation${l}`)), r && a.push(s.underline(Id(r))), i) {\n        a.push(\"\");\n        let u = [\n            i.toString()\n        ];\n        o && (u.push(o), u.push(s.dim(\")\"))), a.push(u.join(\"\")), o && a.push(\"\");\n    } else a.push(\"\"), o && a.push(o), a.push(\"\");\n    return a.push(t), a.join(`\n`);\n}\nfunction Id(e) {\n    let r = [\n        e.fileName\n    ];\n    return e.lineNumber && r.push(String(e.lineNumber)), e.columnNumber && r.push(String(e.columnNumber)), r.join(\":\");\n}\nfunction Pn(e) {\n    let r = e.showColors ? vd : Pd, t;\n    return t = Sd(e, r), Cd(t, r);\n}\nvar ma = C(Ki());\nfunction la(e, r, t) {\n    let n = ua(e), i = kd(n), o = Od(i);\n    o ? Tn(o, r, t) : r.addErrorMessage(()=>\"Unknown error\");\n}\nfunction ua(e) {\n    return e.errors.flatMap((r)=>r.kind === \"Union\" ? ua(r) : [\n            r\n        ]);\n}\nfunction kd(e) {\n    let r = new Map, t = [];\n    for (let n of e){\n        if (n.kind !== \"InvalidArgumentType\") {\n            t.push(n);\n            continue;\n        }\n        let i = `${n.selectionPath.join(\".\")}:${n.argumentPath.join(\".\")}`, o = r.get(i);\n        o ? r.set(i, {\n            ...n,\n            argument: {\n                ...n.argument,\n                typeNames: Dd(o.argument.typeNames, n.argument.typeNames)\n            }\n        }) : r.set(i, n);\n    }\n    return t.push(...r.values()), t;\n}\nfunction Dd(e, r) {\n    return [\n        ...new Set(e.concat(r))\n    ];\n}\nfunction Od(e) {\n    return Bi(e, (r, t)=>{\n        let n = sa(r), i = sa(t);\n        return n !== i ? n - i : aa(r) - aa(t);\n    });\n}\nfunction sa(e) {\n    let r = 0;\n    return Array.isArray(e.selectionPath) && (r += e.selectionPath.length), Array.isArray(e.argumentPath) && (r += e.argumentPath.length), r;\n}\nfunction aa(e) {\n    switch(e.kind){\n        case \"InvalidArgumentValue\":\n        case \"ValueTooLarge\":\n            return 20;\n        case \"InvalidArgumentType\":\n            return 10;\n        case \"RequiredArgumentMissing\":\n            return -10;\n        default:\n            return 0;\n    }\n}\nvar ue = class {\n    constructor(r, t){\n        this.isRequired = !1;\n        this.name = r;\n        this.value = t;\n    }\n    makeRequired() {\n        return this.isRequired = !0, this;\n    }\n    write(r) {\n        let { colors: { green: t } } = r.context;\n        r.addMarginSymbol(t(this.isRequired ? \"+\" : \"?\")), r.write(t(this.name)), this.isRequired || r.write(t(\"?\")), r.write(t(\": \")), typeof this.value == \"string\" ? r.write(t(this.value)) : r.write(this.value);\n    }\n};\npa();\nvar Cr = class {\n    constructor(r = 0, t){\n        this.lines = [];\n        this.currentLine = \"\";\n        this.currentIndent = 0;\n        this.context = t;\n        this.currentIndent = r;\n    }\n    write(r) {\n        return typeof r == \"string\" ? this.currentLine += r : r.write(this), this;\n    }\n    writeJoined(r, t, n = (i, o)=>o.write(i)) {\n        let i = t.length - 1;\n        for(let o = 0; o < t.length; o++)n(t[o], this), o !== i && this.write(r);\n        return this;\n    }\n    writeLine(r) {\n        return this.write(r).newLine();\n    }\n    newLine() {\n        this.lines.push(this.indentedCurrentLine()), this.currentLine = \"\", this.marginSymbol = void 0;\n        let r = this.afterNextNewLineCallback;\n        return this.afterNextNewLineCallback = void 0, r?.(), this;\n    }\n    withIndent(r) {\n        return this.indent(), r(this), this.unindent(), this;\n    }\n    afterNextNewline(r) {\n        return this.afterNextNewLineCallback = r, this;\n    }\n    indent() {\n        return this.currentIndent++, this;\n    }\n    unindent() {\n        return this.currentIndent > 0 && this.currentIndent--, this;\n    }\n    addMarginSymbol(r) {\n        return this.marginSymbol = r, this;\n    }\n    toString() {\n        return this.lines.concat(this.indentedCurrentLine()).join(`\n`);\n    }\n    getCurrentLineLength() {\n        return this.currentLine.length;\n    }\n    indentedCurrentLine() {\n        let r = this.currentLine.padStart(this.currentLine.length + 2 * this.currentIndent);\n        return this.marginSymbol ? this.marginSymbol + r.slice(1) : r;\n    }\n};\nca();\nvar Sn = class {\n    constructor(r){\n        this.value = r;\n    }\n    write(r) {\n        r.write(this.value);\n    }\n    markAsError() {\n        this.value.markAsError();\n    }\n};\nvar Rn = (e)=>e, An = {\n    bold: Rn,\n    red: Rn,\n    green: Rn,\n    dim: Rn,\n    enabled: !1\n}, da = {\n    bold: W,\n    red: ce,\n    green: qe,\n    dim: Ie,\n    enabled: !0\n}, Ir = {\n    write (e) {\n        e.writeLine(\",\");\n    }\n};\nvar Te = class {\n    constructor(r){\n        this.isUnderlined = !1;\n        this.color = (r)=>r;\n        this.contents = r;\n    }\n    underline() {\n        return this.isUnderlined = !0, this;\n    }\n    setColor(r) {\n        return this.color = r, this;\n    }\n    write(r) {\n        let t = r.getCurrentLineLength();\n        r.write(this.color(this.contents)), this.isUnderlined && r.afterNextNewline(()=>{\n            r.write(\" \".repeat(t)).writeLine(this.color(\"~\".repeat(this.contents.length)));\n        });\n    }\n};\nvar ze = class {\n    markAsError() {\n        return this.hasError = !0, this;\n    }\n    constructor(){\n        this.hasError = !1;\n    }\n};\nvar kr = class extends ze {\n    addItem(r) {\n        return this.items.push(new Sn(r)), this;\n    }\n    getField(r) {\n        return this.items[r];\n    }\n    getPrintWidth() {\n        return this.items.length === 0 ? 2 : Math.max(...this.items.map((t)=>t.value.getPrintWidth())) + 2;\n    }\n    write(r) {\n        if (this.items.length === 0) {\n            this.writeEmpty(r);\n            return;\n        }\n        this.writeWithItems(r);\n    }\n    writeEmpty(r) {\n        let t = new Te(\"[]\");\n        this.hasError && t.setColor(r.context.colors.red).underline(), r.write(t);\n    }\n    writeWithItems(r) {\n        let { colors: t } = r.context;\n        r.writeLine(\"[\").withIndent(()=>r.writeJoined(Ir, this.items).newLine()).write(\"]\"), this.hasError && r.afterNextNewline(()=>{\n            r.writeLine(t.red(\"~\".repeat(this.getPrintWidth())));\n        });\n    }\n    asObject() {}\n    constructor(...args){\n        super(...args);\n        this.items = [];\n    }\n};\nvar Dr = class e extends ze {\n    addField(r) {\n        this.fields[r.name] = r;\n    }\n    addSuggestion(r) {\n        this.suggestions.push(r);\n    }\n    getField(r) {\n        return this.fields[r];\n    }\n    getDeepField(r) {\n        let [t, ...n] = r, i = this.getField(t);\n        if (!i) return;\n        let o = i;\n        for (let s of n){\n            let a;\n            if (o.value instanceof e ? a = o.value.getField(s) : o.value instanceof kr && (a = o.value.getField(Number(s))), !a) return;\n            o = a;\n        }\n        return o;\n    }\n    getDeepFieldValue(r) {\n        return r.length === 0 ? this : this.getDeepField(r)?.value;\n    }\n    hasField(r) {\n        return !!this.getField(r);\n    }\n    removeAllFields() {\n        this.fields = {};\n    }\n    removeField(r) {\n        delete this.fields[r];\n    }\n    getFields() {\n        return this.fields;\n    }\n    isEmpty() {\n        return Object.keys(this.fields).length === 0;\n    }\n    getFieldValue(r) {\n        return this.getField(r)?.value;\n    }\n    getDeepSubSelectionValue(r) {\n        let t = this;\n        for (let n of r){\n            if (!(t instanceof e)) return;\n            let i = t.getSubSelectionValue(n);\n            if (!i) return;\n            t = i;\n        }\n        return t;\n    }\n    getDeepSelectionParent(r) {\n        let t = this.getSelectionParent();\n        if (!t) return;\n        let n = t;\n        for (let i of r){\n            let o = n.value.getFieldValue(i);\n            if (!o || !(o instanceof e)) return;\n            let s = o.getSelectionParent();\n            if (!s) return;\n            n = s;\n        }\n        return n;\n    }\n    getSelectionParent() {\n        let r = this.getField(\"select\")?.value.asObject();\n        if (r) return {\n            kind: \"select\",\n            value: r\n        };\n        let t = this.getField(\"include\")?.value.asObject();\n        if (t) return {\n            kind: \"include\",\n            value: t\n        };\n    }\n    getSubSelectionValue(r) {\n        return this.getSelectionParent()?.value.fields[r].value;\n    }\n    getPrintWidth() {\n        let r = Object.values(this.fields);\n        return r.length == 0 ? 2 : Math.max(...r.map((n)=>n.getPrintWidth())) + 2;\n    }\n    write(r) {\n        let t = Object.values(this.fields);\n        if (t.length === 0 && this.suggestions.length === 0) {\n            this.writeEmpty(r);\n            return;\n        }\n        this.writeWithContents(r, t);\n    }\n    asObject() {\n        return this;\n    }\n    writeEmpty(r) {\n        let t = new Te(\"{}\");\n        this.hasError && t.setColor(r.context.colors.red).underline(), r.write(t);\n    }\n    writeWithContents(r, t) {\n        r.writeLine(\"{\").withIndent(()=>{\n            r.writeJoined(Ir, [\n                ...t,\n                ...this.suggestions\n            ]).newLine();\n        }), r.write(\"}\"), this.hasError && r.afterNextNewline(()=>{\n            r.writeLine(r.context.colors.red(\"~\".repeat(this.getPrintWidth())));\n        });\n    }\n    constructor(...args){\n        super(...args);\n        this.fields = {};\n        this.suggestions = [];\n    }\n};\nvar Q = class extends ze {\n    constructor(t){\n        super();\n        this.text = t;\n    }\n    getPrintWidth() {\n        return this.text.length;\n    }\n    write(t) {\n        let n = new Te(this.text);\n        this.hasError && n.underline().setColor(t.context.colors.red), t.write(n);\n    }\n    asObject() {}\n};\nvar pt = class {\n    addField(r, t) {\n        return this.fields.push({\n            write (n) {\n                let { green: i, dim: o } = n.context.colors;\n                n.write(i(o(`${r}: ${t}`))).addMarginSymbol(i(o(\"+\")));\n            }\n        }), this;\n    }\n    write(r) {\n        let { colors: { green: t } } = r.context;\n        r.writeLine(t(\"{\")).withIndent(()=>{\n            r.writeJoined(Ir, this.fields).newLine();\n        }).write(t(\"}\")).addMarginSymbol(t(\"+\"));\n    }\n    constructor(){\n        this.fields = [];\n    }\n};\nfunction Tn(e, r, t) {\n    switch(e.kind){\n        case \"MutuallyExclusiveFields\":\n            _d(e, r);\n            break;\n        case \"IncludeOnScalar\":\n            Nd(e, r);\n            break;\n        case \"EmptySelection\":\n            Ld(e, r, t);\n            break;\n        case \"UnknownSelectionField\":\n            qd(e, r);\n            break;\n        case \"InvalidSelectionValue\":\n            jd(e, r);\n            break;\n        case \"UnknownArgument\":\n            Vd(e, r);\n            break;\n        case \"UnknownInputField\":\n            Bd(e, r);\n            break;\n        case \"RequiredArgumentMissing\":\n            Ud(e, r);\n            break;\n        case \"InvalidArgumentType\":\n            Gd(e, r);\n            break;\n        case \"InvalidArgumentValue\":\n            Qd(e, r);\n            break;\n        case \"ValueTooLarge\":\n            Wd(e, r);\n            break;\n        case \"SomeFieldsMissing\":\n            Jd(e, r);\n            break;\n        case \"TooManyFieldsGiven\":\n            Hd(e, r);\n            break;\n        case \"Union\":\n            la(e, r, t);\n            break;\n        default:\n            throw new Error(\"not implemented: \" + e.kind);\n    }\n}\nfunction _d(e, r) {\n    let t = r.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject();\n    t && (t.getField(e.firstField)?.markAsError(), t.getField(e.secondField)?.markAsError()), r.addErrorMessage((n)=>`Please ${n.bold(\"either\")} use ${n.green(`\\`${e.firstField}\\``)} or ${n.green(`\\`${e.secondField}\\``)}, but ${n.red(\"not both\")} at the same time.`);\n}\nfunction Nd(e, r) {\n    let [t, n] = Or(e.selectionPath), i = e.outputType, o = r.arguments.getDeepSelectionParent(t)?.value;\n    if (o && (o.getField(n)?.markAsError(), i)) for (let s of i.fields)s.isRelation && o.addSuggestion(new ue(s.name, \"true\"));\n    r.addErrorMessage((s)=>{\n        let a = `Invalid scalar field ${s.red(`\\`${n}\\``)} for ${s.bold(\"include\")} statement`;\n        return i ? a += ` on model ${s.bold(i.name)}. ${dt(s)}` : a += \".\", a += `\nNote that ${s.bold(\"include\")} statements only accept relation fields.`, a;\n    });\n}\nfunction Ld(e, r, t) {\n    let n = r.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject();\n    if (n) {\n        let i = n.getField(\"omit\")?.value.asObject();\n        if (i) {\n            Fd(e, r, i);\n            return;\n        }\n        if (n.hasField(\"select\")) {\n            Md(e, r);\n            return;\n        }\n    }\n    if (t?.[Ye(e.outputType.name)]) {\n        $d(e, r);\n        return;\n    }\n    r.addErrorMessage(()=>`Unknown field at \"${e.selectionPath.join(\".\")} selection\"`);\n}\nfunction Fd(e, r, t) {\n    t.removeAllFields();\n    for (let n of e.outputType.fields)t.addSuggestion(new ue(n.name, \"false\"));\n    r.addErrorMessage((n)=>`The ${n.red(\"omit\")} statement includes every field of the model ${n.bold(e.outputType.name)}. At least one field must be included in the result`);\n}\nfunction Md(e, r) {\n    let t = e.outputType, n = r.arguments.getDeepSelectionParent(e.selectionPath)?.value, i = n?.isEmpty() ?? !1;\n    n && (n.removeAllFields(), ha(n, t)), r.addErrorMessage((o)=>i ? `The ${o.red(\"`select`\")} statement for type ${o.bold(t.name)} must not be empty. ${dt(o)}` : `The ${o.red(\"`select`\")} statement for type ${o.bold(t.name)} needs ${o.bold(\"at least one truthy value\")}.`);\n}\nfunction $d(e, r) {\n    let t = new pt;\n    for (let i of e.outputType.fields)i.isRelation || t.addField(i.name, \"false\");\n    let n = new ue(\"omit\", t).makeRequired();\n    if (e.selectionPath.length === 0) r.arguments.addSuggestion(n);\n    else {\n        let [i, o] = Or(e.selectionPath), a = r.arguments.getDeepSelectionParent(i)?.value.asObject()?.getField(o);\n        if (a) {\n            let l = a?.value.asObject() ?? new Dr;\n            l.addSuggestion(n), a.value = l;\n        }\n    }\n    r.addErrorMessage((i)=>`The global ${i.red(\"omit\")} configuration excludes every field of the model ${i.bold(e.outputType.name)}. At least one field must be included in the result`);\n}\nfunction qd(e, r) {\n    let t = ya(e.selectionPath, r);\n    if (t.parentKind !== \"unknown\") {\n        t.field.markAsError();\n        let n = t.parent;\n        switch(t.parentKind){\n            case \"select\":\n                ha(n, e.outputType);\n                break;\n            case \"include\":\n                Kd(n, e.outputType);\n                break;\n            case \"omit\":\n                Yd(n, e.outputType);\n                break;\n        }\n    }\n    r.addErrorMessage((n)=>{\n        let i = [\n            `Unknown field ${n.red(`\\`${t.fieldName}\\``)}`\n        ];\n        return t.parentKind !== \"unknown\" && i.push(`for ${n.bold(t.parentKind)} statement`), i.push(`on model ${n.bold(`\\`${e.outputType.name}\\``)}.`), i.push(dt(n)), i.join(\" \");\n    });\n}\nfunction jd(e, r) {\n    let t = ya(e.selectionPath, r);\n    t.parentKind !== \"unknown\" && t.field.value.markAsError(), r.addErrorMessage((n)=>`Invalid value for selection field \\`${n.red(t.fieldName)}\\`: ${e.underlyingError}`);\n}\nfunction Vd(e, r) {\n    let t = e.argumentPath[0], n = r.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject();\n    n && (n.getField(t)?.markAsError(), zd(n, e.arguments)), r.addErrorMessage((i)=>fa(i, t, e.arguments.map((o)=>o.name)));\n}\nfunction Bd(e, r) {\n    let [t, n] = Or(e.argumentPath), i = r.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject();\n    if (i) {\n        i.getDeepField(e.argumentPath)?.markAsError();\n        let o = i.getDeepFieldValue(t)?.asObject();\n        o && ba(o, e.inputType);\n    }\n    r.addErrorMessage((o)=>fa(o, n, e.inputType.fields.map((s)=>s.name)));\n}\nfunction fa(e, r, t) {\n    let n = [\n        `Unknown argument \\`${e.red(r)}\\`.`\n    ], i = Xd(r, t);\n    return i && n.push(`Did you mean \\`${e.green(i)}\\`?`), t.length > 0 && n.push(dt(e)), n.join(\" \");\n}\nfunction Ud(e, r) {\n    let t;\n    r.addErrorMessage((l)=>t?.value instanceof Q && t.value.text === \"null\" ? `Argument \\`${l.green(o)}\\` must not be ${l.red(\"null\")}.` : `Argument \\`${l.green(o)}\\` is missing.`);\n    let n = r.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject();\n    if (!n) return;\n    let [i, o] = Or(e.argumentPath), s = new pt, a = n.getDeepFieldValue(i)?.asObject();\n    if (a) {\n        if (t = a.getField(o), t && a.removeField(o), e.inputTypes.length === 1 && e.inputTypes[0].kind === \"object\") {\n            for (let l of e.inputTypes[0].fields)s.addField(l.name, l.typeNames.join(\" | \"));\n            a.addSuggestion(new ue(o, s).makeRequired());\n        } else {\n            let l = e.inputTypes.map(ga).join(\" | \");\n            a.addSuggestion(new ue(o, l).makeRequired());\n        }\n        if (e.dependentArgumentPath) {\n            n.getDeepField(e.dependentArgumentPath)?.markAsError();\n            let [, l] = Or(e.dependentArgumentPath);\n            r.addErrorMessage((u)=>`Argument \\`${u.green(o)}\\` is required because argument \\`${u.green(l)}\\` was provided.`);\n        }\n    }\n}\nfunction ga(e) {\n    return e.kind === \"list\" ? `${ga(e.elementType)}[]` : e.name;\n}\nfunction Gd(e, r) {\n    let t = e.argument.name, n = r.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject();\n    n && n.getDeepFieldValue(e.argumentPath)?.markAsError(), r.addErrorMessage((i)=>{\n        let o = Cn(\"or\", e.argument.typeNames.map((s)=>i.green(s)));\n        return `Argument \\`${i.bold(t)}\\`: Invalid value provided. Expected ${o}, provided ${i.red(e.inferredType)}.`;\n    });\n}\nfunction Qd(e, r) {\n    let t = e.argument.name, n = r.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject();\n    n && n.getDeepFieldValue(e.argumentPath)?.markAsError(), r.addErrorMessage((i)=>{\n        let o = [\n            `Invalid value for argument \\`${i.bold(t)}\\``\n        ];\n        if (e.underlyingError && o.push(`: ${e.underlyingError}`), o.push(\".\"), e.argument.typeNames.length > 0) {\n            let s = Cn(\"or\", e.argument.typeNames.map((a)=>i.green(a)));\n            o.push(` Expected ${s}.`);\n        }\n        return o.join(\"\");\n    });\n}\nfunction Wd(e, r) {\n    let t = e.argument.name, n = r.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject(), i;\n    if (n) {\n        let s = n.getDeepField(e.argumentPath)?.value;\n        s?.markAsError(), s instanceof Q && (i = s.text);\n    }\n    r.addErrorMessage((o)=>{\n        let s = [\n            \"Unable to fit value\"\n        ];\n        return i && s.push(o.red(i)), s.push(`into a 64-bit signed integer for field \\`${o.bold(t)}\\``), s.join(\" \");\n    });\n}\nfunction Jd(e, r) {\n    let t = e.argumentPath[e.argumentPath.length - 1], n = r.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject();\n    if (n) {\n        let i = n.getDeepFieldValue(e.argumentPath)?.asObject();\n        i && ba(i, e.inputType);\n    }\n    r.addErrorMessage((i)=>{\n        let o = [\n            `Argument \\`${i.bold(t)}\\` of type ${i.bold(e.inputType.name)} needs`\n        ];\n        return e.constraints.minFieldCount === 1 ? e.constraints.requiredFields ? o.push(`${i.green(\"at least one of\")} ${Cn(\"or\", e.constraints.requiredFields.map((s)=>`\\`${i.bold(s)}\\``))} arguments.`) : o.push(`${i.green(\"at least one\")} argument.`) : o.push(`${i.green(`at least ${e.constraints.minFieldCount}`)} arguments.`), o.push(dt(i)), o.join(\" \");\n    });\n}\nfunction Hd(e, r) {\n    let t = e.argumentPath[e.argumentPath.length - 1], n = r.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject(), i = [];\n    if (n) {\n        let o = n.getDeepFieldValue(e.argumentPath)?.asObject();\n        o && (o.markAsError(), i = Object.keys(o.getFields()));\n    }\n    r.addErrorMessage((o)=>{\n        let s = [\n            `Argument \\`${o.bold(t)}\\` of type ${o.bold(e.inputType.name)} needs`\n        ];\n        return e.constraints.minFieldCount === 1 && e.constraints.maxFieldCount == 1 ? s.push(`${o.green(\"exactly one\")} argument,`) : e.constraints.maxFieldCount == 1 ? s.push(`${o.green(\"at most one\")} argument,`) : s.push(`${o.green(`at most ${e.constraints.maxFieldCount}`)} arguments,`), s.push(`but you provided ${Cn(\"and\", i.map((a)=>o.red(a)))}. Please choose`), e.constraints.maxFieldCount === 1 ? s.push(\"one.\") : s.push(`${e.constraints.maxFieldCount}.`), s.join(\" \");\n    });\n}\nfunction ha(e, r) {\n    for (let t of r.fields)e.hasField(t.name) || e.addSuggestion(new ue(t.name, \"true\"));\n}\nfunction Kd(e, r) {\n    for (let t of r.fields)t.isRelation && !e.hasField(t.name) && e.addSuggestion(new ue(t.name, \"true\"));\n}\nfunction Yd(e, r) {\n    for (let t of r.fields)!e.hasField(t.name) && !t.isRelation && e.addSuggestion(new ue(t.name, \"true\"));\n}\nfunction zd(e, r) {\n    for (let t of r)e.hasField(t.name) || e.addSuggestion(new ue(t.name, t.typeNames.join(\" | \")));\n}\nfunction ya(e, r) {\n    let [t, n] = Or(e), i = r.arguments.getDeepSubSelectionValue(t)?.asObject();\n    if (!i) return {\n        parentKind: \"unknown\",\n        fieldName: n\n    };\n    let o = i.getFieldValue(\"select\")?.asObject(), s = i.getFieldValue(\"include\")?.asObject(), a = i.getFieldValue(\"omit\")?.asObject(), l = o?.getField(n);\n    return o && l ? {\n        parentKind: \"select\",\n        parent: o,\n        field: l,\n        fieldName: n\n    } : (l = s?.getField(n), s && l ? {\n        parentKind: \"include\",\n        field: l,\n        parent: s,\n        fieldName: n\n    } : (l = a?.getField(n), a && l ? {\n        parentKind: \"omit\",\n        field: l,\n        parent: a,\n        fieldName: n\n    } : {\n        parentKind: \"unknown\",\n        fieldName: n\n    }));\n}\nfunction ba(e, r) {\n    if (r.kind === \"object\") for (let t of r.fields)e.hasField(t.name) || e.addSuggestion(new ue(t.name, t.typeNames.join(\" | \")));\n}\nfunction Or(e) {\n    let r = [\n        ...e\n    ], t = r.pop();\n    if (!t) throw new Error(\"unexpected empty path\");\n    return [\n        r,\n        t\n    ];\n}\nfunction dt({ green: e, enabled: r }) {\n    return \"Available options are \" + (r ? `listed in ${e(\"green\")}` : \"marked with ?\") + \".\";\n}\nfunction Cn(e, r) {\n    if (r.length === 1) return r[0];\n    let t = [\n        ...r\n    ], n = t.pop();\n    return `${t.join(\", \")} ${e} ${n}`;\n}\nvar Zd = 3;\nfunction Xd(e, r) {\n    let t = 1 / 0, n;\n    for (let i of r){\n        let o = (0, ma.default)(e, i);\n        o > Zd || o < t && (t = o, n = i);\n    }\n    return n;\n}\nvar mt = class {\n    constructor(r, t, n, i, o){\n        this.modelName = r, this.name = t, this.typeName = n, this.isList = i, this.isEnum = o;\n    }\n    _toGraphQLInputType() {\n        let r = this.isList ? \"List\" : \"\", t = this.isEnum ? \"Enum\" : \"\";\n        return `${r}${t}${this.typeName}FieldRefInput<${this.modelName}>`;\n    }\n};\nfunction _r(e) {\n    return e instanceof mt;\n}\nvar In = Symbol(), zi = new WeakMap, Me = class {\n    constructor(r){\n        r === In ? zi.set(this, `Prisma.${this._getName()}`) : zi.set(this, `new Prisma.${this._getNamespace()}.${this._getName()}()`);\n    }\n    _getName() {\n        return this.constructor.name;\n    }\n    toString() {\n        return zi.get(this);\n    }\n}, ft = class extends Me {\n    _getNamespace() {\n        return \"NullTypes\";\n    }\n}, gt = class extends ft {\n    #e;\n};\nZi(gt, \"DbNull\");\nvar ht = class extends ft {\n    #e;\n};\nZi(ht, \"JsonNull\");\nvar yt = class extends ft {\n    #e;\n};\nZi(yt, \"AnyNull\");\nvar kn = {\n    classes: {\n        DbNull: gt,\n        JsonNull: ht,\n        AnyNull: yt\n    },\n    instances: {\n        DbNull: new gt(In),\n        JsonNull: new ht(In),\n        AnyNull: new yt(In)\n    }\n};\nfunction Zi(e, r) {\n    Object.defineProperty(e, \"name\", {\n        value: r,\n        configurable: !0\n    });\n}\nvar Ea = \": \", Dn = class {\n    constructor(r, t){\n        this.hasError = !1;\n        this.name = r;\n        this.value = t;\n    }\n    markAsError() {\n        this.hasError = !0;\n    }\n    getPrintWidth() {\n        return this.name.length + this.value.getPrintWidth() + Ea.length;\n    }\n    write(r) {\n        let t = new Te(this.name);\n        this.hasError && t.underline().setColor(r.context.colors.red), r.write(t).write(Ea).write(this.value);\n    }\n};\nvar Xi = class {\n    constructor(r){\n        this.errorMessages = [];\n        this.arguments = r;\n    }\n    write(r) {\n        r.write(this.arguments);\n    }\n    addErrorMessage(r) {\n        this.errorMessages.push(r);\n    }\n    renderAllMessages(r) {\n        return this.errorMessages.map((t)=>t(r)).join(`\n`);\n    }\n};\nfunction Nr(e) {\n    return new Xi(wa(e));\n}\nfunction wa(e) {\n    let r = new Dr;\n    for (let [t, n] of Object.entries(e)){\n        let i = new Dn(t, xa(n));\n        r.addField(i);\n    }\n    return r;\n}\nfunction xa(e) {\n    if (typeof e == \"string\") return new Q(JSON.stringify(e));\n    if (typeof e == \"number\" || typeof e == \"boolean\") return new Q(String(e));\n    if (typeof e == \"bigint\") return new Q(`${e}n`);\n    if (e === null) return new Q(\"null\");\n    if (e === void 0) return new Q(\"undefined\");\n    if (Rr(e)) return new Q(`new Prisma.Decimal(\"${e.toFixed()}\")`);\n    if (e instanceof Uint8Array) return Buffer.isBuffer(e) ? new Q(`Buffer.alloc(${e.byteLength})`) : new Q(`new Uint8Array(${e.byteLength})`);\n    if (e instanceof Date) {\n        let r = wn(e) ? e.toISOString() : \"Invalid Date\";\n        return new Q(`new Date(\"${r}\")`);\n    }\n    return e instanceof Me ? new Q(`Prisma.${e._getName()}`) : _r(e) ? new Q(`prisma.${Ye(e.modelName)}.$fields.${e.name}`) : Array.isArray(e) ? em(e) : typeof e == \"object\" ? wa(e) : new Q(Object.prototype.toString.call(e));\n}\nfunction em(e) {\n    let r = new kr;\n    for (let t of e)r.addItem(xa(t));\n    return r;\n}\nfunction On(e, r) {\n    let t = r === \"pretty\" ? da : An, n = e.renderAllMessages(t), i = new Cr(0, {\n        colors: t\n    }).write(e).toString();\n    return {\n        message: n,\n        args: i\n    };\n}\nfunction _n({ args: e, errors: r, errorFormat: t, callsite: n, originalMethod: i, clientVersion: o, globalOmit: s }) {\n    let a = Nr(e);\n    for (let p of r)Tn(p, a, s);\n    let { message: l, args: u } = On(a, t), c = Pn({\n        message: l,\n        callsite: n,\n        originalMethod: i,\n        showColors: t === \"pretty\",\n        callArguments: u\n    });\n    throw new Z(c, {\n        clientVersion: o\n    });\n}\nfunction Se(e) {\n    return e.replace(/^./, (r)=>r.toLowerCase());\n}\nfunction Pa(e, r, t) {\n    let n = Se(t);\n    return !r.result || !(r.result.$allModels || r.result[n]) ? e : rm({\n        ...e,\n        ...va(r.name, e, r.result.$allModels),\n        ...va(r.name, e, r.result[n])\n    });\n}\nfunction rm(e) {\n    let r = new Pe, t = (n, i)=>r.getOrCreate(n, ()=>i.has(n) ? [\n                n\n            ] : (i.add(n), e[n] ? e[n].needs.flatMap((o)=>t(o, i)) : [\n                n\n            ]));\n    return xr(e, (n)=>({\n            ...n,\n            needs: t(n.name, new Set)\n        }));\n}\nfunction va(e, r, t) {\n    return t ? xr(t, ({ needs: n, compute: i }, o)=>({\n            name: o,\n            needs: n ? Object.keys(n).filter((s)=>n[s]) : [],\n            compute: tm(r, o, i)\n        })) : {};\n}\nfunction tm(e, r, t) {\n    let n = e?.[r]?.compute;\n    return n ? (i)=>t({\n            ...i,\n            [r]: n(i)\n        }) : t;\n}\nfunction Ta(e, r) {\n    if (!r) return e;\n    let t = {\n        ...e\n    };\n    for (let n of Object.values(r))if (e[n.name]) for (let i of n.needs)t[i] = !0;\n    return t;\n}\nfunction Sa(e, r) {\n    if (!r) return e;\n    let t = {\n        ...e\n    };\n    for (let n of Object.values(r))if (!e[n.name]) for (let i of n.needs)delete t[i];\n    return t;\n}\nvar Nn = class {\n    constructor(r, t){\n        this.computedFieldsCache = new Pe;\n        this.modelExtensionsCache = new Pe;\n        this.queryCallbacksCache = new Pe;\n        this.clientExtensions = ut(()=>this.extension.client ? {\n                ...this.previous?.getAllClientExtensions(),\n                ...this.extension.client\n            } : this.previous?.getAllClientExtensions());\n        this.batchCallbacks = ut(()=>{\n            let r = this.previous?.getAllBatchQueryCallbacks() ?? [], t = this.extension.query?.$__internalBatch;\n            return t ? r.concat(t) : r;\n        });\n        this.extension = r;\n        this.previous = t;\n    }\n    getAllComputedFields(r) {\n        return this.computedFieldsCache.getOrCreate(r, ()=>Pa(this.previous?.getAllComputedFields(r), this.extension, r));\n    }\n    getAllClientExtensions() {\n        return this.clientExtensions.get();\n    }\n    getAllModelExtensions(r) {\n        return this.modelExtensionsCache.getOrCreate(r, ()=>{\n            let t = Se(r);\n            return !this.extension.model || !(this.extension.model[t] || this.extension.model.$allModels) ? this.previous?.getAllModelExtensions(r) : {\n                ...this.previous?.getAllModelExtensions(r),\n                ...this.extension.model.$allModels,\n                ...this.extension.model[t]\n            };\n        });\n    }\n    getAllQueryCallbacks(r, t) {\n        return this.queryCallbacksCache.getOrCreate(`${r}:${t}`, ()=>{\n            let n = this.previous?.getAllQueryCallbacks(r, t) ?? [], i = [], o = this.extension.query;\n            return !o || !(o[r] || o.$allModels || o[t] || o.$allOperations) ? n : (o[r] !== void 0 && (o[r][t] !== void 0 && i.push(o[r][t]), o[r].$allOperations !== void 0 && i.push(o[r].$allOperations)), r !== \"$none\" && o.$allModels !== void 0 && (o.$allModels[t] !== void 0 && i.push(o.$allModels[t]), o.$allModels.$allOperations !== void 0 && i.push(o.$allModels.$allOperations)), o[t] !== void 0 && i.push(o[t]), o.$allOperations !== void 0 && i.push(o.$allOperations), n.concat(i));\n        });\n    }\n    getAllBatchQueryCallbacks() {\n        return this.batchCallbacks.get();\n    }\n}, Lr = class e {\n    constructor(r){\n        this.head = r;\n    }\n    static empty() {\n        return new e;\n    }\n    static single(r) {\n        return new e(new Nn(r));\n    }\n    isEmpty() {\n        return this.head === void 0;\n    }\n    append(r) {\n        return new e(new Nn(r, this.head));\n    }\n    getAllComputedFields(r) {\n        return this.head?.getAllComputedFields(r);\n    }\n    getAllClientExtensions() {\n        return this.head?.getAllClientExtensions();\n    }\n    getAllModelExtensions(r) {\n        return this.head?.getAllModelExtensions(r);\n    }\n    getAllQueryCallbacks(r, t) {\n        return this.head?.getAllQueryCallbacks(r, t) ?? [];\n    }\n    getAllBatchQueryCallbacks() {\n        return this.head?.getAllBatchQueryCallbacks() ?? [];\n    }\n};\nvar Ln = class {\n    constructor(r){\n        this.name = r;\n    }\n};\nfunction Ra(e) {\n    return e instanceof Ln;\n}\nfunction Aa(e) {\n    return new Ln(e);\n}\nvar Ca = Symbol(), bt = class {\n    constructor(r){\n        if (r !== Ca) throw new Error(\"Skip instance can not be constructed directly\");\n    }\n    ifUndefined(r) {\n        return r === void 0 ? Fn : r;\n    }\n}, Fn = new bt(Ca);\nfunction Re(e) {\n    return e instanceof bt;\n}\nvar nm = {\n    findUnique: \"findUnique\",\n    findUniqueOrThrow: \"findUniqueOrThrow\",\n    findFirst: \"findFirst\",\n    findFirstOrThrow: \"findFirstOrThrow\",\n    findMany: \"findMany\",\n    count: \"aggregate\",\n    create: \"createOne\",\n    createMany: \"createMany\",\n    createManyAndReturn: \"createManyAndReturn\",\n    update: \"updateOne\",\n    updateMany: \"updateMany\",\n    updateManyAndReturn: \"updateManyAndReturn\",\n    upsert: \"upsertOne\",\n    delete: \"deleteOne\",\n    deleteMany: \"deleteMany\",\n    executeRaw: \"executeRaw\",\n    queryRaw: \"queryRaw\",\n    aggregate: \"aggregate\",\n    groupBy: \"groupBy\",\n    runCommandRaw: \"runCommandRaw\",\n    findRaw: \"findRaw\",\n    aggregateRaw: \"aggregateRaw\"\n}, Ia = \"explicitly `undefined` values are not allowed\";\nfunction Mn({ modelName: e, action: r, args: t, runtimeDataModel: n, extensions: i = Lr.empty(), callsite: o, clientMethod: s, errorFormat: a, clientVersion: l, previewFeatures: u, globalOmit: c }) {\n    let p = new eo({\n        runtimeDataModel: n,\n        modelName: e,\n        action: r,\n        rootArgs: t,\n        callsite: o,\n        extensions: i,\n        selectionPath: [],\n        argumentPath: [],\n        originalMethod: s,\n        errorFormat: a,\n        clientVersion: l,\n        previewFeatures: u,\n        globalOmit: c\n    });\n    return {\n        modelName: e,\n        action: nm[r],\n        query: Et(t, p)\n    };\n}\nfunction Et({ select: e, include: r, ...t } = {}, n) {\n    let i = t.omit;\n    return delete t.omit, {\n        arguments: Da(t, n),\n        selection: im(e, r, i, n)\n    };\n}\nfunction im(e, r, t, n) {\n    return e ? (r ? n.throwValidationError({\n        kind: \"MutuallyExclusiveFields\",\n        firstField: \"include\",\n        secondField: \"select\",\n        selectionPath: n.getSelectionPath()\n    }) : t && n.throwValidationError({\n        kind: \"MutuallyExclusiveFields\",\n        firstField: \"omit\",\n        secondField: \"select\",\n        selectionPath: n.getSelectionPath()\n    }), lm(e, n)) : om(n, r, t);\n}\nfunction om(e, r, t) {\n    let n = {};\n    return e.modelOrType && !e.isRawAction() && (n.$composites = !0, n.$scalars = !0), r && sm(n, r, e), am(n, t, e), n;\n}\nfunction sm(e, r, t) {\n    for (let [n, i] of Object.entries(r)){\n        if (Re(i)) continue;\n        let o = t.nestSelection(n);\n        if (ro(i, o), i === !1 || i === void 0) {\n            e[n] = !1;\n            continue;\n        }\n        let s = t.findField(n);\n        if (s && s.kind !== \"object\" && t.throwValidationError({\n            kind: \"IncludeOnScalar\",\n            selectionPath: t.getSelectionPath().concat(n),\n            outputType: t.getOutputTypeDescription()\n        }), s) {\n            e[n] = Et(i === !0 ? {} : i, o);\n            continue;\n        }\n        if (i === !0) {\n            e[n] = !0;\n            continue;\n        }\n        e[n] = Et(i, o);\n    }\n}\nfunction am(e, r, t) {\n    let n = t.getComputedFields(), i = {\n        ...t.getGlobalOmit(),\n        ...r\n    }, o = Sa(i, n);\n    for (let [s, a] of Object.entries(o)){\n        if (Re(a)) continue;\n        ro(a, t.nestSelection(s));\n        let l = t.findField(s);\n        n?.[s] && !l || (e[s] = !a);\n    }\n}\nfunction lm(e, r) {\n    let t = {}, n = r.getComputedFields(), i = Ta(e, n);\n    for (let [o, s] of Object.entries(i)){\n        if (Re(s)) continue;\n        let a = r.nestSelection(o);\n        ro(s, a);\n        let l = r.findField(o);\n        if (!(n?.[o] && !l)) {\n            if (s === !1 || s === void 0 || Re(s)) {\n                t[o] = !1;\n                continue;\n            }\n            if (s === !0) {\n                l?.kind === \"object\" ? t[o] = Et({}, a) : t[o] = !0;\n                continue;\n            }\n            t[o] = Et(s, a);\n        }\n    }\n    return t;\n}\nfunction ka(e, r) {\n    if (e === null) return null;\n    if (typeof e == \"string\" || typeof e == \"number\" || typeof e == \"boolean\") return e;\n    if (typeof e == \"bigint\") return {\n        $type: \"BigInt\",\n        value: String(e)\n    };\n    if (Sr(e)) {\n        if (wn(e)) return {\n            $type: \"DateTime\",\n            value: e.toISOString()\n        };\n        r.throwValidationError({\n            kind: \"InvalidArgumentValue\",\n            selectionPath: r.getSelectionPath(),\n            argumentPath: r.getArgumentPath(),\n            argument: {\n                name: r.getArgumentName(),\n                typeNames: [\n                    \"Date\"\n                ]\n            },\n            underlyingError: \"Provided Date object is invalid\"\n        });\n    }\n    if (Ra(e)) return {\n        $type: \"Param\",\n        value: e.name\n    };\n    if (_r(e)) return {\n        $type: \"FieldRef\",\n        value: {\n            _ref: e.name,\n            _container: e.modelName\n        }\n    };\n    if (Array.isArray(e)) return um(e, r);\n    if (ArrayBuffer.isView(e)) {\n        let { buffer: t, byteOffset: n, byteLength: i } = e;\n        return {\n            $type: \"Bytes\",\n            value: Buffer.from(t, n, i).toString(\"base64\")\n        };\n    }\n    if (cm(e)) return e.values;\n    if (Rr(e)) return {\n        $type: \"Decimal\",\n        value: e.toFixed()\n    };\n    if (e instanceof Me) {\n        if (e !== kn.instances[e._getName()]) throw new Error(\"Invalid ObjectEnumValue\");\n        return {\n            $type: \"Enum\",\n            value: e._getName()\n        };\n    }\n    if (pm(e)) return e.toJSON();\n    if (typeof e == \"object\") return Da(e, r);\n    r.throwValidationError({\n        kind: \"InvalidArgumentValue\",\n        selectionPath: r.getSelectionPath(),\n        argumentPath: r.getArgumentPath(),\n        argument: {\n            name: r.getArgumentName(),\n            typeNames: []\n        },\n        underlyingError: `We could not serialize ${Object.prototype.toString.call(e)} value. Serialize the object to JSON or implement a \".toJSON()\" method on it`\n    });\n}\nfunction Da(e, r) {\n    if (e.$type) return {\n        $type: \"Raw\",\n        value: e\n    };\n    let t = {};\n    for(let n in e){\n        let i = e[n], o = r.nestArgument(n);\n        Re(i) || (i !== void 0 ? t[n] = ka(i, o) : r.isPreviewFeatureOn(\"strictUndefinedChecks\") && r.throwValidationError({\n            kind: \"InvalidArgumentValue\",\n            argumentPath: o.getArgumentPath(),\n            selectionPath: r.getSelectionPath(),\n            argument: {\n                name: r.getArgumentName(),\n                typeNames: []\n            },\n            underlyingError: Ia\n        }));\n    }\n    return t;\n}\nfunction um(e, r) {\n    let t = [];\n    for(let n = 0; n < e.length; n++){\n        let i = r.nestArgument(String(n)), o = e[n];\n        if (o === void 0 || Re(o)) {\n            let s = o === void 0 ? \"undefined\" : \"Prisma.skip\";\n            r.throwValidationError({\n                kind: \"InvalidArgumentValue\",\n                selectionPath: i.getSelectionPath(),\n                argumentPath: i.getArgumentPath(),\n                argument: {\n                    name: `${r.getArgumentName()}[${n}]`,\n                    typeNames: []\n                },\n                underlyingError: `Can not use \\`${s}\\` value within array. Use \\`null\\` or filter out \\`${s}\\` values`\n            });\n        }\n        t.push(ka(o, i));\n    }\n    return t;\n}\nfunction cm(e) {\n    return typeof e == \"object\" && e !== null && e.__prismaRawParameters__ === !0;\n}\nfunction pm(e) {\n    return typeof e == \"object\" && e !== null && typeof e.toJSON == \"function\";\n}\nfunction ro(e, r) {\n    e === void 0 && r.isPreviewFeatureOn(\"strictUndefinedChecks\") && r.throwValidationError({\n        kind: \"InvalidSelectionValue\",\n        selectionPath: r.getSelectionPath(),\n        underlyingError: Ia\n    });\n}\nvar eo = class e {\n    constructor(r){\n        this.params = r;\n        this.params.modelName && (this.modelOrType = this.params.runtimeDataModel.models[this.params.modelName] ?? this.params.runtimeDataModel.types[this.params.modelName]);\n    }\n    throwValidationError(r) {\n        _n({\n            errors: [\n                r\n            ],\n            originalMethod: this.params.originalMethod,\n            args: this.params.rootArgs ?? {},\n            callsite: this.params.callsite,\n            errorFormat: this.params.errorFormat,\n            clientVersion: this.params.clientVersion,\n            globalOmit: this.params.globalOmit\n        });\n    }\n    getSelectionPath() {\n        return this.params.selectionPath;\n    }\n    getArgumentPath() {\n        return this.params.argumentPath;\n    }\n    getArgumentName() {\n        return this.params.argumentPath[this.params.argumentPath.length - 1];\n    }\n    getOutputTypeDescription() {\n        if (!(!this.params.modelName || !this.modelOrType)) return {\n            name: this.params.modelName,\n            fields: this.modelOrType.fields.map((r)=>({\n                    name: r.name,\n                    typeName: \"boolean\",\n                    isRelation: r.kind === \"object\"\n                }))\n        };\n    }\n    isRawAction() {\n        return [\n            \"executeRaw\",\n            \"queryRaw\",\n            \"runCommandRaw\",\n            \"findRaw\",\n            \"aggregateRaw\"\n        ].includes(this.params.action);\n    }\n    isPreviewFeatureOn(r) {\n        return this.params.previewFeatures.includes(r);\n    }\n    getComputedFields() {\n        if (this.params.modelName) return this.params.extensions.getAllComputedFields(this.params.modelName);\n    }\n    findField(r) {\n        return this.modelOrType?.fields.find((t)=>t.name === r);\n    }\n    nestSelection(r) {\n        let t = this.findField(r), n = t?.kind === \"object\" ? t.type : void 0;\n        return new e({\n            ...this.params,\n            modelName: n,\n            selectionPath: this.params.selectionPath.concat(r)\n        });\n    }\n    getGlobalOmit() {\n        return this.params.modelName && this.shouldApplyGlobalOmit() ? this.params.globalOmit?.[Ye(this.params.modelName)] ?? {} : {};\n    }\n    shouldApplyGlobalOmit() {\n        switch(this.params.action){\n            case \"findFirst\":\n            case \"findFirstOrThrow\":\n            case \"findUniqueOrThrow\":\n            case \"findMany\":\n            case \"upsert\":\n            case \"findUnique\":\n            case \"createManyAndReturn\":\n            case \"create\":\n            case \"update\":\n            case \"updateManyAndReturn\":\n            case \"delete\":\n                return !0;\n            case \"executeRaw\":\n            case \"aggregateRaw\":\n            case \"runCommandRaw\":\n            case \"findRaw\":\n            case \"createMany\":\n            case \"deleteMany\":\n            case \"groupBy\":\n            case \"updateMany\":\n            case \"count\":\n            case \"aggregate\":\n            case \"queryRaw\":\n                return !1;\n            default:\n                Ne(this.params.action, \"Unknown action\");\n        }\n    }\n    nestArgument(r) {\n        return new e({\n            ...this.params,\n            argumentPath: this.params.argumentPath.concat(r)\n        });\n    }\n};\nfunction Oa(e) {\n    if (!e._hasPreviewFlag(\"metrics\")) throw new Z(\"`metrics` preview feature must be enabled in order to access metrics API\", {\n        clientVersion: e._clientVersion\n    });\n}\nvar Fr = class {\n    constructor(r){\n        this._client = r;\n    }\n    prometheus(r) {\n        return Oa(this._client), this._client._engine.metrics({\n            format: \"prometheus\",\n            ...r\n        });\n    }\n    json(r) {\n        return Oa(this._client), this._client._engine.metrics({\n            format: \"json\",\n            ...r\n        });\n    }\n};\nfunction _a(e, r) {\n    let t = ut(()=>dm(r));\n    Object.defineProperty(e, \"dmmf\", {\n        get: ()=>t.get()\n    });\n}\nfunction dm(e) {\n    return {\n        datamodel: {\n            models: to(e.models),\n            enums: to(e.enums),\n            types: to(e.types)\n        }\n    };\n}\nfunction to(e) {\n    return Object.entries(e).map(([r, t])=>({\n            name: r,\n            ...t\n        }));\n}\nvar no = new WeakMap, $n = \"$$PrismaTypedSql\", wt = class {\n    constructor(r, t){\n        no.set(this, {\n            sql: r,\n            values: t\n        }), Object.defineProperty(this, $n, {\n            value: $n\n        });\n    }\n    get sql() {\n        return no.get(this).sql;\n    }\n    get values() {\n        return no.get(this).values;\n    }\n};\nfunction Na(e) {\n    return (...r)=>new wt(e, r);\n}\nfunction qn(e) {\n    return e != null && e[$n] === $n;\n}\nvar fu = C(Si());\nvar gu = __webpack_require__(/*! node:async_hooks */ \"node:async_hooks\"), hu = __webpack_require__(/*! node:events */ \"node:events\"), yu = C(__webpack_require__(/*! node:fs */ \"node:fs\")), ti = C(__webpack_require__(/*! node:path */ \"node:path\"));\nvar oe = class e {\n    constructor(r, t){\n        if (r.length - 1 !== t.length) throw r.length === 0 ? new TypeError(\"Expected at least 1 string\") : new TypeError(`Expected ${r.length} strings to have ${r.length - 1} values`);\n        let n = t.reduce((s, a)=>s + (a instanceof e ? a.values.length : 1), 0);\n        this.values = new Array(n), this.strings = new Array(n + 1), this.strings[0] = r[0];\n        let i = 0, o = 0;\n        for(; i < t.length;){\n            let s = t[i++], a = r[i];\n            if (s instanceof e) {\n                this.strings[o] += s.strings[0];\n                let l = 0;\n                for(; l < s.values.length;)this.values[o++] = s.values[l++], this.strings[o] = s.strings[l];\n                this.strings[o] += a;\n            } else this.values[o++] = s, this.strings[o] = a;\n        }\n    }\n    get sql() {\n        let r = this.strings.length, t = 1, n = this.strings[0];\n        for(; t < r;)n += `?${this.strings[t++]}`;\n        return n;\n    }\n    get statement() {\n        let r = this.strings.length, t = 1, n = this.strings[0];\n        for(; t < r;)n += `:${t}${this.strings[t++]}`;\n        return n;\n    }\n    get text() {\n        let r = this.strings.length, t = 1, n = this.strings[0];\n        for(; t < r;)n += `$${t}${this.strings[t++]}`;\n        return n;\n    }\n    inspect() {\n        return {\n            sql: this.sql,\n            statement: this.statement,\n            text: this.text,\n            values: this.values\n        };\n    }\n};\nfunction La(e, r = \",\", t = \"\", n = \"\") {\n    if (e.length === 0) throw new TypeError(\"Expected `join([])` to be called with an array of multiple elements, but got an empty array\");\n    return new oe([\n        t,\n        ...Array(e.length - 1).fill(r),\n        n\n    ], e);\n}\nfunction io(e) {\n    return new oe([\n        e\n    ], []);\n}\nvar Fa = io(\"\");\nfunction oo(e, ...r) {\n    return new oe(e, r);\n}\nfunction xt(e) {\n    return {\n        getKeys () {\n            return Object.keys(e);\n        },\n        getPropertyValue (r) {\n            return e[r];\n        }\n    };\n}\nfunction re(e, r) {\n    return {\n        getKeys () {\n            return [\n                e\n            ];\n        },\n        getPropertyValue () {\n            return r();\n        }\n    };\n}\nfunction lr(e) {\n    let r = new Pe;\n    return {\n        getKeys () {\n            return e.getKeys();\n        },\n        getPropertyValue (t) {\n            return r.getOrCreate(t, ()=>e.getPropertyValue(t));\n        },\n        getPropertyDescriptor (t) {\n            return e.getPropertyDescriptor?.(t);\n        }\n    };\n}\nvar jn = {\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n};\nfunction Vn(e) {\n    let r = new Set(e);\n    return {\n        getPrototypeOf: ()=>Object.prototype,\n        getOwnPropertyDescriptor: ()=>jn,\n        has: (t, n)=>r.has(n),\n        set: (t, n, i)=>r.add(n) && Reflect.set(t, n, i),\n        ownKeys: ()=>[\n                ...r\n            ]\n    };\n}\nvar Ma = Symbol.for(\"nodejs.util.inspect.custom\");\nfunction he(e, r) {\n    let t = mm(r), n = new Set, i = new Proxy(e, {\n        get (o, s) {\n            if (n.has(s)) return o[s];\n            let a = t.get(s);\n            return a ? a.getPropertyValue(s) : o[s];\n        },\n        has (o, s) {\n            if (n.has(s)) return !0;\n            let a = t.get(s);\n            return a ? a.has?.(s) ?? !0 : Reflect.has(o, s);\n        },\n        ownKeys (o) {\n            let s = $a(Reflect.ownKeys(o), t), a = $a(Array.from(t.keys()), t);\n            return [\n                ...new Set([\n                    ...s,\n                    ...a,\n                    ...n\n                ])\n            ];\n        },\n        set (o, s, a) {\n            return t.get(s)?.getPropertyDescriptor?.(s)?.writable === !1 ? !1 : (n.add(s), Reflect.set(o, s, a));\n        },\n        getOwnPropertyDescriptor (o, s) {\n            let a = Reflect.getOwnPropertyDescriptor(o, s);\n            if (a && !a.configurable) return a;\n            let l = t.get(s);\n            return l ? l.getPropertyDescriptor ? {\n                ...jn,\n                ...l?.getPropertyDescriptor(s)\n            } : jn : a;\n        },\n        defineProperty (o, s, a) {\n            return n.add(s), Reflect.defineProperty(o, s, a);\n        },\n        getPrototypeOf: ()=>Object.prototype\n    });\n    return i[Ma] = function() {\n        let o = {\n            ...this\n        };\n        return delete o[Ma], o;\n    }, i;\n}\nfunction mm(e) {\n    let r = new Map;\n    for (let t of e){\n        let n = t.getKeys();\n        for (let i of n)r.set(i, t);\n    }\n    return r;\n}\nfunction $a(e, r) {\n    return e.filter((t)=>r.get(t)?.has?.(t) ?? !0);\n}\nfunction Mr(e) {\n    return {\n        getKeys () {\n            return e;\n        },\n        has () {\n            return !1;\n        },\n        getPropertyValue () {}\n    };\n}\nfunction $r(e, r) {\n    return {\n        batch: e,\n        transaction: r?.kind === \"batch\" ? {\n            isolationLevel: r.options.isolationLevel\n        } : void 0\n    };\n}\nfunction qa(e) {\n    if (e === void 0) return \"\";\n    let r = Nr(e);\n    return new Cr(0, {\n        colors: An\n    }).write(r).toString();\n}\nvar fm = \"P2037\";\nfunction qr({ error: e, user_facing_error: r }, t, n) {\n    return r.error_code ? new z(gm(r, n), {\n        code: r.error_code,\n        clientVersion: t,\n        meta: r.meta,\n        batchRequestIdx: r.batch_request_idx\n    }) : new j(e, {\n        clientVersion: t,\n        batchRequestIdx: r.batch_request_idx\n    });\n}\nfunction gm(e, r) {\n    let t = e.message;\n    return (r === \"postgresql\" || r === \"postgres\" || r === \"mysql\") && e.error_code === fm && (t += `\nPrisma Accelerate has built-in connection pooling to prevent such errors: https://pris.ly/client/error-accelerate`), t;\n}\nvar vt = \"<unknown>\";\nfunction ja(e) {\n    var r = e.split(`\n`);\n    return r.reduce(function(t, n) {\n        var i = bm(n) || wm(n) || Pm(n) || Am(n) || Sm(n);\n        return i && t.push(i), t;\n    }, []);\n}\nvar hm = /^\\s*at (.*?) ?\\(((?:file|https?|blob|chrome-extension|native|eval|webpack|rsc|<anonymous>|\\/|[a-z]:\\\\|\\\\\\\\).*?)(?::(\\d+))?(?::(\\d+))?\\)?\\s*$/i, ym = /\\((\\S*)(?::(\\d+))(?::(\\d+))\\)/;\nfunction bm(e) {\n    var r = hm.exec(e);\n    if (!r) return null;\n    var t = r[2] && r[2].indexOf(\"native\") === 0, n = r[2] && r[2].indexOf(\"eval\") === 0, i = ym.exec(r[2]);\n    return n && i != null && (r[2] = i[1], r[3] = i[2], r[4] = i[3]), {\n        file: t ? null : r[2],\n        methodName: r[1] || vt,\n        arguments: t ? [\n            r[2]\n        ] : [],\n        lineNumber: r[3] ? +r[3] : null,\n        column: r[4] ? +r[4] : null\n    };\n}\nvar Em = /^\\s*at (?:((?:\\[object object\\])?.+) )?\\(?((?:file|ms-appx|https?|webpack|rsc|blob):.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i;\nfunction wm(e) {\n    var r = Em.exec(e);\n    return r ? {\n        file: r[2],\n        methodName: r[1] || vt,\n        arguments: [],\n        lineNumber: +r[3],\n        column: r[4] ? +r[4] : null\n    } : null;\n}\nvar xm = /^\\s*(.*?)(?:\\((.*?)\\))?(?:^|@)((?:file|https?|blob|chrome|webpack|rsc|resource|\\[native).*?|[^@]*bundle)(?::(\\d+))?(?::(\\d+))?\\s*$/i, vm = /(\\S+) line (\\d+)(?: > eval line \\d+)* > eval/i;\nfunction Pm(e) {\n    var r = xm.exec(e);\n    if (!r) return null;\n    var t = r[3] && r[3].indexOf(\" > eval\") > -1, n = vm.exec(r[3]);\n    return t && n != null && (r[3] = n[1], r[4] = n[2], r[5] = null), {\n        file: r[3],\n        methodName: r[1] || vt,\n        arguments: r[2] ? r[2].split(\",\") : [],\n        lineNumber: r[4] ? +r[4] : null,\n        column: r[5] ? +r[5] : null\n    };\n}\nvar Tm = /^\\s*(?:([^@]*)(?:\\((.*?)\\))?@)?(\\S.*?):(\\d+)(?::(\\d+))?\\s*$/i;\nfunction Sm(e) {\n    var r = Tm.exec(e);\n    return r ? {\n        file: r[3],\n        methodName: r[1] || vt,\n        arguments: [],\n        lineNumber: +r[4],\n        column: r[5] ? +r[5] : null\n    } : null;\n}\nvar Rm = /^\\s*at (?:((?:\\[object object\\])?[^\\\\/]+(?: \\[as \\S+\\])?) )?\\(?(.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i;\nfunction Am(e) {\n    var r = Rm.exec(e);\n    return r ? {\n        file: r[2],\n        methodName: r[1] || vt,\n        arguments: [],\n        lineNumber: +r[3],\n        column: r[4] ? +r[4] : null\n    } : null;\n}\nvar so = class {\n    getLocation() {\n        return null;\n    }\n}, ao = class {\n    constructor(){\n        this._error = new Error;\n    }\n    getLocation() {\n        let r = this._error.stack;\n        if (!r) return null;\n        let n = ja(r).find((i)=>{\n            if (!i.file) return !1;\n            let o = Fi(i.file);\n            return o !== \"<anonymous>\" && !o.includes(\"@prisma\") && !o.includes(\"/packages/client/src/runtime/\") && !o.endsWith(\"/runtime/binary.js\") && !o.endsWith(\"/runtime/library.js\") && !o.endsWith(\"/runtime/edge.js\") && !o.endsWith(\"/runtime/edge-esm.js\") && !o.startsWith(\"internal/\") && !i.methodName.includes(\"new \") && !i.methodName.includes(\"getCallSite\") && !i.methodName.includes(\"Proxy.\") && i.methodName.split(\".\").length < 4;\n        });\n        return !n || !n.file ? null : {\n            fileName: n.file,\n            lineNumber: n.lineNumber,\n            columnNumber: n.column\n        };\n    }\n};\nfunction Ze(e) {\n    return e === \"minimal\" ? typeof $EnabledCallSite == \"function\" && e !== \"minimal\" ? new $EnabledCallSite : new so : new ao;\n}\nvar Va = {\n    _avg: !0,\n    _count: !0,\n    _sum: !0,\n    _min: !0,\n    _max: !0\n};\nfunction jr(e = {}) {\n    let r = Im(e);\n    return Object.entries(r).reduce((n, [i, o])=>(Va[i] !== void 0 ? n.select[i] = {\n            select: o\n        } : n[i] = o, n), {\n        select: {}\n    });\n}\nfunction Im(e = {}) {\n    return typeof e._count == \"boolean\" ? {\n        ...e,\n        _count: {\n            _all: e._count\n        }\n    } : e;\n}\nfunction Bn(e = {}) {\n    return (r)=>(typeof e._count == \"boolean\" && (r._count = r._count._all), r);\n}\nfunction Ba(e, r) {\n    let t = Bn(e);\n    return r({\n        action: \"aggregate\",\n        unpacker: t,\n        argsMapper: jr\n    })(e);\n}\nfunction km(e = {}) {\n    let { select: r, ...t } = e;\n    return typeof r == \"object\" ? jr({\n        ...t,\n        _count: r\n    }) : jr({\n        ...t,\n        _count: {\n            _all: !0\n        }\n    });\n}\nfunction Dm(e = {}) {\n    return typeof e.select == \"object\" ? (r)=>Bn(e)(r)._count : (r)=>Bn(e)(r)._count._all;\n}\nfunction Ua(e, r) {\n    return r({\n        action: \"count\",\n        unpacker: Dm(e),\n        argsMapper: km\n    })(e);\n}\nfunction Om(e = {}) {\n    let r = jr(e);\n    if (Array.isArray(r.by)) for (let t of r.by)typeof t == \"string\" && (r.select[t] = !0);\n    else typeof r.by == \"string\" && (r.select[r.by] = !0);\n    return r;\n}\nfunction _m(e = {}) {\n    return (r)=>(typeof e?._count == \"boolean\" && r.forEach((t)=>{\n            t._count = t._count._all;\n        }), r);\n}\nfunction Ga(e, r) {\n    return r({\n        action: \"groupBy\",\n        unpacker: _m(e),\n        argsMapper: Om\n    })(e);\n}\nfunction Qa(e, r, t) {\n    if (r === \"aggregate\") return (n)=>Ba(n, t);\n    if (r === \"count\") return (n)=>Ua(n, t);\n    if (r === \"groupBy\") return (n)=>Ga(n, t);\n}\nfunction Wa(e, r) {\n    let t = r.fields.filter((i)=>!i.relationName), n = Zs(t, \"name\");\n    return new Proxy({}, {\n        get (i, o) {\n            if (o in i || typeof o == \"symbol\") return i[o];\n            let s = n[o];\n            if (s) return new mt(e, o, s.type, s.isList, s.kind === \"enum\");\n        },\n        ...Vn(Object.keys(n))\n    });\n}\nvar Ja = (e)=>Array.isArray(e) ? e : e.split(\".\"), lo = (e, r)=>Ja(r).reduce((t, n)=>t && t[n], e), Ha = (e, r, t)=>Ja(r).reduceRight((n, i, o, s)=>Object.assign({}, lo(e, s.slice(0, o)), {\n            [i]: n\n        }), t);\nfunction Nm(e, r) {\n    return e === void 0 || r === void 0 ? [] : [\n        ...r,\n        \"select\",\n        e\n    ];\n}\nfunction Lm(e, r, t) {\n    return r === void 0 ? e ?? {} : Ha(r, t, e || !0);\n}\nfunction uo(e, r, t, n, i, o) {\n    let a = e._runtimeDataModel.models[r].fields.reduce((l, u)=>({\n            ...l,\n            [u.name]: u\n        }), {});\n    return (l)=>{\n        let u = Ze(e._errorFormat), c = Nm(n, i), p = Lm(l, o, c), d = t({\n            dataPath: c,\n            callsite: u\n        })(p), f = Fm(e, r);\n        return new Proxy(d, {\n            get (h, g) {\n                if (!f.includes(g)) return h[g];\n                let P = [\n                    a[g].type,\n                    t,\n                    g\n                ], R = [\n                    c,\n                    p\n                ];\n                return uo(e, ...P, ...R);\n            },\n            ...Vn([\n                ...f,\n                ...Object.getOwnPropertyNames(d)\n            ])\n        });\n    };\n}\nfunction Fm(e, r) {\n    return e._runtimeDataModel.models[r].fields.filter((t)=>t.kind === \"object\").map((t)=>t.name);\n}\nvar Mm = [\n    \"findUnique\",\n    \"findUniqueOrThrow\",\n    \"findFirst\",\n    \"findFirstOrThrow\",\n    \"create\",\n    \"update\",\n    \"upsert\",\n    \"delete\"\n], $m = [\n    \"aggregate\",\n    \"count\",\n    \"groupBy\"\n];\nfunction co(e, r) {\n    let t = e._extensions.getAllModelExtensions(r) ?? {}, n = [\n        qm(e, r),\n        Vm(e, r),\n        xt(t),\n        re(\"name\", ()=>r),\n        re(\"$name\", ()=>r),\n        re(\"$parent\", ()=>e._appliedParent)\n    ];\n    return he({}, n);\n}\nfunction qm(e, r) {\n    let t = Se(r), n = Object.keys(Ar).concat(\"count\");\n    return {\n        getKeys () {\n            return n;\n        },\n        getPropertyValue (i) {\n            let o = i, s = (a)=>(l)=>{\n                    let u = Ze(e._errorFormat);\n                    return e._createPrismaPromise((c)=>{\n                        let p = {\n                            args: l,\n                            dataPath: [],\n                            action: o,\n                            model: r,\n                            clientMethod: `${t}.${i}`,\n                            jsModelName: t,\n                            transaction: c,\n                            callsite: u\n                        };\n                        return e._request({\n                            ...p,\n                            ...a\n                        });\n                    }, {\n                        action: o,\n                        args: l,\n                        model: r\n                    });\n                };\n            return Mm.includes(o) ? uo(e, r, s) : jm(i) ? Qa(e, i, s) : s({});\n        }\n    };\n}\nfunction jm(e) {\n    return $m.includes(e);\n}\nfunction Vm(e, r) {\n    return lr(re(\"fields\", ()=>{\n        let t = e._runtimeDataModel.models[r];\n        return Wa(r, t);\n    }));\n}\nfunction Ka(e) {\n    return e.replace(/^./, (r)=>r.toUpperCase());\n}\nvar po = Symbol();\nfunction Pt(e) {\n    let r = [\n        Bm(e),\n        Um(e),\n        re(po, ()=>e),\n        re(\"$parent\", ()=>e._appliedParent)\n    ], t = e._extensions.getAllClientExtensions();\n    return t && r.push(xt(t)), he(e, r);\n}\nfunction Bm(e) {\n    let r = Object.getPrototypeOf(e._originalClient), t = [\n        ...new Set(Object.getOwnPropertyNames(r))\n    ];\n    return {\n        getKeys () {\n            return t;\n        },\n        getPropertyValue (n) {\n            return e[n];\n        }\n    };\n}\nfunction Um(e) {\n    let r = Object.keys(e._runtimeDataModel.models), t = r.map(Se), n = [\n        ...new Set(r.concat(t))\n    ];\n    return lr({\n        getKeys () {\n            return n;\n        },\n        getPropertyValue (i) {\n            let o = Ka(i);\n            if (e._runtimeDataModel.models[o] !== void 0) return co(e, o);\n            if (e._runtimeDataModel.models[i] !== void 0) return co(e, i);\n        },\n        getPropertyDescriptor (i) {\n            if (!t.includes(i)) return {\n                enumerable: !1\n            };\n        }\n    });\n}\nfunction Ya(e) {\n    return e[po] ? e[po] : e;\n}\nfunction za(e) {\n    if (typeof e == \"function\") return e(this);\n    if (e.client?.__AccelerateEngine) {\n        let t = e.client.__AccelerateEngine;\n        this._originalClient._engine = new t(this._originalClient._accelerateEngineConfig);\n    }\n    let r = Object.create(this._originalClient, {\n        _extensions: {\n            value: this._extensions.append(e)\n        },\n        _appliedParent: {\n            value: this,\n            configurable: !0\n        },\n        $use: {\n            value: void 0\n        },\n        $on: {\n            value: void 0\n        }\n    });\n    return Pt(r);\n}\nfunction Za({ result: e, modelName: r, select: t, omit: n, extensions: i }) {\n    let o = i.getAllComputedFields(r);\n    if (!o) return e;\n    let s = [], a = [];\n    for (let l of Object.values(o)){\n        if (n) {\n            if (n[l.name]) continue;\n            let u = l.needs.filter((c)=>n[c]);\n            u.length > 0 && a.push(Mr(u));\n        } else if (t) {\n            if (!t[l.name]) continue;\n            let u = l.needs.filter((c)=>!t[c]);\n            u.length > 0 && a.push(Mr(u));\n        }\n        Gm(e, l.needs) && s.push(Qm(l, he(e, s)));\n    }\n    return s.length > 0 || a.length > 0 ? he(e, [\n        ...s,\n        ...a\n    ]) : e;\n}\nfunction Gm(e, r) {\n    return r.every((t)=>Vi(e, t));\n}\nfunction Qm(e, r) {\n    return lr(re(e.name, ()=>e.compute(r)));\n}\nfunction Un({ visitor: e, result: r, args: t, runtimeDataModel: n, modelName: i }) {\n    if (Array.isArray(r)) {\n        for(let s = 0; s < r.length; s++)r[s] = Un({\n            result: r[s],\n            args: t,\n            modelName: i,\n            runtimeDataModel: n,\n            visitor: e\n        });\n        return r;\n    }\n    let o = e(r, i, t) ?? r;\n    return t.include && Xa({\n        includeOrSelect: t.include,\n        result: o,\n        parentModelName: i,\n        runtimeDataModel: n,\n        visitor: e\n    }), t.select && Xa({\n        includeOrSelect: t.select,\n        result: o,\n        parentModelName: i,\n        runtimeDataModel: n,\n        visitor: e\n    }), o;\n}\nfunction Xa({ includeOrSelect: e, result: r, parentModelName: t, runtimeDataModel: n, visitor: i }) {\n    for (let [o, s] of Object.entries(e)){\n        if (!s || r[o] == null || Re(s)) continue;\n        let l = n.models[t].fields.find((c)=>c.name === o);\n        if (!l || l.kind !== \"object\" || !l.relationName) continue;\n        let u = typeof s == \"object\" ? s : {};\n        r[o] = Un({\n            visitor: i,\n            result: r[o],\n            args: u,\n            modelName: l.type,\n            runtimeDataModel: n\n        });\n    }\n}\nfunction el({ result: e, modelName: r, args: t, extensions: n, runtimeDataModel: i, globalOmit: o }) {\n    return n.isEmpty() || e == null || typeof e != \"object\" || !i.models[r] ? e : Un({\n        result: e,\n        args: t ?? {},\n        modelName: r,\n        runtimeDataModel: i,\n        visitor: (a, l, u)=>{\n            let c = Se(l);\n            return Za({\n                result: a,\n                modelName: c,\n                select: u.select,\n                omit: u.select ? void 0 : {\n                    ...o?.[c],\n                    ...u.omit\n                },\n                extensions: n\n            });\n        }\n    });\n}\nvar Wm = [\n    \"$connect\",\n    \"$disconnect\",\n    \"$on\",\n    \"$transaction\",\n    \"$use\",\n    \"$extends\"\n], rl = Wm;\nfunction tl(e) {\n    if (e instanceof oe) return Jm(e);\n    if (qn(e)) return Hm(e);\n    if (Array.isArray(e)) {\n        let t = [\n            e[0]\n        ];\n        for(let n = 1; n < e.length; n++)t[n] = Tt(e[n]);\n        return t;\n    }\n    let r = {};\n    for(let t in e)r[t] = Tt(e[t]);\n    return r;\n}\nfunction Jm(e) {\n    return new oe(e.strings, e.values);\n}\nfunction Hm(e) {\n    return new wt(e.sql, e.values);\n}\nfunction Tt(e) {\n    if (typeof e != \"object\" || e == null || e instanceof Me || _r(e)) return e;\n    if (Rr(e)) return new ve(e.toFixed());\n    if (Sr(e)) return new Date(+e);\n    if (ArrayBuffer.isView(e)) return e.slice(0);\n    if (Array.isArray(e)) {\n        let r = e.length, t;\n        for(t = Array(r); r--;)t[r] = Tt(e[r]);\n        return t;\n    }\n    if (typeof e == \"object\") {\n        let r = {};\n        for(let t in e)t === \"__proto__\" ? Object.defineProperty(r, t, {\n            value: Tt(e[t]),\n            configurable: !0,\n            enumerable: !0,\n            writable: !0\n        }) : r[t] = Tt(e[t]);\n        return r;\n    }\n    Ne(e, \"Unknown value\");\n}\nfunction il(e, r, t, n = 0) {\n    return e._createPrismaPromise((i)=>{\n        let o = r.customDataProxyFetch;\n        return \"transaction\" in r && i !== void 0 && (r.transaction?.kind === \"batch\" && r.transaction.lock.then(), r.transaction = i), n === t.length ? e._executeRequest(r) : t[n]({\n            model: r.model,\n            operation: r.model ? r.action : r.clientMethod,\n            args: tl(r.args ?? {}),\n            __internalParams: r,\n            query: (s, a = r)=>{\n                let l = a.customDataProxyFetch;\n                return a.customDataProxyFetch = ll(o, l), a.args = s, il(e, a, t, n + 1);\n            }\n        });\n    });\n}\nfunction ol(e, r) {\n    let { jsModelName: t, action: n, clientMethod: i } = r, o = t ? n : i;\n    if (e._extensions.isEmpty()) return e._executeRequest(r);\n    let s = e._extensions.getAllQueryCallbacks(t ?? \"$none\", o);\n    return il(e, r, s);\n}\nfunction sl(e) {\n    return (r)=>{\n        let t = {\n            requests: r\n        }, n = r[0].extensions.getAllBatchQueryCallbacks();\n        return n.length ? al(t, n, 0, e) : e(t);\n    };\n}\nfunction al(e, r, t, n) {\n    if (t === r.length) return n(e);\n    let i = e.customDataProxyFetch, o = e.requests[0].transaction;\n    return r[t]({\n        args: {\n            queries: e.requests.map((s)=>({\n                    model: s.modelName,\n                    operation: s.action,\n                    args: s.args\n                })),\n            transaction: o ? {\n                isolationLevel: o.kind === \"batch\" ? o.isolationLevel : void 0\n            } : void 0\n        },\n        __internalParams: e,\n        query (s, a = e) {\n            let l = a.customDataProxyFetch;\n            return a.customDataProxyFetch = ll(i, l), al(a, r, t + 1, n);\n        }\n    });\n}\nvar nl = (e)=>e;\nfunction ll(e = nl, r = nl) {\n    return (t)=>e(r(t));\n}\nvar ul = N(\"prisma:client\"), cl = {\n    Vercel: \"vercel\",\n    \"Netlify CI\": \"netlify\"\n};\nfunction pl({ postinstall: e, ciName: r, clientVersion: t }) {\n    if (ul(\"checkPlatformCaching:postinstall\", e), ul(\"checkPlatformCaching:ciName\", r), e === !0 && r && r in cl) {\n        let n = `Prisma has detected that this project was built on ${r}, which caches dependencies. This leads to an outdated Prisma Client because Prisma's auto-generation isn't triggered. To fix this, make sure to run the \\`prisma generate\\` command during the build process.\n\nLearn how: https://pris.ly/d/${cl[r]}-build`;\n        throw console.error(n), new T(n, t);\n    }\n}\nfunction dl(e, r) {\n    return e ? e.datasources ? e.datasources : e.datasourceUrl ? {\n        [r[0]]: {\n            url: e.datasourceUrl\n        }\n    } : {} : {};\n}\nvar Km = ()=>globalThis.process?.release?.name === \"node\", Ym = ()=>!!globalThis.Bun || !!globalThis.process?.versions?.bun, zm = ()=>!!globalThis.Deno, Zm = ()=>typeof globalThis.Netlify == \"object\", Xm = ()=>typeof globalThis.EdgeRuntime == \"object\", ef = ()=>globalThis.navigator?.userAgent === \"Cloudflare-Workers\";\nfunction rf() {\n    return [\n        [\n            Zm,\n            \"netlify\"\n        ],\n        [\n            Xm,\n            \"edge-light\"\n        ],\n        [\n            ef,\n            \"workerd\"\n        ],\n        [\n            zm,\n            \"deno\"\n        ],\n        [\n            Ym,\n            \"bun\"\n        ],\n        [\n            Km,\n            \"node\"\n        ]\n    ].flatMap((t)=>t[0]() ? [\n            t[1]\n        ] : []).at(0) ?? \"\";\n}\nvar tf = {\n    node: \"Node.js\",\n    workerd: \"Cloudflare Workers\",\n    deno: \"Deno and Deno Deploy\",\n    netlify: \"Netlify Edge Functions\",\n    \"edge-light\": \"Edge Runtime (Vercel Edge Functions, Vercel Edge Middleware, Next.js (Pages Router) Edge API Routes, Next.js (App Router) Edge Route Handlers or Next.js Middleware)\"\n};\nfunction Gn() {\n    let e = rf();\n    return {\n        id: e,\n        prettyName: tf[e] || e,\n        isEdge: [\n            \"workerd\",\n            \"deno\",\n            \"netlify\",\n            \"edge-light\"\n        ].includes(e)\n    };\n}\nvar yl = C(__webpack_require__(/*! node:fs */ \"node:fs\")), St = C(__webpack_require__(/*! node:path */ \"node:path\"));\nfunction Qn(e) {\n    let { runtimeBinaryTarget: r } = e;\n    return `Add \"${r}\" to \\`binaryTargets\\` in the \"schema.prisma\" file and run \\`prisma generate\\` after saving it:\n\n${nf(e)}`;\n}\nfunction nf(e) {\n    let { generator: r, generatorBinaryTargets: t, runtimeBinaryTarget: n } = e, i = {\n        fromEnvVar: null,\n        value: n\n    }, o = [\n        ...t,\n        i\n    ];\n    return _i({\n        ...r,\n        binaryTargets: o\n    });\n}\nfunction Xe(e) {\n    let { runtimeBinaryTarget: r } = e;\n    return `Prisma Client could not locate the Query Engine for runtime \"${r}\".`;\n}\nfunction er(e) {\n    let { searchedLocations: r } = e;\n    return `The following locations have been searched:\n${[\n        ...new Set(r)\n    ].map((i)=>`  ${i}`).join(`\n`)}`;\n}\nfunction ml(e) {\n    let { runtimeBinaryTarget: r } = e;\n    return `${Xe(e)}\n\nThis happened because \\`binaryTargets\\` have been pinned, but the actual deployment also required \"${r}\".\n${Qn(e)}\n\n${er(e)}`;\n}\nfunction Wn(e) {\n    return `We would appreciate if you could take the time to share some information with us.\nPlease help us by answering a few questions: https://pris.ly/${e}`;\n}\nfunction Jn(e) {\n    let { errorStack: r } = e;\n    return r?.match(/\\/\\.next|\\/next@|\\/next\\//) ? `\n\nWe detected that you are using Next.js, learn how to fix this: https://pris.ly/d/engine-not-found-nextjs.` : \"\";\n}\nfunction fl(e) {\n    let { queryEngineName: r } = e;\n    return `${Xe(e)}${Jn(e)}\n\nThis is likely caused by a bundler that has not copied \"${r}\" next to the resulting bundle.\nEnsure that \"${r}\" has been copied next to the bundle or in \"${e.expectedLocation}\".\n\n${Wn(\"engine-not-found-bundler-investigation\")}\n\n${er(e)}`;\n}\nfunction gl(e) {\n    let { runtimeBinaryTarget: r, generatorBinaryTargets: t } = e, n = t.find((i)=>i.native);\n    return `${Xe(e)}\n\nThis happened because Prisma Client was generated for \"${n?.value ?? \"unknown\"}\", but the actual deployment required \"${r}\".\n${Qn(e)}\n\n${er(e)}`;\n}\nfunction hl(e) {\n    let { queryEngineName: r } = e;\n    return `${Xe(e)}${Jn(e)}\n\nThis is likely caused by tooling that has not copied \"${r}\" to the deployment folder.\nEnsure that you ran \\`prisma generate\\` and that \"${r}\" has been copied to \"${e.expectedLocation}\".\n\n${Wn(\"engine-not-found-tooling-investigation\")}\n\n${er(e)}`;\n}\nvar of = N(\"prisma:client:engines:resolveEnginePath\"), sf = ()=>new RegExp(\"runtime[\\\\\\\\/]library\\\\.m?js$\");\nasync function bl(e, r) {\n    let t = {\n        binary: process.env.PRISMA_QUERY_ENGINE_BINARY,\n        library: process.env.PRISMA_QUERY_ENGINE_LIBRARY\n    }[e] ?? r.prismaPath;\n    if (t !== void 0) return t;\n    let { enginePath: n, searchedLocations: i } = await af(e, r);\n    if (of(\"enginePath\", n), n !== void 0 && e === \"binary\" && Ai(n), n !== void 0) return r.prismaPath = n;\n    let o = await ir(), s = r.generator?.binaryTargets ?? [], a = s.some((d)=>d.native), l = !s.some((d)=>d.value === o), u = __filename.match(sf()) === null, c = {\n        searchedLocations: i,\n        generatorBinaryTargets: s,\n        generator: r.generator,\n        runtimeBinaryTarget: o,\n        queryEngineName: El(e, o),\n        expectedLocation: St.default.relative(process.cwd(), r.dirname),\n        errorStack: new Error().stack\n    }, p;\n    throw a && l ? p = gl(c) : l ? p = ml(c) : u ? p = fl(c) : p = hl(c), new T(p, r.clientVersion);\n}\nasync function af(e, r) {\n    let t = await ir(), n = [], i = [\n        r.dirname,\n        St.default.resolve(__dirname, \"..\"),\n        r.generator?.output?.value ?? __dirname,\n        St.default.resolve(__dirname, \"../../../.prisma/client\"),\n        \"/tmp/prisma-engines\",\n        r.cwd\n    ];\n    __filename.includes(\"resolveEnginePath\") && i.push(gs());\n    for (let o of i){\n        let s = El(e, t), a = St.default.join(o, s);\n        if (n.push(o), yl.default.existsSync(a)) return {\n            enginePath: a,\n            searchedLocations: n\n        };\n    }\n    return {\n        enginePath: void 0,\n        searchedLocations: n\n    };\n}\nfunction El(e, r) {\n    return e === \"library\" ? Gt(r, \"fs\") : `query-engine-${r}${r === \"windows\" ? \".exe\" : \"\"}`;\n}\nvar mo = C(Li());\nfunction wl(e) {\n    return e ? e.replace(/\".*\"/g, '\"X\"').replace(/[\\s:\\[]([+-]?([0-9]*[.])?[0-9]+)/g, (r)=>`${r[0]}5`) : \"\";\n}\nfunction xl(e) {\n    return e.split(`\n`).map((r)=>r.replace(/^\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)\\s*/, \"\").replace(/\\+\\d+\\s*ms$/, \"\")).join(`\n`);\n}\nvar vl = C(Fs());\nfunction Pl({ title: e, user: r = \"prisma\", repo: t = \"prisma\", template: n = \"bug_report.yml\", body: i }) {\n    return (0, vl.default)({\n        user: r,\n        repo: t,\n        template: n,\n        title: e,\n        body: i\n    });\n}\nfunction Tl({ version: e, binaryTarget: r, title: t, description: n, engineVersion: i, database: o, query: s }) {\n    let a = Go(6e3 - (s?.length ?? 0)), l = xl((0, mo.default)(a)), u = n ? `# Description\n\\`\\`\\`\n${n}\n\\`\\`\\`` : \"\", c = (0, mo.default)(`Hi Prisma Team! My Prisma Client just crashed. This is the report:\n## Versions\n\n| Name            | Version            |\n|-----------------|--------------------|\n| Node            | ${process.version?.padEnd(19)}| \n| OS              | ${r?.padEnd(19)}|\n| Prisma Client   | ${e?.padEnd(19)}|\n| Query Engine    | ${i?.padEnd(19)}|\n| Database        | ${o?.padEnd(19)}|\n\n${u}\n\n## Logs\n\\`\\`\\`\n${l}\n\\`\\`\\`\n\n## Client Snippet\n\\`\\`\\`ts\n// PLEASE FILL YOUR CODE SNIPPET HERE\n\\`\\`\\`\n\n## Schema\n\\`\\`\\`prisma\n// PLEASE ADD YOUR SCHEMA HERE IF POSSIBLE\n\\`\\`\\`\n\n## Prisma Engine Query\n\\`\\`\\`\n${s ? wl(s) : \"\"}\n\\`\\`\\`\n`), p = Pl({\n        title: t,\n        body: c\n    });\n    return `${t}\n\nThis is a non-recoverable error which probably happens when the Prisma Query Engine has a panic.\n\n${Y(p)}\n\nIf you want the Prisma team to look into it, please open the link above \\u{1F64F}\nTo increase the chance of success, please post your schema and a snippet of\nhow you used Prisma Client in the issue. \n`;\n}\nvar Sl = \"6.13.0\";\nfunction Vr({ inlineDatasources: e, overrideDatasources: r, env: t, clientVersion: n }) {\n    let i, o = Object.keys(e)[0], s = e[o]?.url, a = r[o]?.url;\n    if (o === void 0 ? i = void 0 : a ? i = a : s?.value ? i = s.value : s?.fromEnvVar && (i = t[s.fromEnvVar]), s?.fromEnvVar !== void 0 && i === void 0) throw new T(`error: Environment variable not found: ${s.fromEnvVar}.`, n);\n    if (i === void 0) throw new T(\"error: Missing URL environment variable, value, or override.\", n);\n    return i;\n}\nvar Hn = class extends Error {\n    constructor(r, t){\n        super(r), this.clientVersion = t.clientVersion, this.cause = t.cause;\n    }\n    get [Symbol.toStringTag]() {\n        return this.name;\n    }\n};\nvar se = class extends Hn {\n    constructor(r, t){\n        super(r, t), this.isRetryable = t.isRetryable ?? !0;\n    }\n};\nfunction A(e, r) {\n    return {\n        ...e,\n        isRetryable: r\n    };\n}\nvar ur = class extends se {\n    constructor(r, t){\n        super(r, A(t, !1));\n        this.name = \"InvalidDatasourceError\";\n        this.code = \"P6001\";\n    }\n};\nx(ur, \"InvalidDatasourceError\");\nfunction Rl(e) {\n    let r = {\n        clientVersion: e.clientVersion\n    }, t = Object.keys(e.inlineDatasources)[0], n = Vr({\n        inlineDatasources: e.inlineDatasources,\n        overrideDatasources: e.overrideDatasources,\n        clientVersion: e.clientVersion,\n        env: {\n            ...e.env,\n            ...typeof process < \"u\" ? process.env : {}\n        }\n    }), i;\n    try {\n        i = new URL(n);\n    } catch  {\n        throw new ur(`Error validating datasource \\`${t}\\`: the URL must start with the protocol \\`prisma://\\``, r);\n    }\n    let { protocol: o, searchParams: s } = i;\n    if (o !== \"prisma:\" && o !== sn) throw new ur(`Error validating datasource \\`${t}\\`: the URL must start with the protocol \\`prisma://\\` or \\`prisma+postgres://\\``, r);\n    let a = s.get(\"api_key\");\n    if (a === null || a.length < 1) throw new ur(`Error validating datasource \\`${t}\\`: the URL must contain a valid API key`, r);\n    let l = ki(i) ? \"http:\" : \"https:\", u = new URL(i.href.replace(o, l));\n    return {\n        apiKey: a,\n        url: u\n    };\n}\nvar Al = C(on()), Kn = class {\n    constructor({ apiKey: r, tracingHelper: t, logLevel: n, logQueries: i, engineHash: o }){\n        this.apiKey = r, this.tracingHelper = t, this.logLevel = n, this.logQueries = i, this.engineHash = o;\n    }\n    build({ traceparent: r, transactionId: t } = {}) {\n        let n = {\n            Accept: \"application/json\",\n            Authorization: `Bearer ${this.apiKey}`,\n            \"Content-Type\": \"application/json\",\n            \"Prisma-Engine-Hash\": this.engineHash,\n            \"Prisma-Engine-Version\": Al.enginesVersion\n        };\n        this.tracingHelper.isEnabled() && (n.traceparent = r ?? this.tracingHelper.getTraceParent()), t && (n[\"X-Transaction-Id\"] = t);\n        let i = this.#e();\n        return i.length > 0 && (n[\"X-Capture-Telemetry\"] = i.join(\", \")), n;\n    }\n    #e() {\n        let r = [];\n        return this.tracingHelper.isEnabled() && r.push(\"tracing\"), this.logLevel && r.push(this.logLevel), this.logQueries && r.push(\"query\"), r;\n    }\n};\nfunction uf(e) {\n    return e[0] * 1e3 + e[1] / 1e6;\n}\nfunction fo(e) {\n    return new Date(uf(e));\n}\nvar Br = class extends se {\n    constructor(r){\n        super(\"This request must be retried\", A(r, !0));\n        this.name = \"ForcedRetryError\";\n        this.code = \"P5001\";\n    }\n};\nx(Br, \"ForcedRetryError\");\nvar cr = class extends se {\n    constructor(r, t){\n        super(r, A(t, !1));\n        this.name = \"NotImplementedYetError\";\n        this.code = \"P5004\";\n    }\n};\nx(cr, \"NotImplementedYetError\");\nvar $ = class extends se {\n    constructor(r, t){\n        super(r, t), this.response = t.response;\n        let n = this.response.headers.get(\"prisma-request-id\");\n        if (n) {\n            let i = `(The request id was: ${n})`;\n            this.message = this.message + \" \" + i;\n        }\n    }\n};\nvar pr = class extends $ {\n    constructor(r){\n        super(\"Schema needs to be uploaded\", A(r, !0));\n        this.name = \"SchemaMissingError\";\n        this.code = \"P5005\";\n    }\n};\nx(pr, \"SchemaMissingError\");\nvar go = \"This request could not be understood by the server\", Rt = class extends $ {\n    constructor(r, t, n){\n        var _temp;\n        _temp = super(t || go, A(r, !1)), this.name = \"BadRequestError\", this.code = \"P5000\", _temp, n && (this.code = n);\n    }\n};\nx(Rt, \"BadRequestError\");\nvar At = class extends $ {\n    constructor(r, t){\n        var _temp;\n        _temp = super(\"Engine not started: healthcheck timeout\", A(r, !0)), this.name = \"HealthcheckTimeoutError\", this.code = \"P5013\", _temp, this.logs = t;\n    }\n};\nx(At, \"HealthcheckTimeoutError\");\nvar Ct = class extends $ {\n    constructor(r, t, n){\n        var _temp;\n        _temp = super(t, A(r, !0)), this.name = \"EngineStartupError\", this.code = \"P5014\", _temp, this.logs = n;\n    }\n};\nx(Ct, \"EngineStartupError\");\nvar It = class extends $ {\n    constructor(r){\n        super(\"Engine version is not supported\", A(r, !1));\n        this.name = \"EngineVersionNotSupportedError\";\n        this.code = \"P5012\";\n    }\n};\nx(It, \"EngineVersionNotSupportedError\");\nvar ho = \"Request timed out\", kt = class extends $ {\n    constructor(r, t = ho){\n        super(t, A(r, !1));\n        this.name = \"GatewayTimeoutError\";\n        this.code = \"P5009\";\n    }\n};\nx(kt, \"GatewayTimeoutError\");\nvar cf = \"Interactive transaction error\", Dt = class extends $ {\n    constructor(r, t = cf){\n        super(t, A(r, !1));\n        this.name = \"InteractiveTransactionError\";\n        this.code = \"P5015\";\n    }\n};\nx(Dt, \"InteractiveTransactionError\");\nvar pf = \"Request parameters are invalid\", Ot = class extends $ {\n    constructor(r, t = pf){\n        super(t, A(r, !1));\n        this.name = \"InvalidRequestError\";\n        this.code = \"P5011\";\n    }\n};\nx(Ot, \"InvalidRequestError\");\nvar yo = \"Requested resource does not exist\", _t = class extends $ {\n    constructor(r, t = yo){\n        super(t, A(r, !1));\n        this.name = \"NotFoundError\";\n        this.code = \"P5003\";\n    }\n};\nx(_t, \"NotFoundError\");\nvar bo = \"Unknown server error\", Ur = class extends $ {\n    constructor(r, t, n){\n        var _temp;\n        _temp = super(t || bo, A(r, !0)), this.name = \"ServerError\", this.code = \"P5006\", _temp, this.logs = n;\n    }\n};\nx(Ur, \"ServerError\");\nvar Eo = \"Unauthorized, check your connection string\", Nt = class extends $ {\n    constructor(r, t = Eo){\n        super(t, A(r, !1));\n        this.name = \"UnauthorizedError\";\n        this.code = \"P5007\";\n    }\n};\nx(Nt, \"UnauthorizedError\");\nvar wo = \"Usage exceeded, retry again later\", Lt = class extends $ {\n    constructor(r, t = wo){\n        super(t, A(r, !0));\n        this.name = \"UsageExceededError\";\n        this.code = \"P5008\";\n    }\n};\nx(Lt, \"UsageExceededError\");\nasync function df(e) {\n    let r;\n    try {\n        r = await e.text();\n    } catch  {\n        return {\n            type: \"EmptyError\"\n        };\n    }\n    try {\n        let t = JSON.parse(r);\n        if (typeof t == \"string\") switch(t){\n            case \"InternalDataProxyError\":\n                return {\n                    type: \"DataProxyError\",\n                    body: t\n                };\n            default:\n                return {\n                    type: \"UnknownTextError\",\n                    body: t\n                };\n        }\n        if (typeof t == \"object\" && t !== null) {\n            if (\"is_panic\" in t && \"message\" in t && \"error_code\" in t) return {\n                type: \"QueryEngineError\",\n                body: t\n            };\n            if (\"EngineNotStarted\" in t || \"InteractiveTransactionMisrouted\" in t || \"InvalidRequestError\" in t) {\n                let n = Object.values(t)[0].reason;\n                return typeof n == \"string\" && ![\n                    \"SchemaMissing\",\n                    \"EngineVersionNotSupported\"\n                ].includes(n) ? {\n                    type: \"UnknownJsonError\",\n                    body: t\n                } : {\n                    type: \"DataProxyError\",\n                    body: t\n                };\n            }\n        }\n        return {\n            type: \"UnknownJsonError\",\n            body: t\n        };\n    } catch  {\n        return r === \"\" ? {\n            type: \"EmptyError\"\n        } : {\n            type: \"UnknownTextError\",\n            body: r\n        };\n    }\n}\nasync function Ft(e, r) {\n    if (e.ok) return;\n    let t = {\n        clientVersion: r,\n        response: e\n    }, n = await df(e);\n    if (n.type === \"QueryEngineError\") throw new z(n.body.message, {\n        code: n.body.error_code,\n        clientVersion: r\n    });\n    if (n.type === \"DataProxyError\") {\n        if (n.body === \"InternalDataProxyError\") throw new Ur(t, \"Internal Data Proxy error\");\n        if (\"EngineNotStarted\" in n.body) {\n            if (n.body.EngineNotStarted.reason === \"SchemaMissing\") return new pr(t);\n            if (n.body.EngineNotStarted.reason === \"EngineVersionNotSupported\") throw new It(t);\n            if (\"EngineStartupError\" in n.body.EngineNotStarted.reason) {\n                let { msg: i, logs: o } = n.body.EngineNotStarted.reason.EngineStartupError;\n                throw new Ct(t, i, o);\n            }\n            if (\"KnownEngineStartupError\" in n.body.EngineNotStarted.reason) {\n                let { msg: i, error_code: o } = n.body.EngineNotStarted.reason.KnownEngineStartupError;\n                throw new T(i, r, o);\n            }\n            if (\"HealthcheckTimeout\" in n.body.EngineNotStarted.reason) {\n                let { logs: i } = n.body.EngineNotStarted.reason.HealthcheckTimeout;\n                throw new At(t, i);\n            }\n        }\n        if (\"InteractiveTransactionMisrouted\" in n.body) {\n            let i = {\n                IDParseError: \"Could not parse interactive transaction ID\",\n                NoQueryEngineFoundError: \"Could not find Query Engine for the specified host and transaction ID\",\n                TransactionStartError: \"Could not start interactive transaction\"\n            };\n            throw new Dt(t, i[n.body.InteractiveTransactionMisrouted.reason]);\n        }\n        if (\"InvalidRequestError\" in n.body) throw new Ot(t, n.body.InvalidRequestError.reason);\n    }\n    if (e.status === 401 || e.status === 403) throw new Nt(t, Gr(Eo, n));\n    if (e.status === 404) return new _t(t, Gr(yo, n));\n    if (e.status === 429) throw new Lt(t, Gr(wo, n));\n    if (e.status === 504) throw new kt(t, Gr(ho, n));\n    if (e.status >= 500) throw new Ur(t, Gr(bo, n));\n    if (e.status >= 400) throw new Rt(t, Gr(go, n));\n}\nfunction Gr(e, r) {\n    return r.type === \"EmptyError\" ? e : `${e}: ${JSON.stringify(r)}`;\n}\nfunction Cl(e) {\n    let r = Math.pow(2, e) * 50, t = Math.ceil(Math.random() * r) - Math.ceil(r / 2), n = r + t;\n    return new Promise((i)=>setTimeout(()=>i(n), n));\n}\nvar $e = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\nfunction Il(e) {\n    let r = new TextEncoder().encode(e), t = \"\", n = r.byteLength, i = n % 3, o = n - i, s, a, l, u, c;\n    for(let p = 0; p < o; p = p + 3)c = r[p] << 16 | r[p + 1] << 8 | r[p + 2], s = (c & 16515072) >> 18, a = (c & 258048) >> 12, l = (c & 4032) >> 6, u = c & 63, t += $e[s] + $e[a] + $e[l] + $e[u];\n    return i == 1 ? (c = r[o], s = (c & 252) >> 2, a = (c & 3) << 4, t += $e[s] + $e[a] + \"==\") : i == 2 && (c = r[o] << 8 | r[o + 1], s = (c & 64512) >> 10, a = (c & 1008) >> 4, l = (c & 15) << 2, t += $e[s] + $e[a] + $e[l] + \"=\"), t;\n}\nfunction kl(e) {\n    if (!!e.generator?.previewFeatures.some((t)=>t.toLowerCase().includes(\"metrics\"))) throw new T(\"The `metrics` preview feature is not yet available with Accelerate.\\nPlease remove `metrics` from the `previewFeatures` in your schema.\\n\\nMore information about Accelerate: https://pris.ly/d/accelerate\", e.clientVersion);\n}\nvar Dl = {\n    \"@prisma/debug\": \"workspace:*\",\n    \"@prisma/engines-version\": \"6.13.0-35.361e86d0ea4987e9f53a565309b3eed797a6bcbd\",\n    \"@prisma/fetch-engine\": \"workspace:*\",\n    \"@prisma/get-platform\": \"workspace:*\"\n};\nvar Mt = class extends se {\n    constructor(r, t){\n        super(`Cannot fetch data from service:\n${r}`, A(t, !0));\n        this.name = \"RequestError\";\n        this.code = \"P5010\";\n    }\n};\nx(Mt, \"RequestError\");\nasync function dr(e, r, t = (n)=>n) {\n    let { clientVersion: n, ...i } = r, o = t(fetch);\n    try {\n        return await o(e, i);\n    } catch (s) {\n        let a = s.message ?? \"Unknown error\";\n        throw new Mt(a, {\n            clientVersion: n,\n            cause: s\n        });\n    }\n}\nvar ff = /^[1-9][0-9]*\\.[0-9]+\\.[0-9]+$/, Ol = N(\"prisma:client:dataproxyEngine\");\nasync function gf(e, r) {\n    let t = Dl[\"@prisma/engines-version\"], n = r.clientVersion ?? \"unknown\";\n    if (process.env.PRISMA_CLIENT_DATA_PROXY_CLIENT_VERSION || globalThis.PRISMA_CLIENT_DATA_PROXY_CLIENT_VERSION) return process.env.PRISMA_CLIENT_DATA_PROXY_CLIENT_VERSION || globalThis.PRISMA_CLIENT_DATA_PROXY_CLIENT_VERSION;\n    if (e.includes(\"accelerate\") && n !== \"0.0.0\" && n !== \"in-memory\") return n;\n    let [i, o] = n?.split(\"-\") ?? [];\n    if (o === void 0 && ff.test(i)) return i;\n    if (o !== void 0 || n === \"0.0.0\" || n === \"in-memory\") {\n        let [s] = t.split(\"-\") ?? [], [a, l, u] = s.split(\".\"), c = hf(`<=${a}.${l}.${u}`), p = await dr(c, {\n            clientVersion: n\n        });\n        if (!p.ok) throw new Error(`Failed to fetch stable Prisma version, unpkg.com status ${p.status} ${p.statusText}, response body: ${await p.text() || \"<empty body>\"}`);\n        let d = await p.text();\n        Ol(\"length of body fetched from unpkg.com\", d.length);\n        let f;\n        try {\n            f = JSON.parse(d);\n        } catch (h) {\n            throw console.error(\"JSON.parse error: body fetched from unpkg.com: \", d), h;\n        }\n        return f.version;\n    }\n    throw new cr(\"Only `major.minor.patch` versions are supported by Accelerate.\", {\n        clientVersion: n\n    });\n}\nasync function _l(e, r) {\n    let t = await gf(e, r);\n    return Ol(\"version\", t), t;\n}\nfunction hf(e) {\n    return encodeURI(`https://unpkg.com/prisma@${e}/package.json`);\n}\nvar Nl = 3, $t = N(\"prisma:client:dataproxyEngine\"), qt = class {\n    constructor(r){\n        this.name = \"DataProxyEngine\";\n        kl(r), this.config = r, this.env = r.env, this.inlineSchema = Il(r.inlineSchema), this.inlineDatasources = r.inlineDatasources, this.inlineSchemaHash = r.inlineSchemaHash, this.clientVersion = r.clientVersion, this.engineHash = r.engineVersion, this.logEmitter = r.logEmitter, this.tracingHelper = r.tracingHelper;\n    }\n    apiKey() {\n        return this.headerBuilder.apiKey;\n    }\n    version() {\n        return this.engineHash;\n    }\n    async start() {\n        this.startPromise !== void 0 && await this.startPromise, this.startPromise = (async ()=>{\n            let { apiKey: r, url: t } = this.getURLAndAPIKey();\n            this.host = t.host, this.protocol = t.protocol, this.headerBuilder = new Kn({\n                apiKey: r,\n                tracingHelper: this.tracingHelper,\n                logLevel: this.config.logLevel ?? \"error\",\n                logQueries: this.config.logQueries,\n                engineHash: this.engineHash\n            }), this.remoteClientVersion = await _l(this.host, this.config), $t(\"host\", this.host), $t(\"protocol\", this.protocol);\n        })(), await this.startPromise;\n    }\n    async stop() {}\n    propagateResponseExtensions(r) {\n        r?.logs?.length && r.logs.forEach((t)=>{\n            switch(t.level){\n                case \"debug\":\n                case \"trace\":\n                    $t(t);\n                    break;\n                case \"error\":\n                case \"warn\":\n                case \"info\":\n                    {\n                        this.logEmitter.emit(t.level, {\n                            timestamp: fo(t.timestamp),\n                            message: t.attributes.message ?? \"\",\n                            target: t.target\n                        });\n                        break;\n                    }\n                case \"query\":\n                    {\n                        this.logEmitter.emit(\"query\", {\n                            query: t.attributes.query ?? \"\",\n                            timestamp: fo(t.timestamp),\n                            duration: t.attributes.duration_ms ?? 0,\n                            params: t.attributes.params ?? \"\",\n                            target: t.target\n                        });\n                        break;\n                    }\n                default:\n                    t.level;\n            }\n        }), r?.traces?.length && this.tracingHelper.dispatchEngineSpans(r.traces);\n    }\n    onBeforeExit() {\n        throw new Error('\"beforeExit\" hook is not applicable to the remote query engine');\n    }\n    async url(r) {\n        return await this.start(), `${this.protocol}//${this.host}/${this.remoteClientVersion}/${this.inlineSchemaHash}/${r}`;\n    }\n    async uploadSchema() {\n        let r = {\n            name: \"schemaUpload\",\n            internal: !0\n        };\n        return this.tracingHelper.runInChildSpan(r, async ()=>{\n            let t = await dr(await this.url(\"schema\"), {\n                method: \"PUT\",\n                headers: this.headerBuilder.build(),\n                body: this.inlineSchema,\n                clientVersion: this.clientVersion\n            });\n            t.ok || $t(\"schema response status\", t.status);\n            let n = await Ft(t, this.clientVersion);\n            if (n) throw this.logEmitter.emit(\"warn\", {\n                message: `Error while uploading schema: ${n.message}`,\n                timestamp: new Date,\n                target: \"\"\n            }), n;\n            this.logEmitter.emit(\"info\", {\n                message: `Schema (re)uploaded (hash: ${this.inlineSchemaHash})`,\n                timestamp: new Date,\n                target: \"\"\n            });\n        });\n    }\n    request(r, { traceparent: t, interactiveTransaction: n, customDataProxyFetch: i }) {\n        return this.requestInternal({\n            body: r,\n            traceparent: t,\n            interactiveTransaction: n,\n            customDataProxyFetch: i\n        });\n    }\n    async requestBatch(r, { traceparent: t, transaction: n, customDataProxyFetch: i }) {\n        let o = n?.kind === \"itx\" ? n.options : void 0, s = $r(r, n);\n        return (await this.requestInternal({\n            body: s,\n            customDataProxyFetch: i,\n            interactiveTransaction: o,\n            traceparent: t\n        })).map((l)=>(l.extensions && this.propagateResponseExtensions(l.extensions), \"errors\" in l ? this.convertProtocolErrorsToClientError(l.errors) : l));\n    }\n    requestInternal({ body: r, traceparent: t, customDataProxyFetch: n, interactiveTransaction: i }) {\n        return this.withRetry({\n            actionGerund: \"querying\",\n            callback: async ({ logHttpCall: o })=>{\n                let s = i ? `${i.payload.endpoint}/graphql` : await this.url(\"graphql\");\n                o(s);\n                let a = await dr(s, {\n                    method: \"POST\",\n                    headers: this.headerBuilder.build({\n                        traceparent: t,\n                        transactionId: i?.id\n                    }),\n                    body: JSON.stringify(r),\n                    clientVersion: this.clientVersion\n                }, n);\n                a.ok || $t(\"graphql response status\", a.status), await this.handleError(await Ft(a, this.clientVersion));\n                let l = await a.json();\n                if (l.extensions && this.propagateResponseExtensions(l.extensions), \"errors\" in l) throw this.convertProtocolErrorsToClientError(l.errors);\n                return \"batchResult\" in l ? l.batchResult : l;\n            }\n        });\n    }\n    async transaction(r, t, n) {\n        let i = {\n            start: \"starting\",\n            commit: \"committing\",\n            rollback: \"rolling back\"\n        };\n        return this.withRetry({\n            actionGerund: `${i[r]} transaction`,\n            callback: async ({ logHttpCall: o })=>{\n                if (r === \"start\") {\n                    let s = JSON.stringify({\n                        max_wait: n.maxWait,\n                        timeout: n.timeout,\n                        isolation_level: n.isolationLevel\n                    }), a = await this.url(\"transaction/start\");\n                    o(a);\n                    let l = await dr(a, {\n                        method: \"POST\",\n                        headers: this.headerBuilder.build({\n                            traceparent: t.traceparent\n                        }),\n                        body: s,\n                        clientVersion: this.clientVersion\n                    });\n                    await this.handleError(await Ft(l, this.clientVersion));\n                    let u = await l.json(), { extensions: c } = u;\n                    c && this.propagateResponseExtensions(c);\n                    let p = u.id, d = u[\"data-proxy\"].endpoint;\n                    return {\n                        id: p,\n                        payload: {\n                            endpoint: d\n                        }\n                    };\n                } else {\n                    let s = `${n.payload.endpoint}/${r}`;\n                    o(s);\n                    let a = await dr(s, {\n                        method: \"POST\",\n                        headers: this.headerBuilder.build({\n                            traceparent: t.traceparent\n                        }),\n                        clientVersion: this.clientVersion\n                    });\n                    await this.handleError(await Ft(a, this.clientVersion));\n                    let l = await a.json(), { extensions: u } = l;\n                    u && this.propagateResponseExtensions(u);\n                    return;\n                }\n            }\n        });\n    }\n    getURLAndAPIKey() {\n        return Rl({\n            clientVersion: this.clientVersion,\n            env: this.env,\n            inlineDatasources: this.inlineDatasources,\n            overrideDatasources: this.config.overrideDatasources\n        });\n    }\n    metrics() {\n        throw new cr(\"Metrics are not yet supported for Accelerate\", {\n            clientVersion: this.clientVersion\n        });\n    }\n    async withRetry(r) {\n        for(let t = 0;; t++){\n            let n = (i)=>{\n                this.logEmitter.emit(\"info\", {\n                    message: `Calling ${i} (n=${t})`,\n                    timestamp: new Date,\n                    target: \"\"\n                });\n            };\n            try {\n                return await r.callback({\n                    logHttpCall: n\n                });\n            } catch (i) {\n                if (!(i instanceof se) || !i.isRetryable) throw i;\n                if (t >= Nl) throw i instanceof Br ? i.cause : i;\n                this.logEmitter.emit(\"warn\", {\n                    message: `Attempt ${t + 1}/${Nl} failed for ${r.actionGerund}: ${i.message ?? \"(unknown)\"}`,\n                    timestamp: new Date,\n                    target: \"\"\n                });\n                let o = await Cl(t);\n                this.logEmitter.emit(\"warn\", {\n                    message: `Retrying after ${o}ms`,\n                    timestamp: new Date,\n                    target: \"\"\n                });\n            }\n        }\n    }\n    async handleError(r) {\n        if (r instanceof pr) throw await this.uploadSchema(), new Br({\n            clientVersion: this.clientVersion,\n            cause: r\n        });\n        if (r) throw r;\n    }\n    convertProtocolErrorsToClientError(r) {\n        return r.length === 1 ? qr(r[0], this.config.clientVersion, this.config.activeProvider) : new j(JSON.stringify(r), {\n            clientVersion: this.config.clientVersion\n        });\n    }\n    applyPendingMigrations() {\n        throw new Error(\"Method not implemented.\");\n    }\n};\nfunction Ll(e) {\n    if (e?.kind === \"itx\") return e.options.id;\n}\nvar vo = C(__webpack_require__(/*! node:os */ \"node:os\")), Fl = C(__webpack_require__(/*! node:path */ \"node:path\"));\nvar xo = Symbol(\"PrismaLibraryEngineCache\");\nfunction yf() {\n    let e = globalThis;\n    return e[xo] === void 0 && (e[xo] = {}), e[xo];\n}\nfunction bf(e) {\n    let r = yf();\n    if (r[e] !== void 0) return r[e];\n    let t = Fl.default.toNamespacedPath(e), n = {\n        exports: {}\n    }, i = 0;\n    return process.platform !== \"win32\" && (i = vo.default.constants.dlopen.RTLD_LAZY | vo.default.constants.dlopen.RTLD_DEEPBIND), process.dlopen(n, t, i), r[e] = n.exports, n.exports;\n}\nvar Ml = {\n    async loadLibrary (e) {\n        let r = await gi(), t = await bl(\"library\", e);\n        try {\n            return e.tracingHelper.runInChildSpan({\n                name: \"loadLibrary\",\n                internal: !0\n            }, ()=>bf(t));\n        } catch (n) {\n            let i = Ci({\n                e: n,\n                platformInfo: r,\n                id: t\n            });\n            throw new T(i, e.clientVersion);\n        }\n    }\n};\nvar Po, $l = {\n    async loadLibrary (e) {\n        let { clientVersion: r, adapter: t, engineWasm: n } = e;\n        if (t === void 0) throw new T(`The \\`adapter\\` option for \\`PrismaClient\\` is required in this context (${Gn().prettyName})`, r);\n        if (n === void 0) throw new T(\"WASM engine was unexpectedly `undefined`\", r);\n        Po === void 0 && (Po = (async ()=>{\n            let o = await n.getRuntime(), s = await n.getQueryEngineWasmModule();\n            if (s == null) throw new T(\"The loaded wasm module was unexpectedly `undefined` or `null` once loaded\", r);\n            let a = {\n                \"./query_engine_bg.js\": o\n            }, l = new WebAssembly.Instance(s, a), u = l.exports.__wbindgen_start;\n            return o.__wbg_set_wasm(l.exports), u(), o.QueryEngine;\n        })());\n        let i = await Po;\n        return {\n            debugPanic () {\n                return Promise.reject(\"{}\");\n            },\n            dmmf () {\n                return Promise.resolve(\"{}\");\n            },\n            version () {\n                return {\n                    commit: \"unknown\",\n                    version: \"unknown\"\n                };\n            },\n            QueryEngine: i\n        };\n    }\n};\nvar Ef = \"P2036\", Ae = N(\"prisma:client:libraryEngine\");\nfunction wf(e) {\n    return e.item_type === \"query\" && \"query\" in e;\n}\nfunction xf(e) {\n    return \"level\" in e ? e.level === \"error\" && e.message === \"PANIC\" : !1;\n}\nvar ql = [\n    ...ui,\n    \"native\"\n], vf = 0xffffffffffffffffn, To = 1n;\nfunction Pf() {\n    let e = To++;\n    return To > vf && (To = 1n), e;\n}\nvar Qr = class {\n    constructor(r, t){\n        this.name = \"LibraryEngine\";\n        this.libraryLoader = t ?? Ml, r.engineWasm !== void 0 && (this.libraryLoader = t ?? $l), this.config = r, this.libraryStarted = !1, this.logQueries = r.logQueries ?? !1, this.logLevel = r.logLevel ?? \"error\", this.logEmitter = r.logEmitter, this.datamodel = r.inlineSchema, this.tracingHelper = r.tracingHelper, r.enableDebugLogs && (this.logLevel = \"debug\");\n        let n = Object.keys(r.overrideDatasources)[0], i = r.overrideDatasources[n]?.url;\n        n !== void 0 && i !== void 0 && (this.datasourceOverrides = {\n            [n]: i\n        }), this.libraryInstantiationPromise = this.instantiateLibrary();\n    }\n    wrapEngine(r) {\n        return {\n            applyPendingMigrations: r.applyPendingMigrations?.bind(r),\n            commitTransaction: this.withRequestId(r.commitTransaction.bind(r)),\n            connect: this.withRequestId(r.connect.bind(r)),\n            disconnect: this.withRequestId(r.disconnect.bind(r)),\n            metrics: r.metrics?.bind(r),\n            query: this.withRequestId(r.query.bind(r)),\n            rollbackTransaction: this.withRequestId(r.rollbackTransaction.bind(r)),\n            sdlSchema: r.sdlSchema?.bind(r),\n            startTransaction: this.withRequestId(r.startTransaction.bind(r)),\n            trace: r.trace.bind(r),\n            free: r.free?.bind(r)\n        };\n    }\n    withRequestId(r) {\n        return async (...t)=>{\n            let n = Pf().toString();\n            try {\n                return await r(...t, n);\n            } finally{\n                if (this.tracingHelper.isEnabled()) {\n                    let i = await this.engine?.trace(n);\n                    if (i) {\n                        let o = JSON.parse(i);\n                        this.tracingHelper.dispatchEngineSpans(o.spans);\n                    }\n                }\n            }\n        };\n    }\n    async applyPendingMigrations() {\n        throw new Error(\"Cannot call this method from this type of engine instance\");\n    }\n    async transaction(r, t, n) {\n        await this.start();\n        let i = await this.adapterPromise, o = JSON.stringify(t), s;\n        if (r === \"start\") {\n            let l = JSON.stringify({\n                max_wait: n.maxWait,\n                timeout: n.timeout,\n                isolation_level: n.isolationLevel\n            });\n            s = await this.engine?.startTransaction(l, o);\n        } else r === \"commit\" ? s = await this.engine?.commitTransaction(n.id, o) : r === \"rollback\" && (s = await this.engine?.rollbackTransaction(n.id, o));\n        let a = this.parseEngineResponse(s);\n        if (Tf(a)) {\n            let l = this.getExternalAdapterError(a, i?.errorRegistry);\n            throw l ? l.error : new z(a.message, {\n                code: a.error_code,\n                clientVersion: this.config.clientVersion,\n                meta: a.meta\n            });\n        } else if (typeof a.message == \"string\") throw new j(a.message, {\n            clientVersion: this.config.clientVersion\n        });\n        return a;\n    }\n    async instantiateLibrary() {\n        if (Ae(\"internalSetup\"), this.libraryInstantiationPromise) return this.libraryInstantiationPromise;\n        li(), this.binaryTarget = await this.getCurrentBinaryTarget(), await this.tracingHelper.runInChildSpan(\"load_engine\", ()=>this.loadEngine()), this.version();\n    }\n    async getCurrentBinaryTarget() {\n        {\n            if (this.binaryTarget) return this.binaryTarget;\n            let r = await this.tracingHelper.runInChildSpan(\"detect_platform\", ()=>ir());\n            if (!ql.includes(r)) throw new T(`Unknown ${ce(\"PRISMA_QUERY_ENGINE_LIBRARY\")} ${ce(W(r))}. Possible binaryTargets: ${qe(ql.join(\", \"))} or a path to the query engine library.\nYou may have to run ${qe(\"prisma generate\")} for your changes to take effect.`, this.config.clientVersion);\n            return r;\n        }\n    }\n    parseEngineResponse(r) {\n        if (!r) throw new j(\"Response from the Engine was empty\", {\n            clientVersion: this.config.clientVersion\n        });\n        try {\n            return JSON.parse(r);\n        } catch  {\n            throw new j(\"Unable to JSON.parse response from engine\", {\n                clientVersion: this.config.clientVersion\n            });\n        }\n    }\n    async loadEngine() {\n        if (!this.engine) {\n            this.QueryEngineConstructor || (this.library = await this.libraryLoader.loadLibrary(this.config), this.QueryEngineConstructor = this.library.QueryEngine);\n            try {\n                let r = new WeakRef(this);\n                this.adapterPromise || (this.adapterPromise = this.config.adapter?.connect()?.then(tn));\n                let t = await this.adapterPromise;\n                t && Ae(\"Using driver adapter: %O\", t), this.engine = this.wrapEngine(new this.QueryEngineConstructor({\n                    datamodel: this.datamodel,\n                    env: process.env,\n                    logQueries: this.config.logQueries ?? !1,\n                    ignoreEnvVarErrors: !0,\n                    datasourceOverrides: this.datasourceOverrides ?? {},\n                    logLevel: this.logLevel,\n                    configDir: this.config.cwd,\n                    engineProtocol: \"json\",\n                    enableTracing: this.tracingHelper.isEnabled()\n                }, (n)=>{\n                    r.deref()?.logger(n);\n                }, t));\n            } catch (r) {\n                let t = r, n = this.parseInitError(t.message);\n                throw typeof n == \"string\" ? t : new T(n.message, this.config.clientVersion, n.error_code);\n            }\n        }\n    }\n    logger(r) {\n        let t = this.parseEngineResponse(r);\n        t && (t.level = t?.level.toLowerCase() ?? \"unknown\", wf(t) ? this.logEmitter.emit(\"query\", {\n            timestamp: new Date,\n            query: t.query,\n            params: t.params,\n            duration: Number(t.duration_ms),\n            target: t.module_path\n        }) : xf(t) ? this.loggerRustPanic = new le(So(this, `${t.message}: ${t.reason} in ${t.file}:${t.line}:${t.column}`), this.config.clientVersion) : this.logEmitter.emit(t.level, {\n            timestamp: new Date,\n            message: t.message,\n            target: t.module_path\n        }));\n    }\n    parseInitError(r) {\n        try {\n            return JSON.parse(r);\n        } catch  {}\n        return r;\n    }\n    parseRequestError(r) {\n        try {\n            return JSON.parse(r);\n        } catch  {}\n        return r;\n    }\n    onBeforeExit() {\n        throw new Error('\"beforeExit\" hook is not applicable to the library engine since Prisma 5.0.0, it is only relevant and implemented for the binary engine. Please add your event listener to the `process` object directly instead.');\n    }\n    async start() {\n        if (this.libraryInstantiationPromise || (this.libraryInstantiationPromise = this.instantiateLibrary()), await this.libraryInstantiationPromise, await this.libraryStoppingPromise, this.libraryStartingPromise) return Ae(`library already starting, this.libraryStarted: ${this.libraryStarted}`), this.libraryStartingPromise;\n        if (this.libraryStarted) return;\n        let r = async ()=>{\n            Ae(\"library starting\");\n            try {\n                let t = {\n                    traceparent: this.tracingHelper.getTraceParent()\n                };\n                await this.engine?.connect(JSON.stringify(t)), this.libraryStarted = !0, this.adapterPromise || (this.adapterPromise = this.config.adapter?.connect()?.then(tn)), await this.adapterPromise, Ae(\"library started\");\n            } catch (t) {\n                let n = this.parseInitError(t.message);\n                throw typeof n == \"string\" ? t : new T(n.message, this.config.clientVersion, n.error_code);\n            } finally{\n                this.libraryStartingPromise = void 0;\n            }\n        };\n        return this.libraryStartingPromise = this.tracingHelper.runInChildSpan(\"connect\", r), this.libraryStartingPromise;\n    }\n    async stop() {\n        if (await this.libraryInstantiationPromise, await this.libraryStartingPromise, await this.executingQueryPromise, this.libraryStoppingPromise) return Ae(\"library is already stopping\"), this.libraryStoppingPromise;\n        if (!this.libraryStarted) {\n            await (await this.adapterPromise)?.dispose(), this.adapterPromise = void 0;\n            return;\n        }\n        let r = async ()=>{\n            await new Promise((n)=>setImmediate(n)), Ae(\"library stopping\");\n            let t = {\n                traceparent: this.tracingHelper.getTraceParent()\n            };\n            await this.engine?.disconnect(JSON.stringify(t)), this.engine?.free && this.engine.free(), this.engine = void 0, this.libraryStarted = !1, this.libraryStoppingPromise = void 0, this.libraryInstantiationPromise = void 0, await (await this.adapterPromise)?.dispose(), this.adapterPromise = void 0, Ae(\"library stopped\");\n        };\n        return this.libraryStoppingPromise = this.tracingHelper.runInChildSpan(\"disconnect\", r), this.libraryStoppingPromise;\n    }\n    version() {\n        return this.versionInfo = this.library?.version(), this.versionInfo?.version ?? \"unknown\";\n    }\n    debugPanic(r) {\n        return this.library?.debugPanic(r);\n    }\n    async request(r, { traceparent: t, interactiveTransaction: n }) {\n        Ae(`sending request, this.libraryStarted: ${this.libraryStarted}`);\n        let i = JSON.stringify({\n            traceparent: t\n        }), o = JSON.stringify(r);\n        try {\n            await this.start();\n            let s = await this.adapterPromise;\n            this.executingQueryPromise = this.engine?.query(o, i, n?.id), this.lastQuery = o;\n            let a = this.parseEngineResponse(await this.executingQueryPromise);\n            if (a.errors) throw a.errors.length === 1 ? this.buildQueryError(a.errors[0], s?.errorRegistry) : new j(JSON.stringify(a.errors), {\n                clientVersion: this.config.clientVersion\n            });\n            if (this.loggerRustPanic) throw this.loggerRustPanic;\n            return {\n                data: a\n            };\n        } catch (s) {\n            if (s instanceof T) throw s;\n            if (s.code === \"GenericFailure\" && s.message?.startsWith(\"PANIC:\")) throw new le(So(this, s.message), this.config.clientVersion);\n            let a = this.parseRequestError(s.message);\n            throw typeof a == \"string\" ? s : new j(`${a.message}\n${a.backtrace}`, {\n                clientVersion: this.config.clientVersion\n            });\n        }\n    }\n    async requestBatch(r, { transaction: t, traceparent: n }) {\n        Ae(\"requestBatch\");\n        let i = $r(r, t);\n        await this.start();\n        let o = await this.adapterPromise;\n        this.lastQuery = JSON.stringify(i), this.executingQueryPromise = this.engine?.query(this.lastQuery, JSON.stringify({\n            traceparent: n\n        }), Ll(t));\n        let s = await this.executingQueryPromise, a = this.parseEngineResponse(s);\n        if (a.errors) throw a.errors.length === 1 ? this.buildQueryError(a.errors[0], o?.errorRegistry) : new j(JSON.stringify(a.errors), {\n            clientVersion: this.config.clientVersion\n        });\n        let { batchResult: l, errors: u } = a;\n        if (Array.isArray(l)) return l.map((c)=>c.errors && c.errors.length > 0 ? this.loggerRustPanic ?? this.buildQueryError(c.errors[0], o?.errorRegistry) : {\n                data: c\n            });\n        throw u && u.length === 1 ? new Error(u[0].error) : new Error(JSON.stringify(a));\n    }\n    buildQueryError(r, t) {\n        if (r.user_facing_error.is_panic) return new le(So(this, r.user_facing_error.message), this.config.clientVersion);\n        let n = this.getExternalAdapterError(r.user_facing_error, t);\n        return n ? n.error : qr(r, this.config.clientVersion, this.config.activeProvider);\n    }\n    getExternalAdapterError(r, t) {\n        if (r.error_code === Ef && t) {\n            let n = r.meta?.id;\n            ln(typeof n == \"number\", \"Malformed external JS error received from the engine\");\n            let i = t.consumeError(n);\n            return ln(i, \"External error with reported id was not registered\"), i;\n        }\n    }\n    async metrics(r) {\n        await this.start();\n        let t = await this.engine.metrics(JSON.stringify(r));\n        return r.format === \"prometheus\" ? t : this.parseEngineResponse(t);\n    }\n};\nfunction Tf(e) {\n    return typeof e == \"object\" && e !== null && e.error_code !== void 0;\n}\nfunction So(e, r) {\n    return Tl({\n        binaryTarget: e.binaryTarget,\n        title: r,\n        version: e.config.clientVersion,\n        engineVersion: e.versionInfo?.commit,\n        database: e.config.activeProvider,\n        query: e.lastQuery\n    });\n}\nfunction jl({ url: e, adapter: r, copyEngine: t, targetBuildType: n }) {\n    let i = [], o = [], s = (g)=>{\n        i.push({\n            _tag: \"warning\",\n            value: g\n        });\n    }, a = (g)=>{\n        let S = g.join(`\n`);\n        o.push({\n            _tag: \"error\",\n            value: S\n        });\n    }, l = !!e?.startsWith(\"prisma://\"), u = an(e), c = !!r, p = l || u;\n    !c && t && p && s([\n        \"recommend--no-engine\",\n        \"In production, we recommend using `prisma generate --no-engine` (See: `prisma generate --help`)\"\n    ]);\n    let d = p || !t;\n    c && (d || n === \"edge\") && (n === \"edge\" ? a([\n        \"Prisma Client was configured to use the `adapter` option but it was imported via its `/edge` endpoint.\",\n        \"Please either remove the `/edge` endpoint or remove the `adapter` from the Prisma Client constructor.\"\n    ]) : t ? l && a([\n        \"Prisma Client was configured to use the `adapter` option but the URL was a `prisma://` URL.\",\n        \"Please either use the `prisma://` URL or remove the `adapter` from the Prisma Client constructor.\"\n    ]) : a([\n        \"Prisma Client was configured to use the `adapter` option but `prisma generate` was run with `--no-engine`.\",\n        \"Please run `prisma generate` without `--no-engine` to be able to use Prisma Client with the adapter.\"\n    ]));\n    let f = {\n        accelerate: d,\n        ppg: u,\n        driverAdapters: c\n    };\n    function h(g) {\n        return g.length > 0;\n    }\n    return h(o) ? {\n        ok: !1,\n        diagnostics: {\n            warnings: i,\n            errors: o\n        },\n        isUsing: f\n    } : {\n        ok: !0,\n        diagnostics: {\n            warnings: i\n        },\n        isUsing: f\n    };\n}\nfunction Vl({ copyEngine: e = !0 }, r) {\n    let t;\n    try {\n        t = Vr({\n            inlineDatasources: r.inlineDatasources,\n            overrideDatasources: r.overrideDatasources,\n            env: {\n                ...r.env,\n                ...process.env\n            },\n            clientVersion: r.clientVersion\n        });\n    } catch  {}\n    let { ok: n, isUsing: i, diagnostics: o } = jl({\n        url: t,\n        adapter: r.adapter,\n        copyEngine: e,\n        targetBuildType: \"library\"\n    });\n    for (let p of o.warnings)at(...p.value);\n    if (!n) {\n        let p = o.errors[0];\n        throw new Z(p.value, {\n            clientVersion: r.clientVersion\n        });\n    }\n    let s = Er(r.generator), a = s === \"library\", l = s === \"binary\", u = s === \"client\", c = (i.accelerate || i.ppg) && !i.driverAdapters;\n    return i.accelerate ? new qt(r) : (i.driverAdapters, a ? new Qr(r) : (i.accelerate, new Qr(r)));\n}\nfunction Yn({ generator: e }) {\n    return e?.previewFeatures ?? [];\n}\nvar Bl = (e)=>({\n        command: e\n    });\nvar Ul = (e)=>e.strings.reduce((r, t, n)=>`${r}@P${n}${t}`);\nfunction Wr(e) {\n    try {\n        return Gl(e, \"fast\");\n    } catch  {\n        return Gl(e, \"slow\");\n    }\n}\nfunction Gl(e, r) {\n    return JSON.stringify(e.map((t)=>Wl(t, r)));\n}\nfunction Wl(e, r) {\n    if (Array.isArray(e)) return e.map((t)=>Wl(t, r));\n    if (typeof e == \"bigint\") return {\n        prisma__type: \"bigint\",\n        prisma__value: e.toString()\n    };\n    if (Sr(e)) return {\n        prisma__type: \"date\",\n        prisma__value: e.toJSON()\n    };\n    if (ve.isDecimal(e)) return {\n        prisma__type: \"decimal\",\n        prisma__value: e.toJSON()\n    };\n    if (Buffer.isBuffer(e)) return {\n        prisma__type: \"bytes\",\n        prisma__value: e.toString(\"base64\")\n    };\n    if (Sf(e)) return {\n        prisma__type: \"bytes\",\n        prisma__value: Buffer.from(e).toString(\"base64\")\n    };\n    if (ArrayBuffer.isView(e)) {\n        let { buffer: t, byteOffset: n, byteLength: i } = e;\n        return {\n            prisma__type: \"bytes\",\n            prisma__value: Buffer.from(t, n, i).toString(\"base64\")\n        };\n    }\n    return typeof e == \"object\" && r === \"slow\" ? Jl(e) : e;\n}\nfunction Sf(e) {\n    return e instanceof ArrayBuffer || e instanceof SharedArrayBuffer ? !0 : typeof e == \"object\" && e !== null ? e[Symbol.toStringTag] === \"ArrayBuffer\" || e[Symbol.toStringTag] === \"SharedArrayBuffer\" : !1;\n}\nfunction Jl(e) {\n    if (typeof e != \"object\" || e === null) return e;\n    if (typeof e.toJSON == \"function\") return e.toJSON();\n    if (Array.isArray(e)) return e.map(Ql);\n    let r = {};\n    for (let t of Object.keys(e))r[t] = Ql(e[t]);\n    return r;\n}\nfunction Ql(e) {\n    return typeof e == \"bigint\" ? e.toString() : Jl(e);\n}\nvar Rf = /^(\\s*alter\\s)/i, Hl = N(\"prisma:client\");\nfunction Ro(e, r, t, n) {\n    if (!(e !== \"postgresql\" && e !== \"cockroachdb\") && t.length > 0 && Rf.exec(r)) throw new Error(`Running ALTER using ${n} is not supported\nUsing the example below you can still execute your query with Prisma, but please note that it is vulnerable to SQL injection attacks and requires you to take care of input sanitization.\n\nExample:\n  await prisma.$executeRawUnsafe(\\`ALTER USER prisma WITH PASSWORD '\\${password}'\\`)\n\nMore Information: https://pris.ly/d/execute-raw\n`);\n}\nvar Ao = ({ clientMethod: e, activeProvider: r })=>(t)=>{\n        let n = \"\", i;\n        if (qn(t)) n = t.sql, i = {\n            values: Wr(t.values),\n            __prismaRawParameters__: !0\n        };\n        else if (Array.isArray(t)) {\n            let [o, ...s] = t;\n            n = o, i = {\n                values: Wr(s || []),\n                __prismaRawParameters__: !0\n            };\n        } else switch(r){\n            case \"sqlite\":\n            case \"mysql\":\n                {\n                    n = t.sql, i = {\n                        values: Wr(t.values),\n                        __prismaRawParameters__: !0\n                    };\n                    break;\n                }\n            case \"cockroachdb\":\n            case \"postgresql\":\n            case \"postgres\":\n                {\n                    n = t.text, i = {\n                        values: Wr(t.values),\n                        __prismaRawParameters__: !0\n                    };\n                    break;\n                }\n            case \"sqlserver\":\n                {\n                    n = Ul(t), i = {\n                        values: Wr(t.values),\n                        __prismaRawParameters__: !0\n                    };\n                    break;\n                }\n            default:\n                throw new Error(`The ${r} provider does not support ${e}`);\n        }\n        return i?.values ? Hl(`prisma.${e}(${n}, ${i.values})`) : Hl(`prisma.${e}(${n})`), {\n            query: n,\n            parameters: i\n        };\n    }, Kl = {\n    requestArgsToMiddlewareArgs (e) {\n        return [\n            e.strings,\n            ...e.values\n        ];\n    },\n    middlewareArgsToRequestArgs (e) {\n        let [r, ...t] = e;\n        return new oe(r, t);\n    }\n}, Yl = {\n    requestArgsToMiddlewareArgs (e) {\n        return [\n            e\n        ];\n    },\n    middlewareArgsToRequestArgs (e) {\n        return e[0];\n    }\n};\nfunction Co(e) {\n    return function(t, n) {\n        let i, o = (s = e)=>{\n            try {\n                return s === void 0 || s?.kind === \"itx\" ? i ??= zl(t(s)) : zl(t(s));\n            } catch (a) {\n                return Promise.reject(a);\n            }\n        };\n        return {\n            get spec () {\n                return n;\n            },\n            then (s, a) {\n                return o().then(s, a);\n            },\n            catch (s) {\n                return o().catch(s);\n            },\n            finally (s) {\n                return o().finally(s);\n            },\n            requestTransaction (s) {\n                let a = o(s);\n                return a.requestTransaction ? a.requestTransaction(s) : a;\n            },\n            [Symbol.toStringTag]: \"PrismaPromise\"\n        };\n    };\n}\nfunction zl(e) {\n    return typeof e.then == \"function\" ? e : Promise.resolve(e);\n}\nvar Af = vi.split(\".\")[0], Cf = {\n    isEnabled () {\n        return !1;\n    },\n    getTraceParent () {\n        return \"00-10-10-00\";\n    },\n    dispatchEngineSpans () {},\n    getActiveContext () {},\n    runInChildSpan (e, r) {\n        return r();\n    }\n}, Io = class {\n    isEnabled() {\n        return this.getGlobalTracingHelper().isEnabled();\n    }\n    getTraceParent(r) {\n        return this.getGlobalTracingHelper().getTraceParent(r);\n    }\n    dispatchEngineSpans(r) {\n        return this.getGlobalTracingHelper().dispatchEngineSpans(r);\n    }\n    getActiveContext() {\n        return this.getGlobalTracingHelper().getActiveContext();\n    }\n    runInChildSpan(r, t) {\n        return this.getGlobalTracingHelper().runInChildSpan(r, t);\n    }\n    getGlobalTracingHelper() {\n        let r = globalThis[`V${Af}_PRISMA_INSTRUMENTATION`], t = globalThis.PRISMA_INSTRUMENTATION;\n        return r?.helper ?? t?.helper ?? Cf;\n    }\n};\nfunction Zl() {\n    return new Io;\n}\nfunction Xl(e, r = ()=>{}) {\n    let t, n = new Promise((i)=>t = i);\n    return {\n        then (i) {\n            return --e === 0 && t(r()), i?.(n);\n        }\n    };\n}\nfunction eu(e) {\n    return typeof e == \"string\" ? e : e.reduce((r, t)=>{\n        let n = typeof t == \"string\" ? t : t.level;\n        return n === \"query\" ? r : r && (t === \"info\" || r === \"info\") ? \"info\" : n;\n    }, void 0);\n}\nvar zn = class {\n    use(r) {\n        this._middlewares.push(r);\n    }\n    get(r) {\n        return this._middlewares[r];\n    }\n    has(r) {\n        return !!this._middlewares[r];\n    }\n    length() {\n        return this._middlewares.length;\n    }\n    constructor(){\n        this._middlewares = [];\n    }\n};\nvar tu = C(Li());\nfunction Zn(e) {\n    return typeof e.batchRequestIdx == \"number\";\n}\nfunction ru(e) {\n    if (e.action !== \"findUnique\" && e.action !== \"findUniqueOrThrow\") return;\n    let r = [];\n    return e.modelName && r.push(e.modelName), e.query.arguments && r.push(ko(e.query.arguments)), r.push(ko(e.query.selection)), r.join(\"\");\n}\nfunction ko(e) {\n    return `(${Object.keys(e).sort().map((t)=>{\n        let n = e[t];\n        return typeof n == \"object\" && n !== null ? `(${t} ${ko(n)})` : t;\n    }).join(\" \")})`;\n}\nvar If = {\n    aggregate: !1,\n    aggregateRaw: !1,\n    createMany: !0,\n    createManyAndReturn: !0,\n    createOne: !0,\n    deleteMany: !0,\n    deleteOne: !0,\n    executeRaw: !0,\n    findFirst: !1,\n    findFirstOrThrow: !1,\n    findMany: !1,\n    findRaw: !1,\n    findUnique: !1,\n    findUniqueOrThrow: !1,\n    groupBy: !1,\n    queryRaw: !1,\n    runCommandRaw: !0,\n    updateMany: !0,\n    updateManyAndReturn: !0,\n    updateOne: !0,\n    upsertOne: !0\n};\nfunction Do(e) {\n    return If[e];\n}\nvar Xn = class {\n    constructor(r){\n        this.tickActive = !1;\n        this.options = r;\n        this.batches = {};\n    }\n    request(r) {\n        let t = this.options.batchBy(r);\n        return t ? (this.batches[t] || (this.batches[t] = [], this.tickActive || (this.tickActive = !0, process.nextTick(()=>{\n            this.dispatchBatches(), this.tickActive = !1;\n        }))), new Promise((n, i)=>{\n            this.batches[t].push({\n                request: r,\n                resolve: n,\n                reject: i\n            });\n        })) : this.options.singleLoader(r);\n    }\n    dispatchBatches() {\n        for(let r in this.batches){\n            let t = this.batches[r];\n            delete this.batches[r], t.length === 1 ? this.options.singleLoader(t[0].request).then((n)=>{\n                n instanceof Error ? t[0].reject(n) : t[0].resolve(n);\n            }).catch((n)=>{\n                t[0].reject(n);\n            }) : (t.sort((n, i)=>this.options.batchOrder(n.request, i.request)), this.options.batchLoader(t.map((n)=>n.request)).then((n)=>{\n                if (n instanceof Error) for(let i = 0; i < t.length; i++)t[i].reject(n);\n                else for(let i = 0; i < t.length; i++){\n                    let o = n[i];\n                    o instanceof Error ? t[i].reject(o) : t[i].resolve(o);\n                }\n            }).catch((n)=>{\n                for(let i = 0; i < t.length; i++)t[i].reject(n);\n            }));\n        }\n    }\n    get [Symbol.toStringTag]() {\n        return \"DataLoader\";\n    }\n};\nfunction mr(e, r) {\n    if (r === null) return r;\n    switch(e){\n        case \"bigint\":\n            return BigInt(r);\n        case \"bytes\":\n            {\n                let { buffer: t, byteOffset: n, byteLength: i } = Buffer.from(r, \"base64\");\n                return new Uint8Array(t, n, i);\n            }\n        case \"decimal\":\n            return new ve(r);\n        case \"datetime\":\n        case \"date\":\n            return new Date(r);\n        case \"time\":\n            return new Date(`1970-01-01T${r}Z`);\n        case \"bigint-array\":\n            return r.map((t)=>mr(\"bigint\", t));\n        case \"bytes-array\":\n            return r.map((t)=>mr(\"bytes\", t));\n        case \"decimal-array\":\n            return r.map((t)=>mr(\"decimal\", t));\n        case \"datetime-array\":\n            return r.map((t)=>mr(\"datetime\", t));\n        case \"date-array\":\n            return r.map((t)=>mr(\"date\", t));\n        case \"time-array\":\n            return r.map((t)=>mr(\"time\", t));\n        default:\n            return r;\n    }\n}\nfunction ei(e) {\n    let r = [], t = kf(e);\n    for(let n = 0; n < e.rows.length; n++){\n        let i = e.rows[n], o = {\n            ...t\n        };\n        for(let s = 0; s < i.length; s++)o[e.columns[s]] = mr(e.types[s], i[s]);\n        r.push(o);\n    }\n    return r;\n}\nfunction kf(e) {\n    let r = {};\n    for(let t = 0; t < e.columns.length; t++)r[e.columns[t]] = null;\n    return r;\n}\nvar Df = N(\"prisma:client:request_handler\"), ri = class {\n    constructor(r, t){\n        this.logEmitter = t, this.client = r, this.dataloader = new Xn({\n            batchLoader: sl(async ({ requests: n, customDataProxyFetch: i })=>{\n                let { transaction: o, otelParentCtx: s } = n[0], a = n.map((p)=>p.protocolQuery), l = this.client._tracingHelper.getTraceParent(s), u = n.some((p)=>Do(p.protocolQuery.action));\n                return (await this.client._engine.requestBatch(a, {\n                    traceparent: l,\n                    transaction: Of(o),\n                    containsWrite: u,\n                    customDataProxyFetch: i\n                })).map((p, d)=>{\n                    if (p instanceof Error) return p;\n                    try {\n                        return this.mapQueryEngineResult(n[d], p);\n                    } catch (f) {\n                        return f;\n                    }\n                });\n            }),\n            singleLoader: async (n)=>{\n                let i = n.transaction?.kind === \"itx\" ? nu(n.transaction) : void 0, o = await this.client._engine.request(n.protocolQuery, {\n                    traceparent: this.client._tracingHelper.getTraceParent(),\n                    interactiveTransaction: i,\n                    isWrite: Do(n.protocolQuery.action),\n                    customDataProxyFetch: n.customDataProxyFetch\n                });\n                return this.mapQueryEngineResult(n, o);\n            },\n            batchBy: (n)=>n.transaction?.id ? `transaction-${n.transaction.id}` : ru(n.protocolQuery),\n            batchOrder (n, i) {\n                return n.transaction?.kind === \"batch\" && i.transaction?.kind === \"batch\" ? n.transaction.index - i.transaction.index : 0;\n            }\n        });\n    }\n    async request(r) {\n        try {\n            return await this.dataloader.request(r);\n        } catch (t) {\n            let { clientMethod: n, callsite: i, transaction: o, args: s, modelName: a } = r;\n            this.handleAndLogRequestError({\n                error: t,\n                clientMethod: n,\n                callsite: i,\n                transaction: o,\n                args: s,\n                modelName: a,\n                globalOmit: r.globalOmit\n            });\n        }\n    }\n    mapQueryEngineResult({ dataPath: r, unpacker: t }, n) {\n        let i = n?.data, o = this.unpack(i, r, t);\n        return process.env.PRISMA_CLIENT_GET_TIME ? {\n            data: o\n        } : o;\n    }\n    handleAndLogRequestError(r) {\n        try {\n            this.handleRequestError(r);\n        } catch (t) {\n            throw this.logEmitter && this.logEmitter.emit(\"error\", {\n                message: t.message,\n                target: r.clientMethod,\n                timestamp: new Date\n            }), t;\n        }\n    }\n    handleRequestError({ error: r, clientMethod: t, callsite: n, transaction: i, args: o, modelName: s, globalOmit: a }) {\n        if (Df(r), _f(r, i)) throw r;\n        if (r instanceof z && Nf(r)) {\n            let u = iu(r.meta);\n            _n({\n                args: o,\n                errors: [\n                    u\n                ],\n                callsite: n,\n                errorFormat: this.client._errorFormat,\n                originalMethod: t,\n                clientVersion: this.client._clientVersion,\n                globalOmit: a\n            });\n        }\n        let l = r.message;\n        if (n && (l = Pn({\n            callsite: n,\n            originalMethod: t,\n            isPanic: r.isPanic,\n            showColors: this.client._errorFormat === \"pretty\",\n            message: l\n        })), l = this.sanitizeMessage(l), r.code) {\n            let u = s ? {\n                modelName: s,\n                ...r.meta\n            } : r.meta;\n            throw new z(l, {\n                code: r.code,\n                clientVersion: this.client._clientVersion,\n                meta: u,\n                batchRequestIdx: r.batchRequestIdx\n            });\n        } else {\n            if (r.isPanic) throw new le(l, this.client._clientVersion);\n            if (r instanceof j) throw new j(l, {\n                clientVersion: this.client._clientVersion,\n                batchRequestIdx: r.batchRequestIdx\n            });\n            if (r instanceof T) throw new T(l, this.client._clientVersion);\n            if (r instanceof le) throw new le(l, this.client._clientVersion);\n        }\n        throw r.clientVersion = this.client._clientVersion, r;\n    }\n    sanitizeMessage(r) {\n        return this.client._errorFormat && this.client._errorFormat !== \"pretty\" ? (0, tu.default)(r) : r;\n    }\n    unpack(r, t, n) {\n        if (!r || (r.data && (r = r.data), !r)) return r;\n        let i = Object.keys(r)[0], o = Object.values(r)[0], s = t.filter((u)=>u !== \"select\" && u !== \"include\"), a = lo(o, s), l = i === \"queryRaw\" ? ei(a) : Tr(a);\n        return n ? n(l) : l;\n    }\n    get [Symbol.toStringTag]() {\n        return \"RequestHandler\";\n    }\n};\nfunction Of(e) {\n    if (e) {\n        if (e.kind === \"batch\") return {\n            kind: \"batch\",\n            options: {\n                isolationLevel: e.isolationLevel\n            }\n        };\n        if (e.kind === \"itx\") return {\n            kind: \"itx\",\n            options: nu(e)\n        };\n        Ne(e, \"Unknown transaction kind\");\n    }\n}\nfunction nu(e) {\n    return {\n        id: e.id,\n        payload: e.payload\n    };\n}\nfunction _f(e, r) {\n    return Zn(e) && r?.kind === \"batch\" && e.batchRequestIdx !== r.index;\n}\nfunction Nf(e) {\n    return e.code === \"P2009\" || e.code === \"P2012\";\n}\nfunction iu(e) {\n    if (e.kind === \"Union\") return {\n        kind: \"Union\",\n        errors: e.errors.map(iu)\n    };\n    if (Array.isArray(e.selectionPath)) {\n        let [, ...r] = e.selectionPath;\n        return {\n            ...e,\n            selectionPath: r\n        };\n    }\n    return e;\n}\nvar ou = Sl;\nvar cu = C(Ki());\nvar O = class extends Error {\n    constructor(r){\n        super(r + `\nRead more at https://pris.ly/d/client-constructor`), this.name = \"PrismaClientConstructorValidationError\";\n    }\n    get [Symbol.toStringTag]() {\n        return \"PrismaClientConstructorValidationError\";\n    }\n};\nx(O, \"PrismaClientConstructorValidationError\");\nvar su = [\n    \"datasources\",\n    \"datasourceUrl\",\n    \"errorFormat\",\n    \"adapter\",\n    \"log\",\n    \"transactionOptions\",\n    \"omit\",\n    \"__internal\"\n], au = [\n    \"pretty\",\n    \"colorless\",\n    \"minimal\"\n], lu = [\n    \"info\",\n    \"query\",\n    \"warn\",\n    \"error\"\n], Lf = {\n    datasources: (e, { datasourceNames: r })=>{\n        if (e) {\n            if (typeof e != \"object\" || Array.isArray(e)) throw new O(`Invalid value ${JSON.stringify(e)} for \"datasources\" provided to PrismaClient constructor`);\n            for (let [t, n] of Object.entries(e)){\n                if (!r.includes(t)) {\n                    let i = Jr(t, r) || ` Available datasources: ${r.join(\", \")}`;\n                    throw new O(`Unknown datasource ${t} provided to PrismaClient constructor.${i}`);\n                }\n                if (typeof n != \"object\" || Array.isArray(n)) throw new O(`Invalid value ${JSON.stringify(e)} for datasource \"${t}\" provided to PrismaClient constructor.\nIt should have this form: { url: \"CONNECTION_STRING\" }`);\n                if (n && typeof n == \"object\") for (let [i, o] of Object.entries(n)){\n                    if (i !== \"url\") throw new O(`Invalid value ${JSON.stringify(e)} for datasource \"${t}\" provided to PrismaClient constructor.\nIt should have this form: { url: \"CONNECTION_STRING\" }`);\n                    if (typeof o != \"string\") throw new O(`Invalid value ${JSON.stringify(o)} for datasource \"${t}\" provided to PrismaClient constructor.\nIt should have this form: { url: \"CONNECTION_STRING\" }`);\n                }\n            }\n        }\n    },\n    adapter: (e, r)=>{\n        if (!e && Er(r.generator) === \"client\") throw new O('Using engine type \"client\" requires a driver adapter to be provided to PrismaClient constructor.');\n        if (e === null) return;\n        if (e === void 0) throw new O('\"adapter\" property must not be undefined, use null to conditionally disable driver adapters.');\n        if (!Yn(r).includes(\"driverAdapters\")) throw new O('\"adapter\" property can only be provided to PrismaClient constructor when \"driverAdapters\" preview feature is enabled.');\n        if (Er(r.generator) === \"binary\") throw new O('Cannot use a driver adapter with the \"binary\" Query Engine. Please use the \"library\" Query Engine.');\n    },\n    datasourceUrl: (e)=>{\n        if (typeof e < \"u\" && typeof e != \"string\") throw new O(`Invalid value ${JSON.stringify(e)} for \"datasourceUrl\" provided to PrismaClient constructor.\nExpected string or undefined.`);\n    },\n    errorFormat: (e)=>{\n        if (e) {\n            if (typeof e != \"string\") throw new O(`Invalid value ${JSON.stringify(e)} for \"errorFormat\" provided to PrismaClient constructor.`);\n            if (!au.includes(e)) {\n                let r = Jr(e, au);\n                throw new O(`Invalid errorFormat ${e} provided to PrismaClient constructor.${r}`);\n            }\n        }\n    },\n    log: (e)=>{\n        if (!e) return;\n        if (!Array.isArray(e)) throw new O(`Invalid value ${JSON.stringify(e)} for \"log\" provided to PrismaClient constructor.`);\n        function r(t) {\n            if (typeof t == \"string\" && !lu.includes(t)) {\n                let n = Jr(t, lu);\n                throw new O(`Invalid log level \"${t}\" provided to PrismaClient constructor.${n}`);\n            }\n        }\n        for (let t of e){\n            r(t);\n            let n = {\n                level: r,\n                emit: (i)=>{\n                    let o = [\n                        \"stdout\",\n                        \"event\"\n                    ];\n                    if (!o.includes(i)) {\n                        let s = Jr(i, o);\n                        throw new O(`Invalid value ${JSON.stringify(i)} for \"emit\" in logLevel provided to PrismaClient constructor.${s}`);\n                    }\n                }\n            };\n            if (t && typeof t == \"object\") for (let [i, o] of Object.entries(t))if (n[i]) n[i](o);\n            else throw new O(`Invalid property ${i} for \"log\" provided to PrismaClient constructor`);\n        }\n    },\n    transactionOptions: (e)=>{\n        if (!e) return;\n        let r = e.maxWait;\n        if (r != null && r <= 0) throw new O(`Invalid value ${r} for maxWait in \"transactionOptions\" provided to PrismaClient constructor. maxWait needs to be greater than 0`);\n        let t = e.timeout;\n        if (t != null && t <= 0) throw new O(`Invalid value ${t} for timeout in \"transactionOptions\" provided to PrismaClient constructor. timeout needs to be greater than 0`);\n    },\n    omit: (e, r)=>{\n        if (typeof e != \"object\") throw new O('\"omit\" option is expected to be an object.');\n        if (e === null) throw new O('\"omit\" option can not be `null`');\n        let t = [];\n        for (let [n, i] of Object.entries(e)){\n            let o = Mf(n, r.runtimeDataModel);\n            if (!o) {\n                t.push({\n                    kind: \"UnknownModel\",\n                    modelKey: n\n                });\n                continue;\n            }\n            for (let [s, a] of Object.entries(i)){\n                let l = o.fields.find((u)=>u.name === s);\n                if (!l) {\n                    t.push({\n                        kind: \"UnknownField\",\n                        modelKey: n,\n                        fieldName: s\n                    });\n                    continue;\n                }\n                if (l.relationName) {\n                    t.push({\n                        kind: \"RelationInOmit\",\n                        modelKey: n,\n                        fieldName: s\n                    });\n                    continue;\n                }\n                typeof a != \"boolean\" && t.push({\n                    kind: \"InvalidFieldValue\",\n                    modelKey: n,\n                    fieldName: s\n                });\n            }\n        }\n        if (t.length > 0) throw new O($f(e, t));\n    },\n    __internal: (e)=>{\n        if (!e) return;\n        let r = [\n            \"debug\",\n            \"engine\",\n            \"configOverride\"\n        ];\n        if (typeof e != \"object\") throw new O(`Invalid value ${JSON.stringify(e)} for \"__internal\" to PrismaClient constructor`);\n        for (let [t] of Object.entries(e))if (!r.includes(t)) {\n            let n = Jr(t, r);\n            throw new O(`Invalid property ${JSON.stringify(t)} for \"__internal\" provided to PrismaClient constructor.${n}`);\n        }\n    }\n};\nfunction pu(e, r) {\n    for (let [t, n] of Object.entries(e)){\n        if (!su.includes(t)) {\n            let i = Jr(t, su);\n            throw new O(`Unknown property ${t} provided to PrismaClient constructor.${i}`);\n        }\n        Lf[t](n, r);\n    }\n    if (e.datasourceUrl && e.datasources) throw new O('Can not use \"datasourceUrl\" and \"datasources\" options at the same time. Pick one of them');\n}\nfunction Jr(e, r) {\n    if (r.length === 0 || typeof e != \"string\") return \"\";\n    let t = Ff(e, r);\n    return t ? ` Did you mean \"${t}\"?` : \"\";\n}\nfunction Ff(e, r) {\n    if (r.length === 0) return null;\n    let t = r.map((i)=>({\n            value: i,\n            distance: (0, cu.default)(e, i)\n        }));\n    t.sort((i, o)=>i.distance < o.distance ? -1 : 1);\n    let n = t[0];\n    return n.distance < 3 ? n.value : null;\n}\nfunction Mf(e, r) {\n    return uu(r.models, e) ?? uu(r.types, e);\n}\nfunction uu(e, r) {\n    let t = Object.keys(e).find((n)=>Ye(n) === r);\n    if (t) return e[t];\n}\nfunction $f(e, r) {\n    let t = Nr(e);\n    for (let o of r)switch(o.kind){\n        case \"UnknownModel\":\n            t.arguments.getField(o.modelKey)?.markAsError(), t.addErrorMessage(()=>`Unknown model name: ${o.modelKey}.`);\n            break;\n        case \"UnknownField\":\n            t.arguments.getDeepField([\n                o.modelKey,\n                o.fieldName\n            ])?.markAsError(), t.addErrorMessage(()=>`Model \"${o.modelKey}\" does not have a field named \"${o.fieldName}\".`);\n            break;\n        case \"RelationInOmit\":\n            t.arguments.getDeepField([\n                o.modelKey,\n                o.fieldName\n            ])?.markAsError(), t.addErrorMessage(()=>'Relations are already excluded by default and can not be specified in \"omit\".');\n            break;\n        case \"InvalidFieldValue\":\n            t.arguments.getDeepFieldValue([\n                o.modelKey,\n                o.fieldName\n            ])?.markAsError(), t.addErrorMessage(()=>\"Omit field option value must be a boolean.\");\n            break;\n    }\n    let { message: n, args: i } = On(t, \"colorless\");\n    return `Error validating \"omit\" option:\n\n${i}\n\n${n}`;\n}\nfunction du(e) {\n    return e.length === 0 ? Promise.resolve([]) : new Promise((r, t)=>{\n        let n = new Array(e.length), i = null, o = !1, s = 0, a = ()=>{\n            o || (s++, s === e.length && (o = !0, i ? t(i) : r(n)));\n        }, l = (u)=>{\n            o || (o = !0, t(u));\n        };\n        for(let u = 0; u < e.length; u++)e[u].then((c)=>{\n            n[u] = c, a();\n        }, (c)=>{\n            if (!Zn(c)) {\n                l(c);\n                return;\n            }\n            c.batchRequestIdx === u ? l(c) : (i || (i = c), a());\n        });\n    });\n}\nvar rr = N(\"prisma:client\");\ntypeof globalThis == \"object\" && (globalThis.NODE_CLIENT = !0);\nvar qf = {\n    requestArgsToMiddlewareArgs: (e)=>e,\n    middlewareArgsToRequestArgs: (e)=>e\n}, jf = Symbol.for(\"prisma.client.transaction.id\"), Vf = {\n    id: 0,\n    nextId () {\n        return ++this.id;\n    }\n};\nfunction bu(e) {\n    class r {\n        constructor(n){\n            this._originalClient = this;\n            this._middlewares = new zn;\n            this._createPrismaPromise = Co();\n            this.$metrics = new Fr(this);\n            this.$extends = za;\n            e = n?.__internal?.configOverride?.(e) ?? e, pl(e), n && pu(n, e);\n            let i = new hu.EventEmitter().on(\"error\", ()=>{});\n            this._extensions = Lr.empty(), this._previewFeatures = Yn(e), this._clientVersion = e.clientVersion ?? ou, this._activeProvider = e.activeProvider, this._globalOmit = n?.omit, this._tracingHelper = Zl();\n            let o = e.relativeEnvPaths && {\n                rootEnvPath: e.relativeEnvPaths.rootEnvPath && ti.default.resolve(e.dirname, e.relativeEnvPaths.rootEnvPath),\n                schemaEnvPath: e.relativeEnvPaths.schemaEnvPath && ti.default.resolve(e.dirname, e.relativeEnvPaths.schemaEnvPath)\n            }, s;\n            if (n?.adapter) {\n                s = n.adapter;\n                let l = e.activeProvider === \"postgresql\" || e.activeProvider === \"cockroachdb\" ? \"postgres\" : e.activeProvider;\n                if (s.provider !== l) throw new T(`The Driver Adapter \\`${s.adapterName}\\`, based on \\`${s.provider}\\`, is not compatible with the provider \\`${l}\\` specified in the Prisma schema.`, this._clientVersion);\n                if (n.datasources || n.datasourceUrl !== void 0) throw new T(\"Custom datasource configuration is not compatible with Prisma Driver Adapters. Please define the database connection string directly in the Driver Adapter configuration.\", this._clientVersion);\n            }\n            let a = !s && o && st(o, {\n                conflictCheck: \"none\"\n            }) || e.injectableEdgeEnv?.();\n            try {\n                let l = n ?? {}, u = l.__internal ?? {}, c = u.debug === !0;\n                c && N.enable(\"prisma:client\");\n                let p = ti.default.resolve(e.dirname, e.relativePath);\n                yu.default.existsSync(p) || (p = e.dirname), rr(\"dirname\", e.dirname), rr(\"relativePath\", e.relativePath), rr(\"cwd\", p);\n                let d = u.engine || {};\n                if (l.errorFormat ? this._errorFormat = l.errorFormat :  false ? 0 : process.env.NO_COLOR ? this._errorFormat = \"colorless\" : this._errorFormat = \"colorless\", this._runtimeDataModel = e.runtimeDataModel, this._engineConfig = {\n                    cwd: p,\n                    dirname: e.dirname,\n                    enableDebugLogs: c,\n                    allowTriggerPanic: d.allowTriggerPanic,\n                    prismaPath: d.binaryPath ?? void 0,\n                    engineEndpoint: d.endpoint,\n                    generator: e.generator,\n                    showColors: this._errorFormat === \"pretty\",\n                    logLevel: l.log && eu(l.log),\n                    logQueries: l.log && !!(typeof l.log == \"string\" ? l.log === \"query\" : l.log.find((f)=>typeof f == \"string\" ? f === \"query\" : f.level === \"query\")),\n                    env: a?.parsed ?? {},\n                    flags: [],\n                    engineWasm: e.engineWasm,\n                    compilerWasm: e.compilerWasm,\n                    clientVersion: e.clientVersion,\n                    engineVersion: e.engineVersion,\n                    previewFeatures: this._previewFeatures,\n                    activeProvider: e.activeProvider,\n                    inlineSchema: e.inlineSchema,\n                    overrideDatasources: dl(l, e.datasourceNames),\n                    inlineDatasources: e.inlineDatasources,\n                    inlineSchemaHash: e.inlineSchemaHash,\n                    tracingHelper: this._tracingHelper,\n                    transactionOptions: {\n                        maxWait: l.transactionOptions?.maxWait ?? 2e3,\n                        timeout: l.transactionOptions?.timeout ?? 5e3,\n                        isolationLevel: l.transactionOptions?.isolationLevel\n                    },\n                    logEmitter: i,\n                    isBundled: e.isBundled,\n                    adapter: s\n                }, this._accelerateEngineConfig = {\n                    ...this._engineConfig,\n                    accelerateUtils: {\n                        resolveDatasourceUrl: Vr,\n                        getBatchRequestPayload: $r,\n                        prismaGraphQLToJSError: qr,\n                        PrismaClientUnknownRequestError: j,\n                        PrismaClientInitializationError: T,\n                        PrismaClientKnownRequestError: z,\n                        debug: N(\"prisma:client:accelerateEngine\"),\n                        engineVersion: fu.version,\n                        clientVersion: e.clientVersion\n                    }\n                }, rr(\"clientVersion\", e.clientVersion), this._engine = Vl(e, this._engineConfig), this._requestHandler = new ri(this, i), l.log) for (let f of l.log){\n                    let h = typeof f == \"string\" ? f : f.emit === \"stdout\" ? f.level : null;\n                    h && this.$on(h, (g)=>{\n                        nt.log(`${nt.tags[h] ?? \"\"}`, g.message || g.query);\n                    });\n                }\n            } catch (l) {\n                throw l.clientVersion = this._clientVersion, l;\n            }\n            return this._appliedParent = Pt(this);\n        }\n        get [Symbol.toStringTag]() {\n            return \"PrismaClient\";\n        }\n        $use(n) {\n            this._middlewares.use(n);\n        }\n        $on(n, i) {\n            return n === \"beforeExit\" ? this._engine.onBeforeExit(i) : n && this._engineConfig.logEmitter.on(n, i), this;\n        }\n        $connect() {\n            try {\n                return this._engine.start();\n            } catch (n) {\n                throw n.clientVersion = this._clientVersion, n;\n            }\n        }\n        async $disconnect() {\n            try {\n                await this._engine.stop();\n            } catch (n) {\n                throw n.clientVersion = this._clientVersion, n;\n            } finally{\n                Qo();\n            }\n        }\n        $executeRawInternal(n, i, o, s) {\n            let a = this._activeProvider;\n            return this._request({\n                action: \"executeRaw\",\n                args: o,\n                transaction: n,\n                clientMethod: i,\n                argsMapper: Ao({\n                    clientMethod: i,\n                    activeProvider: a\n                }),\n                callsite: Ze(this._errorFormat),\n                dataPath: [],\n                middlewareArgsMapper: s\n            });\n        }\n        $executeRaw(n, ...i) {\n            return this._createPrismaPromise((o)=>{\n                if (n.raw !== void 0 || n.sql !== void 0) {\n                    let [s, a] = mu(n, i);\n                    return Ro(this._activeProvider, s.text, s.values, Array.isArray(n) ? \"prisma.$executeRaw`<SQL>`\" : \"prisma.$executeRaw(sql`<SQL>`)\"), this.$executeRawInternal(o, \"$executeRaw\", s, a);\n                }\n                throw new Z(\"`$executeRaw` is a tag function, please use it like the following:\\n```\\nconst result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`\\n```\\n\\nOr read our docs at https://www.prisma.io/docs/concepts/components/prisma-client/raw-database-access#executeraw\\n\", {\n                    clientVersion: this._clientVersion\n                });\n            });\n        }\n        $executeRawUnsafe(n, ...i) {\n            return this._createPrismaPromise((o)=>(Ro(this._activeProvider, n, i, \"prisma.$executeRawUnsafe(<SQL>, [...values])\"), this.$executeRawInternal(o, \"$executeRawUnsafe\", [\n                    n,\n                    ...i\n                ])));\n        }\n        $runCommandRaw(n) {\n            if (e.activeProvider !== \"mongodb\") throw new Z(`The ${e.activeProvider} provider does not support $runCommandRaw. Use the mongodb provider.`, {\n                clientVersion: this._clientVersion\n            });\n            return this._createPrismaPromise((i)=>this._request({\n                    args: n,\n                    clientMethod: \"$runCommandRaw\",\n                    dataPath: [],\n                    action: \"runCommandRaw\",\n                    argsMapper: Bl,\n                    callsite: Ze(this._errorFormat),\n                    transaction: i\n                }));\n        }\n        async $queryRawInternal(n, i, o, s) {\n            let a = this._activeProvider;\n            return this._request({\n                action: \"queryRaw\",\n                args: o,\n                transaction: n,\n                clientMethod: i,\n                argsMapper: Ao({\n                    clientMethod: i,\n                    activeProvider: a\n                }),\n                callsite: Ze(this._errorFormat),\n                dataPath: [],\n                middlewareArgsMapper: s\n            });\n        }\n        $queryRaw(n, ...i) {\n            return this._createPrismaPromise((o)=>{\n                if (n.raw !== void 0 || n.sql !== void 0) return this.$queryRawInternal(o, \"$queryRaw\", ...mu(n, i));\n                throw new Z(\"`$queryRaw` is a tag function, please use it like the following:\\n```\\nconst result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`\\n```\\n\\nOr read our docs at https://www.prisma.io/docs/concepts/components/prisma-client/raw-database-access#queryraw\\n\", {\n                    clientVersion: this._clientVersion\n                });\n            });\n        }\n        $queryRawTyped(n) {\n            return this._createPrismaPromise((i)=>{\n                if (!this._hasPreviewFlag(\"typedSql\")) throw new Z(\"`typedSql` preview feature must be enabled in order to access $queryRawTyped API\", {\n                    clientVersion: this._clientVersion\n                });\n                return this.$queryRawInternal(i, \"$queryRawTyped\", n);\n            });\n        }\n        $queryRawUnsafe(n, ...i) {\n            return this._createPrismaPromise((o)=>this.$queryRawInternal(o, \"$queryRawUnsafe\", [\n                    n,\n                    ...i\n                ]));\n        }\n        _transactionWithArray({ promises: n, options: i }) {\n            let o = Vf.nextId(), s = Xl(n.length), a = n.map((l, u)=>{\n                if (l?.[Symbol.toStringTag] !== \"PrismaPromise\") throw new Error(\"All elements of the array need to be Prisma Client promises. Hint: Please make sure you are not awaiting the Prisma client calls you intended to pass in the $transaction function.\");\n                let c = i?.isolationLevel ?? this._engineConfig.transactionOptions.isolationLevel, p = {\n                    kind: \"batch\",\n                    id: o,\n                    index: u,\n                    isolationLevel: c,\n                    lock: s\n                };\n                return l.requestTransaction?.(p) ?? l;\n            });\n            return du(a);\n        }\n        async _transactionWithCallback({ callback: n, options: i }) {\n            let o = {\n                traceparent: this._tracingHelper.getTraceParent()\n            }, s = {\n                maxWait: i?.maxWait ?? this._engineConfig.transactionOptions.maxWait,\n                timeout: i?.timeout ?? this._engineConfig.transactionOptions.timeout,\n                isolationLevel: i?.isolationLevel ?? this._engineConfig.transactionOptions.isolationLevel\n            }, a = await this._engine.transaction(\"start\", o, s), l;\n            try {\n                let u = {\n                    kind: \"itx\",\n                    ...a\n                };\n                l = await n(this._createItxClient(u)), await this._engine.transaction(\"commit\", o, a);\n            } catch (u) {\n                throw await this._engine.transaction(\"rollback\", o, a).catch(()=>{}), u;\n            }\n            return l;\n        }\n        _createItxClient(n) {\n            return he(Pt(he(Ya(this), [\n                re(\"_appliedParent\", ()=>this._appliedParent._createItxClient(n)),\n                re(\"_createPrismaPromise\", ()=>Co(n)),\n                re(jf, ()=>n.id)\n            ])), [\n                Mr(rl)\n            ]);\n        }\n        $transaction(n, i) {\n            let o;\n            typeof n == \"function\" ? this._engineConfig.adapter?.adapterName === \"@prisma/adapter-d1\" ? o = ()=>{\n                throw new Error(\"Cloudflare D1 does not support interactive transactions. We recommend you to refactor your queries with that limitation in mind, and use batch transactions with `prisma.$transactions([])` where applicable.\");\n            } : o = ()=>this._transactionWithCallback({\n                    callback: n,\n                    options: i\n                }) : o = ()=>this._transactionWithArray({\n                    promises: n,\n                    options: i\n                });\n            let s = {\n                name: \"transaction\",\n                attributes: {\n                    method: \"$transaction\"\n                }\n            };\n            return this._tracingHelper.runInChildSpan(s, o);\n        }\n        _request(n) {\n            n.otelParentCtx = this._tracingHelper.getActiveContext();\n            let i = n.middlewareArgsMapper ?? qf, o = {\n                args: i.requestArgsToMiddlewareArgs(n.args),\n                dataPath: n.dataPath,\n                runInTransaction: !!n.transaction,\n                action: n.action,\n                model: n.model\n            }, s = {\n                middleware: {\n                    name: \"middleware\",\n                    middleware: !0,\n                    attributes: {\n                        method: \"$use\"\n                    },\n                    active: !1\n                },\n                operation: {\n                    name: \"operation\",\n                    attributes: {\n                        method: o.action,\n                        model: o.model,\n                        name: o.model ? `${o.model}.${o.action}` : o.action\n                    }\n                }\n            }, a = -1, l = async (u)=>{\n                let c = this._middlewares.get(++a);\n                if (c) return this._tracingHelper.runInChildSpan(s.middleware, (S)=>c(u, (P)=>(S?.end(), l(P))));\n                let { runInTransaction: p, args: d, ...f } = u, h = {\n                    ...n,\n                    ...f\n                };\n                d && (h.args = i.middlewareArgsToRequestArgs(d)), n.transaction !== void 0 && p === !1 && delete h.transaction;\n                let g = await ol(this, h);\n                return h.model ? el({\n                    result: g,\n                    modelName: h.model,\n                    args: h.args,\n                    extensions: this._extensions,\n                    runtimeDataModel: this._runtimeDataModel,\n                    globalOmit: this._globalOmit\n                }) : g;\n            };\n            return this._tracingHelper.runInChildSpan(s.operation, ()=>new gu.AsyncResource(\"prisma-client-request\").runInAsyncScope(()=>l(o)));\n        }\n        async _executeRequest({ args: n, clientMethod: i, dataPath: o, callsite: s, action: a, model: l, argsMapper: u, transaction: c, unpacker: p, otelParentCtx: d, customDataProxyFetch: f }) {\n            try {\n                n = u ? u(n) : n;\n                let h = {\n                    name: \"serialize\"\n                }, g = this._tracingHelper.runInChildSpan(h, ()=>Mn({\n                        modelName: l,\n                        runtimeDataModel: this._runtimeDataModel,\n                        action: a,\n                        args: n,\n                        clientMethod: i,\n                        callsite: s,\n                        extensions: this._extensions,\n                        errorFormat: this._errorFormat,\n                        clientVersion: this._clientVersion,\n                        previewFeatures: this._previewFeatures,\n                        globalOmit: this._globalOmit\n                    }));\n                return N.enabled(\"prisma:client\") && (rr(\"Prisma Client call:\"), rr(`prisma.${i}(${qa(n)})`), rr(\"Generated request:\"), rr(JSON.stringify(g, null, 2) + `\n`)), c?.kind === \"batch\" && await c.lock, this._requestHandler.request({\n                    protocolQuery: g,\n                    modelName: l,\n                    action: a,\n                    clientMethod: i,\n                    dataPath: o,\n                    callsite: s,\n                    args: n,\n                    extensions: this._extensions,\n                    transaction: c,\n                    unpacker: p,\n                    otelParentCtx: d,\n                    otelChildCtx: this._tracingHelper.getActiveContext(),\n                    globalOmit: this._globalOmit,\n                    customDataProxyFetch: f\n                });\n            } catch (h) {\n                throw h.clientVersion = this._clientVersion, h;\n            }\n        }\n        _hasPreviewFlag(n) {\n            return !!this._engineConfig.previewFeatures?.includes(n);\n        }\n        $applyPendingMigrations() {\n            return this._engine.applyPendingMigrations();\n        }\n    }\n    return r;\n}\nfunction mu(e, r) {\n    return Bf(e) ? [\n        new oe(e, r),\n        Kl\n    ] : [\n        e,\n        Yl\n    ];\n}\nfunction Bf(e) {\n    return Array.isArray(e) && Array.isArray(e.raw);\n}\nvar Uf = new Set([\n    \"toJSON\",\n    \"$$typeof\",\n    \"asymmetricMatch\",\n    Symbol.iterator,\n    Symbol.toStringTag,\n    Symbol.isConcatSpreadable,\n    Symbol.toPrimitive\n]);\nfunction Eu(e) {\n    return new Proxy(e, {\n        get (r, t) {\n            if (t in r) return r[t];\n            if (!Uf.has(t)) throw new TypeError(`Invalid enum value: ${String(t)}`);\n        }\n    });\n}\nfunction wu(e) {\n    st(e, {\n        conflictCheck: \"warn\"\n    });\n}\n0 && (0); /*! Bundled license information:\n\ndecimal.js/decimal.mjs:\n  (*!\n   *  decimal.js v10.5.0\n   *  An arbitrary-precision Decimal type for JavaScript.\n   *  https://github.com/MikeMcl/decimal.js\n   *  Copyright (c) 2025 Michael Mclaughlin <M8ch88l@gmail.com>\n   *  MIT Licence\n   *)\n*/  //# sourceMappingURL=library.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9nZW5lcmF0ZWQvcHJpc21hL3J1bnRpbWUvbGlicmFyeS5qcyIsIm1hcHBpbmdzIjoiQUFDQTtrQkFDa0IsR0FDTDtBQUFBLElBQUlBLEtBQUdDLE9BQU9DLE1BQU07QUFBQyxJQUFJQyxLQUFHRixPQUFPRyxjQUFjO0FBQUMsSUFBSUMsS0FBR0osT0FBT0ssd0JBQXdCO0FBQUMsSUFBSUMsS0FBR04sT0FBT08sbUJBQW1CO0FBQUMsSUFBSUMsS0FBR1IsT0FBT1MsY0FBYyxFQUFDQyxLQUFHVixPQUFPVyxTQUFTLENBQUNDLGNBQWM7QUFBQyxJQUFJQyxLQUFHLENBQUNDLEdBQUVDLElBQUksSUFBS0QsQ0FBQUEsS0FBSUMsQ0FBQUEsSUFBRUQsRUFBRUEsSUFBRSxFQUFDLEdBQUdDLENBQUFBO0FBQUcsSUFBSUMsS0FBRyxDQUFDRixHQUFFQyxJQUFJLElBQUtBLENBQUFBLEtBQUdELEVBQUUsQ0FBQ0MsSUFBRTtZQUFDRSxTQUFRLENBQUM7UUFBQyxHQUFHQSxPQUFPLEVBQUNGLElBQUdBLEVBQUVFLE9BQU8sR0FBRUMsS0FBRyxDQUFDSixHQUFFQztJQUFLLElBQUksSUFBSUksS0FBS0osRUFBRWIsR0FBR1ksR0FBRUssR0FBRTtRQUFDQyxLQUFJTCxDQUFDLENBQUNJLEVBQUU7UUFBQ0UsWUFBVyxDQUFDO0lBQUM7QUFBRSxHQUFFQyxLQUFHLENBQUNSLEdBQUVDLEdBQUVJLEdBQUVJO0lBQUssSUFBR1IsS0FBRyxPQUFPQSxLQUFHLFlBQVUsT0FBT0EsS0FBRyxZQUFXLEtBQUksSUFBSVMsS0FBS2xCLEdBQUdTLEdBQUcsQ0FBQ0wsR0FBR2UsSUFBSSxDQUFDWCxHQUFFVSxNQUFJQSxNQUFJTCxLQUFHakIsR0FBR1ksR0FBRVUsR0FBRTtRQUFDSixLQUFJLElBQUlMLENBQUMsQ0FBQ1MsRUFBRTtRQUFDSCxZQUFXLENBQUVFLENBQUFBLElBQUVuQixHQUFHVyxHQUFFUyxFQUFDLEtBQUlELEVBQUVGLFVBQVU7SUFBQTtJQUFHLE9BQU9QO0FB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QVE7SUFBQ3RpRCxPQUFPNFYsV0FBVztJQUFDNVYsT0FBT3VpRCxrQkFBa0I7SUFBQ3ZpRCxPQUFPd2lELFdBQVc7Q0FBQztBQUFFLFNBQVM1cUQsR0FBR3hULENBQUM7SUFBRSxPQUFPLElBQUl1YSxNQUFNdmEsR0FBRTtRQUFDTSxLQUFJTCxDQUFDLEVBQUNJLENBQUM7WUFBRSxJQUFHQSxLQUFLSixHQUFFLE9BQU9BLENBQUMsQ0FBQ0ksRUFBRTtZQUFDLElBQUcsQ0FBQzQ5RCxHQUFHdGpELEdBQUcsQ0FBQ3RhLElBQUcsTUFBTSxJQUFJMEksVUFBVSxDQUFDLG9CQUFvQixFQUFFZ2xCLE9BQU8xdEIsR0FBRyxDQUFDO1FBQUM7SUFBQztBQUFFO0FBQUMsU0FBU2lVLEdBQUd0VSxDQUFDO0lBQUVtd0IsR0FBR253QixHQUFFO1FBQUNzd0IsZUFBYztJQUFNO0FBQUU7QUFBQyxLQUFJN2IsQ0FBQUEsQ0FBdWQsR0FDajhDOzs7Ozs7Ozs7O0FBVUEsSUFDQSxtQ0FBbUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jb29sLWNhdC1yZXNvcnQtYmFja29mZmljZS8uL2dlbmVyYXRlZC9wcmlzbWEvcnVudGltZS9saWJyYXJ5LmpzP2FhMDQiXSwic291cmNlc0NvbnRlbnQiOlsiXG4vKiAhISEgVGhpcyBpcyBjb2RlIGdlbmVyYXRlZCBieSBQcmlzbWEuIERvIG5vdCBlZGl0IGRpcmVjdGx5LiAhISFcbi8qIGVzbGludC1kaXNhYmxlICovXG5cInVzZSBzdHJpY3RcIjt2YXIgeHU9T2JqZWN0LmNyZWF0ZTt2YXIgVnQ9T2JqZWN0LmRlZmluZVByb3BlcnR5O3ZhciB2dT1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO3ZhciBQdT1PYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lczt2YXIgVHU9T2JqZWN0LmdldFByb3RvdHlwZU9mLFN1PU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7dmFyIE9vPShlLHIpPT4oKT0+KGUmJihyPWUoZT0wKSkscik7dmFyIG5lPShlLHIpPT4oKT0+KHJ8fGUoKHI9e2V4cG9ydHM6e319KS5leHBvcnRzLHIpLHIuZXhwb3J0cyksdHI9KGUscik9Pntmb3IodmFyIHQgaW4gcilWdChlLHQse2dldDpyW3RdLGVudW1lcmFibGU6ITB9KX0sX289KGUscix0LG4pPT57aWYociYmdHlwZW9mIHI9PVwib2JqZWN0XCJ8fHR5cGVvZiByPT1cImZ1bmN0aW9uXCIpZm9yKGxldCBpIG9mIFB1KHIpKSFTdS5jYWxsKGUsaSkmJmkhPT10JiZWdChlLGkse2dldDooKT0+cltpXSxlbnVtZXJhYmxlOiEobj12dShyLGkpKXx8bi5lbnVtZXJhYmxlfSk7cmV0dXJuIGV9O3ZhciBDPShlLHIsdCk9Pih0PWUhPW51bGw/eHUoVHUoZSkpOnt9LF9vKHJ8fCFlfHwhZS5fX2VzTW9kdWxlP1Z0KHQsXCJkZWZhdWx0XCIse3ZhbHVlOmUsZW51bWVyYWJsZTohMH0pOnQsZSkpLFJ1PWU9Pl9vKFZ0KHt9LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLGUpO3ZhciB5aT1uZSgoRmcsc3MpPT57XCJ1c2Ugc3RyaWN0XCI7c3MuZXhwb3J0cz0oZSxyPXByb2Nlc3MuYXJndik9PntsZXQgdD1lLnN0YXJ0c1dpdGgoXCItXCIpP1wiXCI6ZS5sZW5ndGg9PT0xP1wiLVwiOlwiLS1cIixuPXIuaW5kZXhPZih0K2UpLGk9ci5pbmRleE9mKFwiLS1cIik7cmV0dXJuIG4hPT0tMSYmKGk9PT0tMXx8bjxpKX19KTt2YXIgdXM9bmUoKE1nLGxzKT0+e1widXNlIHN0cmljdFwiO3ZhciBqYz1yZXF1aXJlKFwibm9kZTpvc1wiKSxhcz1yZXF1aXJlKFwibm9kZTp0dHlcIiksZGU9eWkoKSx7ZW52Okd9PXByb2Nlc3MsUWU7ZGUoXCJuby1jb2xvclwiKXx8ZGUoXCJuby1jb2xvcnNcIil8fGRlKFwiY29sb3I9ZmFsc2VcIil8fGRlKFwiY29sb3I9bmV2ZXJcIik/UWU9MDooZGUoXCJjb2xvclwiKXx8ZGUoXCJjb2xvcnNcIil8fGRlKFwiY29sb3I9dHJ1ZVwiKXx8ZGUoXCJjb2xvcj1hbHdheXNcIikpJiYoUWU9MSk7XCJGT1JDRV9DT0xPUlwiaW4gRyYmKEcuRk9SQ0VfQ09MT1I9PT1cInRydWVcIj9RZT0xOkcuRk9SQ0VfQ09MT1I9PT1cImZhbHNlXCI/UWU9MDpRZT1HLkZPUkNFX0NPTE9SLmxlbmd0aD09PTA/MTpNYXRoLm1pbihwYXJzZUludChHLkZPUkNFX0NPTE9SLDEwKSwzKSk7ZnVuY3Rpb24gYmkoZSl7cmV0dXJuIGU9PT0wPyExOntsZXZlbDplLGhhc0Jhc2ljOiEwLGhhczI1NjplPj0yLGhhczE2bTplPj0zfX1mdW5jdGlvbiBFaShlLHIpe2lmKFFlPT09MClyZXR1cm4gMDtpZihkZShcImNvbG9yPTE2bVwiKXx8ZGUoXCJjb2xvcj1mdWxsXCIpfHxkZShcImNvbG9yPXRydWVjb2xvclwiKSlyZXR1cm4gMztpZihkZShcImNvbG9yPTI1NlwiKSlyZXR1cm4gMjtpZihlJiYhciYmUWU9PT12b2lkIDApcmV0dXJuIDA7bGV0IHQ9UWV8fDA7aWYoRy5URVJNPT09XCJkdW1iXCIpcmV0dXJuIHQ7aWYocHJvY2Vzcy5wbGF0Zm9ybT09PVwid2luMzJcIil7bGV0IG49amMucmVsZWFzZSgpLnNwbGl0KFwiLlwiKTtyZXR1cm4gTnVtYmVyKG5bMF0pPj0xMCYmTnVtYmVyKG5bMl0pPj0xMDU4Nj9OdW1iZXIoblsyXSk+PTE0OTMxPzM6MjoxfWlmKFwiQ0lcImluIEcpcmV0dXJuW1wiVFJBVklTXCIsXCJDSVJDTEVDSVwiLFwiQVBQVkVZT1JcIixcIkdJVExBQl9DSVwiLFwiR0lUSFVCX0FDVElPTlNcIixcIkJVSUxES0lURVwiXS5zb21lKG49Pm4gaW4gRyl8fEcuQ0lfTkFNRT09PVwiY29kZXNoaXBcIj8xOnQ7aWYoXCJURUFNQ0lUWV9WRVJTSU9OXCJpbiBHKXJldHVybi9eKDlcXC4oMCpbMS05XVxcZCopXFwufFxcZHsyLH1cXC4pLy50ZXN0KEcuVEVBTUNJVFlfVkVSU0lPTik/MTowO2lmKEcuQ09MT1JURVJNPT09XCJ0cnVlY29sb3JcIilyZXR1cm4gMztpZihcIlRFUk1fUFJPR1JBTVwiaW4gRyl7bGV0IG49cGFyc2VJbnQoKEcuVEVSTV9QUk9HUkFNX1ZFUlNJT058fFwiXCIpLnNwbGl0KFwiLlwiKVswXSwxMCk7c3dpdGNoKEcuVEVSTV9QUk9HUkFNKXtjYXNlXCJpVGVybS5hcHBcIjpyZXR1cm4gbj49Mz8zOjI7Y2FzZVwiQXBwbGVfVGVybWluYWxcIjpyZXR1cm4gMn19cmV0dXJuLy0yNTYoY29sb3IpPyQvaS50ZXN0KEcuVEVSTSk/MjovXnNjcmVlbnxeeHRlcm18XnZ0MTAwfF52dDIyMHxecnh2dHxjb2xvcnxhbnNpfGN5Z3dpbnxsaW51eC9pLnRlc3QoRy5URVJNKXx8XCJDT0xPUlRFUk1cImluIEc/MTp0fWZ1bmN0aW9uIFZjKGUpe2xldCByPUVpKGUsZSYmZS5pc1RUWSk7cmV0dXJuIGJpKHIpfWxzLmV4cG9ydHM9e3N1cHBvcnRzQ29sb3I6VmMsc3Rkb3V0OmJpKEVpKCEwLGFzLmlzYXR0eSgxKSkpLHN0ZGVycjpiaShFaSghMCxhcy5pc2F0dHkoMikpKX19KTt2YXIgZHM9bmUoKCRnLHBzKT0+e1widXNlIHN0cmljdFwiO3ZhciBCYz11cygpLGJyPXlpKCk7ZnVuY3Rpb24gY3MoZSl7aWYoL15cXGR7Myw0fSQvLnRlc3QoZSkpe2xldCB0PS8oXFxkezEsMn0pKFxcZHsyfSkvLmV4ZWMoZSl8fFtdO3JldHVybnttYWpvcjowLG1pbm9yOnBhcnNlSW50KHRbMV0sMTApLHBhdGNoOnBhcnNlSW50KHRbMl0sMTApfX1sZXQgcj0oZXx8XCJcIikuc3BsaXQoXCIuXCIpLm1hcCh0PT5wYXJzZUludCh0LDEwKSk7cmV0dXJue21ham9yOnJbMF0sbWlub3I6clsxXSxwYXRjaDpyWzJdfX1mdW5jdGlvbiB3aShlKXtsZXR7Q0k6cixGT1JDRV9IWVBFUkxJTks6dCxORVRMSUZZOm4sVEVBTUNJVFlfVkVSU0lPTjppLFRFUk1fUFJPR1JBTTpvLFRFUk1fUFJPR1JBTV9WRVJTSU9OOnMsVlRFX1ZFUlNJT046YSxURVJNOmx9PXByb2Nlc3MuZW52O2lmKHQpcmV0dXJuISh0Lmxlbmd0aD4wJiZwYXJzZUludCh0LDEwKT09PTApO2lmKGJyKFwibm8taHlwZXJsaW5rXCIpfHxicihcIm5vLWh5cGVybGlua3NcIil8fGJyKFwiaHlwZXJsaW5rPWZhbHNlXCIpfHxicihcImh5cGVybGluaz1uZXZlclwiKSlyZXR1cm4hMTtpZihicihcImh5cGVybGluaz10cnVlXCIpfHxicihcImh5cGVybGluaz1hbHdheXNcIil8fG4pcmV0dXJuITA7aWYoIUJjLnN1cHBvcnRzQ29sb3IoZSl8fGUmJiFlLmlzVFRZKXJldHVybiExO2lmKFwiV1RfU0VTU0lPTlwiaW4gcHJvY2Vzcy5lbnYpcmV0dXJuITA7aWYocHJvY2Vzcy5wbGF0Zm9ybT09PVwid2luMzJcInx8cnx8aSlyZXR1cm4hMTtpZihvKXtsZXQgdT1jcyhzfHxcIlwiKTtzd2l0Y2gobyl7Y2FzZVwiaVRlcm0uYXBwXCI6cmV0dXJuIHUubWFqb3I9PT0zP3UubWlub3I+PTE6dS5tYWpvcj4zO2Nhc2VcIldlelRlcm1cIjpyZXR1cm4gdS5tYWpvcj49MjAyMDA2MjA7Y2FzZVwidnNjb2RlXCI6cmV0dXJuIHUubWFqb3I+MXx8dS5tYWpvcj09PTEmJnUubWlub3I+PTcyO2Nhc2VcImdob3N0dHlcIjpyZXR1cm4hMH19aWYoYSl7aWYoYT09PVwiMC41MC4wXCIpcmV0dXJuITE7bGV0IHU9Y3MoYSk7cmV0dXJuIHUubWFqb3I+MHx8dS5taW5vcj49NTB9c3dpdGNoKGwpe2Nhc2VcImFsYWNyaXR0eVwiOnJldHVybiEwfXJldHVybiExfXBzLmV4cG9ydHM9e3N1cHBvcnRzSHlwZXJsaW5rOndpLHN0ZG91dDp3aShwcm9jZXNzLnN0ZG91dCksc3RkZXJyOndpKHByb2Nlc3Muc3RkZXJyKX19KTt2YXIgbXM9bmUoKHpnLFVjKT0+e1VjLmV4cG9ydHM9e25hbWU6XCJAcHJpc21hL2ludGVybmFsc1wiLHZlcnNpb246XCI2LjEzLjBcIixkZXNjcmlwdGlvbjpcIlRoaXMgcGFja2FnZSBpcyBpbnRlbmRlZCBmb3IgUHJpc21hJ3MgaW50ZXJuYWwgdXNlXCIsbWFpbjpcImRpc3QvaW5kZXguanNcIix0eXBlczpcImRpc3QvaW5kZXguZC50c1wiLHJlcG9zaXRvcnk6e3R5cGU6XCJnaXRcIix1cmw6XCJodHRwczovL2dpdGh1Yi5jb20vcHJpc21hL3ByaXNtYS5naXRcIixkaXJlY3Rvcnk6XCJwYWNrYWdlcy9pbnRlcm5hbHNcIn0saG9tZXBhZ2U6XCJodHRwczovL3d3dy5wcmlzbWEuaW9cIixhdXRob3I6XCJUaW0gU3VjaGFuZWsgPHN1Y2hhbmVrQHByaXNtYS5pbz5cIixidWdzOlwiaHR0cHM6Ly9naXRodWIuY29tL3ByaXNtYS9wcmlzbWEvaXNzdWVzXCIsbGljZW5zZTpcIkFwYWNoZS0yLjBcIixzY3JpcHRzOntkZXY6XCJERVY9dHJ1ZSB0c3ggaGVscGVycy9idWlsZC50c1wiLGJ1aWxkOlwidHN4IGhlbHBlcnMvYnVpbGQudHNcIix0ZXN0OlwiZG90ZW52IC1lIC4uLy4uLy5kYi5lbnYgLS0gamVzdCAtLXNpbGVudFwiLHByZXB1Ymxpc2hPbmx5OlwicG5wbSBydW4gYnVpbGRcIn0sZmlsZXM6W1wiUkVBRE1FLm1kXCIsXCJkaXN0XCIsXCIhKiovbGlicXVlcnlfZW5naW5lKlwiLFwiIWRpc3QvZ2V0LWdlbmVyYXRvcnMvZW5naW5lcy8qXCIsXCJzY3JpcHRzXCJdLGRldkRlcGVuZGVuY2llczp7XCJAYmFiZWwvaGVscGVyLXZhbGlkYXRvci1pZGVudGlmaWVyXCI6XCI3LjI1LjlcIixcIkBvcGVudGVsZW1ldHJ5L2FwaVwiOlwiMS45LjBcIixcIkBzd2MvY29yZVwiOlwiMS4xMS41XCIsXCJAc3djL2plc3RcIjpcIjAuMi4zN1wiLFwiQHR5cGVzL2JhYmVsX19oZWxwZXItdmFsaWRhdG9yLWlkZW50aWZpZXJcIjpcIjcuMTUuMlwiLFwiQHR5cGVzL2plc3RcIjpcIjI5LjUuMTRcIixcIkB0eXBlcy9ub2RlXCI6XCIxOC4xOS43NlwiLFwiQHR5cGVzL3Jlc29sdmVcIjpcIjEuMjAuNlwiLGFyY2hpdmVyOlwiNi4wLjJcIixcImNoZWNrcG9pbnQtY2xpZW50XCI6XCIxLjEuMzNcIixcImNsaS10cnVuY2F0ZVwiOlwiNC4wLjBcIixkb3RlbnY6XCIxNi41LjBcIixlc2J1aWxkOlwiMC4yNS41XCIsXCJlc2NhcGUtc3RyaW5nLXJlZ2V4cFwiOlwiNS4wLjBcIixleGVjYTpcIjUuMS4xXCIsXCJmYXN0LWdsb2JcIjpcIjMuMy4zXCIsXCJmaW5kLXVwXCI6XCI3LjAuMFwiLFwiZnAtdHNcIjpcIjIuMTYuOVwiLFwiZnMtZXh0cmFcIjpcIjExLjMuMFwiLFwiZnMtamV0cGFja1wiOlwiNS4xLjBcIixcImdsb2JhbC1kaXJzXCI6XCI0LjAuMFwiLGdsb2JieTpcIjExLjEuMFwiLFwiaWRlbnRpZmllci1yZWdleFwiOlwiMS4wLjBcIixcImluZGVudC1zdHJpbmdcIjpcIjQuMC4wXCIsXCJpcy13aW5kb3dzXCI6XCIxLjAuMlwiLFwiaXMtd3NsXCI6XCIzLjEuMFwiLGplc3Q6XCIyOS43LjBcIixcImplc3QtanVuaXRcIjpcIjE2LjAuMFwiLGtsZXVyOlwiNC4xLjVcIixcIm1vY2stc3RkaW5cIjpcIjEuMC4wXCIsXCJuZXctZ2l0aHViLWlzc3VlLXVybFwiOlwiMC4yLjFcIixcIm5vZGUtZmV0Y2hcIjpcIjMuMy4yXCIsXCJucG0tcGFja2xpc3RcIjpcIjUuMS4zXCIsb3BlbjpcIjcuNC4yXCIsXCJwLW1hcFwiOlwiNC4wLjBcIixcInJlYWQtcGFja2FnZS11cFwiOlwiMTEuMC4wXCIscmVzb2x2ZTpcIjEuMjIuMTBcIixcInN0cmluZy13aWR0aFwiOlwiNy4yLjBcIixcInN0cmlwLWFuc2lcIjpcIjYuMC4xXCIsXCJzdHJpcC1pbmRlbnRcIjpcIjQuMC4wXCIsXCJ0ZW1wLWRpclwiOlwiMi4wLjBcIix0ZW1weTpcIjEuMC4xXCIsXCJ0ZXJtaW5hbC1saW5rXCI6XCI0LjAuMFwiLHRtcDpcIjAuMi4zXCIsXCJ0cy1ub2RlXCI6XCIxMC45LjJcIixcInRzLXBhdHRlcm5cIjpcIjUuNi4yXCIsXCJ0cy10b29sYmVsdFwiOlwiOS42LjBcIix0eXBlc2NyaXB0OlwiNS40LjVcIix5YXJuOlwiMS4yMi4yMlwifSxkZXBlbmRlbmNpZXM6e1wiQHByaXNtYS9jb25maWdcIjpcIndvcmtzcGFjZToqXCIsXCJAcHJpc21hL2RlYnVnXCI6XCJ3b3Jrc3BhY2U6KlwiLFwiQHByaXNtYS9kbW1mXCI6XCJ3b3Jrc3BhY2U6KlwiLFwiQHByaXNtYS9kcml2ZXItYWRhcHRlci11dGlsc1wiOlwid29ya3NwYWNlOipcIixcIkBwcmlzbWEvZW5naW5lc1wiOlwid29ya3NwYWNlOipcIixcIkBwcmlzbWEvZmV0Y2gtZW5naW5lXCI6XCJ3b3Jrc3BhY2U6KlwiLFwiQHByaXNtYS9nZW5lcmF0b3JcIjpcIndvcmtzcGFjZToqXCIsXCJAcHJpc21hL2dlbmVyYXRvci1oZWxwZXJcIjpcIndvcmtzcGFjZToqXCIsXCJAcHJpc21hL2dldC1wbGF0Zm9ybVwiOlwid29ya3NwYWNlOipcIixcIkBwcmlzbWEvcHJpc21hLXNjaGVtYS13YXNtXCI6XCI2LjEzLjAtMzUuMzYxZTg2ZDBlYTQ5ODdlOWY1M2E1NjUzMDliM2VlZDc5N2E2YmNiZFwiLFwiQHByaXNtYS9zY2hlbWEtZW5naW5lLXdhc21cIjpcIjYuMTMuMC0zNS4zNjFlODZkMGVhNDk4N2U5ZjUzYTU2NTMwOWIzZWVkNzk3YTZiY2JkXCIsXCJAcHJpc21hL3NjaGVtYS1maWxlcy1sb2FkZXJcIjpcIndvcmtzcGFjZToqXCIsYXJnOlwiNS4wLjJcIixwcm9tcHRzOlwiMi40LjJcIn0scGVlckRlcGVuZGVuY2llczp7dHlwZXNjcmlwdDpcIj49NS4xLjBcIn0scGVlckRlcGVuZGVuY2llc01ldGE6e3R5cGVzY3JpcHQ6e29wdGlvbmFsOiEwfX0sc2lkZUVmZmVjdHM6ITF9fSk7dmFyIFNpPW5lKChiaCxLYyk9PntLYy5leHBvcnRzPXtuYW1lOlwiQHByaXNtYS9lbmdpbmVzLXZlcnNpb25cIix2ZXJzaW9uOlwiNi4xMy4wLTM1LjM2MWU4NmQwZWE0OTg3ZTlmNTNhNTY1MzA5YjNlZWQ3OTdhNmJjYmRcIixtYWluOlwiaW5kZXguanNcIix0eXBlczpcImluZGV4LmQudHNcIixsaWNlbnNlOlwiQXBhY2hlLTIuMFwiLGF1dGhvcjpcIlRpbSBTdWNoYW5layA8c3VjaGFuZWtAcHJpc21hLmlvPlwiLHByaXNtYTp7ZW5naW5lc1ZlcnNpb246XCIzNjFlODZkMGVhNDk4N2U5ZjUzYTU2NTMwOWIzZWVkNzk3YTZiY2JkXCJ9LHJlcG9zaXRvcnk6e3R5cGU6XCJnaXRcIix1cmw6XCJodHRwczovL2dpdGh1Yi5jb20vcHJpc21hL2VuZ2luZXMtd3JhcHBlci5naXRcIixkaXJlY3Rvcnk6XCJwYWNrYWdlcy9lbmdpbmVzLXZlcnNpb25cIn0sZGV2RGVwZW5kZW5jaWVzOntcIkB0eXBlcy9ub2RlXCI6XCIxOC4xOS43NlwiLHR5cGVzY3JpcHQ6XCI0LjkuNVwifSxmaWxlczpbXCJpbmRleC5qc1wiLFwiaW5kZXguZC50c1wiXSxzY3JpcHRzOntidWlsZDpcInRzYyAtZFwifX19KTt2YXIgb249bmUobm49PntcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkobm4sXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7bm4uZW5naW5lc1ZlcnNpb249dm9pZCAwO25uLmVuZ2luZXNWZXJzaW9uPVNpKCkucHJpc21hLmVuZ2luZXNWZXJzaW9ufSk7dmFyIGJzPW5lKChPaCx5cyk9PntcInVzZSBzdHJpY3RcIjt5cy5leHBvcnRzPWU9PntsZXQgcj1lLm1hdGNoKC9eWyBcXHRdKig/PVxcUykvZ20pO3JldHVybiByP3IucmVkdWNlKCh0LG4pPT5NYXRoLm1pbih0LG4ubGVuZ3RoKSwxLzApOjB9fSk7dmFyIERpPW5lKChMaCx4cyk9PntcInVzZSBzdHJpY3RcIjt4cy5leHBvcnRzPShlLHI9MSx0KT0+e2lmKHQ9e2luZGVudDpcIiBcIixpbmNsdWRlRW1wdHlMaW5lczohMSwuLi50fSx0eXBlb2YgZSE9XCJzdHJpbmdcIil0aHJvdyBuZXcgVHlwZUVycm9yKGBFeHBlY3RlZCBcXGBpbnB1dFxcYCB0byBiZSBhIFxcYHN0cmluZ1xcYCwgZ290IFxcYCR7dHlwZW9mIGV9XFxgYCk7aWYodHlwZW9mIHIhPVwibnVtYmVyXCIpdGhyb3cgbmV3IFR5cGVFcnJvcihgRXhwZWN0ZWQgXFxgY291bnRcXGAgdG8gYmUgYSBcXGBudW1iZXJcXGAsIGdvdCBcXGAke3R5cGVvZiByfVxcYGApO2lmKHR5cGVvZiB0LmluZGVudCE9XCJzdHJpbmdcIil0aHJvdyBuZXcgVHlwZUVycm9yKGBFeHBlY3RlZCBcXGBvcHRpb25zLmluZGVudFxcYCB0byBiZSBhIFxcYHN0cmluZ1xcYCwgZ290IFxcYCR7dHlwZW9mIHQuaW5kZW50fVxcYGApO2lmKHI9PT0wKXJldHVybiBlO2xldCBuPXQuaW5jbHVkZUVtcHR5TGluZXM/L14vZ206L14oPyFcXHMqJCkvZ207cmV0dXJuIGUucmVwbGFjZShuLHQuaW5kZW50LnJlcGVhdChyKSl9fSk7dmFyIFNzPW5lKCgkaCxUcyk9PntcInVzZSBzdHJpY3RcIjtUcy5leHBvcnRzPSh7b25seUZpcnN0OmU9ITF9PXt9KT0+e2xldCByPVtcIltcXFxcdTAwMUJcXFxcdTAwOUJdW1tcXFxcXSgpIzs/XSooPzooPzooPzooPzo7Wy1hLXpBLVpcXFxcZFxcXFwvIyYuOj0/JUB+X10rKSp8W2EtekEtWlxcXFxkXSsoPzo7Wy1hLXpBLVpcXFxcZFxcXFwvIyYuOj0/JUB+X10qKSopP1xcXFx1MDAwNylcIixcIig/Oig/OlxcXFxkezEsNH0oPzo7XFxcXGR7MCw0fSkqKT9bXFxcXGRBLVBSLVRaY2YtbnRxcnk9Pjx+XSkpXCJdLmpvaW4oXCJ8XCIpO3JldHVybiBuZXcgUmVnRXhwKHIsZT92b2lkIDA6XCJnXCIpfX0pO3ZhciBMaT1uZSgocWgsUnMpPT57XCJ1c2Ugc3RyaWN0XCI7dmFyIG9wPVNzKCk7UnMuZXhwb3J0cz1lPT50eXBlb2YgZT09XCJzdHJpbmdcIj9lLnJlcGxhY2Uob3AoKSxcIlwiKTplfSk7dmFyIEFzPW5lKChVaCxzcCk9PntzcC5leHBvcnRzPXtuYW1lOlwiZG90ZW52XCIsdmVyc2lvbjpcIjE2LjUuMFwiLGRlc2NyaXB0aW9uOlwiTG9hZHMgZW52aXJvbm1lbnQgdmFyaWFibGVzIGZyb20gLmVudiBmaWxlXCIsbWFpbjpcImxpYi9tYWluLmpzXCIsdHlwZXM6XCJsaWIvbWFpbi5kLnRzXCIsZXhwb3J0czp7XCIuXCI6e3R5cGVzOlwiLi9saWIvbWFpbi5kLnRzXCIscmVxdWlyZTpcIi4vbGliL21haW4uanNcIixkZWZhdWx0OlwiLi9saWIvbWFpbi5qc1wifSxcIi4vY29uZmlnXCI6XCIuL2NvbmZpZy5qc1wiLFwiLi9jb25maWcuanNcIjpcIi4vY29uZmlnLmpzXCIsXCIuL2xpYi9lbnYtb3B0aW9uc1wiOlwiLi9saWIvZW52LW9wdGlvbnMuanNcIixcIi4vbGliL2Vudi1vcHRpb25zLmpzXCI6XCIuL2xpYi9lbnYtb3B0aW9ucy5qc1wiLFwiLi9saWIvY2xpLW9wdGlvbnNcIjpcIi4vbGliL2NsaS1vcHRpb25zLmpzXCIsXCIuL2xpYi9jbGktb3B0aW9ucy5qc1wiOlwiLi9saWIvY2xpLW9wdGlvbnMuanNcIixcIi4vcGFja2FnZS5qc29uXCI6XCIuL3BhY2thZ2UuanNvblwifSxzY3JpcHRzOntcImR0cy1jaGVja1wiOlwidHNjIC0tcHJvamVjdCB0ZXN0cy90eXBlcy90c2NvbmZpZy5qc29uXCIsbGludDpcInN0YW5kYXJkXCIscHJldGVzdDpcIm5wbSBydW4gbGludCAmJiBucG0gcnVuIGR0cy1jaGVja1wiLHRlc3Q6XCJ0YXAgcnVuIC0tYWxsb3ctZW1wdHktY292ZXJhZ2UgLS1kaXNhYmxlLWNvdmVyYWdlIC0tdGltZW91dD02MDAwMFwiLFwidGVzdDpjb3ZlcmFnZVwiOlwidGFwIHJ1biAtLXNob3ctZnVsbC1jb3ZlcmFnZSAtLXRpbWVvdXQ9NjAwMDAgLS1jb3ZlcmFnZS1yZXBvcnQ9bGNvdlwiLHByZXJlbGVhc2U6XCJucG0gdGVzdFwiLHJlbGVhc2U6XCJzdGFuZGFyZC12ZXJzaW9uXCJ9LHJlcG9zaXRvcnk6e3R5cGU6XCJnaXRcIix1cmw6XCJnaXQ6Ly9naXRodWIuY29tL21vdGRvdGxhL2RvdGVudi5naXRcIn0saG9tZXBhZ2U6XCJodHRwczovL2dpdGh1Yi5jb20vbW90ZG90bGEvZG90ZW52I3JlYWRtZVwiLGZ1bmRpbmc6XCJodHRwczovL2RvdGVudnguY29tXCIsa2V5d29yZHM6W1wiZG90ZW52XCIsXCJlbnZcIixcIi5lbnZcIixcImVudmlyb25tZW50XCIsXCJ2YXJpYWJsZXNcIixcImNvbmZpZ1wiLFwic2V0dGluZ3NcIl0scmVhZG1lRmlsZW5hbWU6XCJSRUFETUUubWRcIixsaWNlbnNlOlwiQlNELTItQ2xhdXNlXCIsZGV2RGVwZW5kZW5jaWVzOntcIkB0eXBlcy9ub2RlXCI6XCJeMTguMTEuM1wiLGRlY2FjaGU6XCJeNC42LjJcIixzaW5vbjpcIl4xNC4wLjFcIixzdGFuZGFyZDpcIl4xNy4wLjBcIixcInN0YW5kYXJkLXZlcnNpb25cIjpcIl45LjUuMFwiLHRhcDpcIl4xOS4yLjBcIix0eXBlc2NyaXB0OlwiXjQuOC40XCJ9LGVuZ2luZXM6e25vZGU6XCI+PTEyXCJ9LGJyb3dzZXI6e2ZzOiExfX19KTt2YXIgT3M9bmUoKEdoLExlKT0+e1widXNlIHN0cmljdFwiO3ZhciBNaT1yZXF1aXJlKFwibm9kZTpmc1wiKSwkaT1yZXF1aXJlKFwibm9kZTpwYXRoXCIpLGFwPXJlcXVpcmUoXCJub2RlOm9zXCIpLGxwPXJlcXVpcmUoXCJub2RlOmNyeXB0b1wiKSx1cD1BcygpLElzPXVwLnZlcnNpb24sY3A9Lyg/Ol58XilcXHMqKD86ZXhwb3J0XFxzKyk/KFtcXHcuLV0rKSg/Olxccyo9XFxzKj98Olxccys/KShcXHMqJyg/OlxcXFwnfFteJ10pKid8XFxzKlwiKD86XFxcXFwifFteXCJdKSpcInxcXHMqYCg/OlxcXFxgfFteYF0pKmB8W14jXFxyXFxuXSspP1xccyooPzojLiopPyg/OiR8JCkvbWc7ZnVuY3Rpb24gcHAoZSl7bGV0IHI9e30sdD1lLnRvU3RyaW5nKCk7dD10LnJlcGxhY2UoL1xcclxcbj8vbWcsYFxuYCk7bGV0IG47Zm9yKDsobj1jcC5leGVjKHQpKSE9bnVsbDspe2xldCBpPW5bMV0sbz1uWzJdfHxcIlwiO289by50cmltKCk7bGV0IHM9b1swXTtvPW8ucmVwbGFjZSgvXihbJ1wiYF0pKFtcXHNcXFNdKilcXDEkL21nLFwiJDJcIikscz09PSdcIicmJihvPW8ucmVwbGFjZSgvXFxcXG4vZyxgXG5gKSxvPW8ucmVwbGFjZSgvXFxcXHIvZyxcIlxcclwiKSkscltpXT1vfXJldHVybiByfWZ1bmN0aW9uIGRwKGUpe2xldCByPURzKGUpLHQ9Qi5jb25maWdEb3RlbnYoe3BhdGg6cn0pO2lmKCF0LnBhcnNlZCl7bGV0IHM9bmV3IEVycm9yKGBNSVNTSU5HX0RBVEE6IENhbm5vdCBwYXJzZSAke3J9IGZvciBhbiB1bmtub3duIHJlYXNvbmApO3Rocm93IHMuY29kZT1cIk1JU1NJTkdfREFUQVwiLHN9bGV0IG49a3MoZSkuc3BsaXQoXCIsXCIpLGk9bi5sZW5ndGgsbztmb3IobGV0IHM9MDtzPGk7cysrKXRyeXtsZXQgYT1uW3NdLnRyaW0oKSxsPWZwKHQsYSk7bz1CLmRlY3J5cHQobC5jaXBoZXJ0ZXh0LGwua2V5KTticmVha31jYXRjaChhKXtpZihzKzE+PWkpdGhyb3cgYX1yZXR1cm4gQi5wYXJzZShvKX1mdW5jdGlvbiBtcChlKXtjb25zb2xlLmxvZyhgW2RvdGVudkAke0lzfV1bV0FSTl0gJHtlfWApfWZ1bmN0aW9uIG90KGUpe2NvbnNvbGUubG9nKGBbZG90ZW52QCR7SXN9XVtERUJVR10gJHtlfWApfWZ1bmN0aW9uIGtzKGUpe3JldHVybiBlJiZlLkRPVEVOVl9LRVkmJmUuRE9URU5WX0tFWS5sZW5ndGg+MD9lLkRPVEVOVl9LRVk6cHJvY2Vzcy5lbnYuRE9URU5WX0tFWSYmcHJvY2Vzcy5lbnYuRE9URU5WX0tFWS5sZW5ndGg+MD9wcm9jZXNzLmVudi5ET1RFTlZfS0VZOlwiXCJ9ZnVuY3Rpb24gZnAoZSxyKXtsZXQgdDt0cnl7dD1uZXcgVVJMKHIpfWNhdGNoKGEpe2lmKGEuY29kZT09PVwiRVJSX0lOVkFMSURfVVJMXCIpe2xldCBsPW5ldyBFcnJvcihcIklOVkFMSURfRE9URU5WX0tFWTogV3JvbmcgZm9ybWF0LiBNdXN0IGJlIGluIHZhbGlkIHVyaSBmb3JtYXQgbGlrZSBkb3RlbnY6Ly86a2V5XzEyMzRAZG90ZW52eC5jb20vdmF1bHQvLmVudi52YXVsdD9lbnZpcm9ubWVudD1kZXZlbG9wbWVudFwiKTt0aHJvdyBsLmNvZGU9XCJJTlZBTElEX0RPVEVOVl9LRVlcIixsfXRocm93IGF9bGV0IG49dC5wYXNzd29yZDtpZighbil7bGV0IGE9bmV3IEVycm9yKFwiSU5WQUxJRF9ET1RFTlZfS0VZOiBNaXNzaW5nIGtleSBwYXJ0XCIpO3Rocm93IGEuY29kZT1cIklOVkFMSURfRE9URU5WX0tFWVwiLGF9bGV0IGk9dC5zZWFyY2hQYXJhbXMuZ2V0KFwiZW52aXJvbm1lbnRcIik7aWYoIWkpe2xldCBhPW5ldyBFcnJvcihcIklOVkFMSURfRE9URU5WX0tFWTogTWlzc2luZyBlbnZpcm9ubWVudCBwYXJ0XCIpO3Rocm93IGEuY29kZT1cIklOVkFMSURfRE9URU5WX0tFWVwiLGF9bGV0IG89YERPVEVOVl9WQVVMVF8ke2kudG9VcHBlckNhc2UoKX1gLHM9ZS5wYXJzZWRbb107aWYoIXMpe2xldCBhPW5ldyBFcnJvcihgTk9UX0ZPVU5EX0RPVEVOVl9FTlZJUk9OTUVOVDogQ2Fubm90IGxvY2F0ZSBlbnZpcm9ubWVudCAke299IGluIHlvdXIgLmVudi52YXVsdCBmaWxlLmApO3Rocm93IGEuY29kZT1cIk5PVF9GT1VORF9ET1RFTlZfRU5WSVJPTk1FTlRcIixhfXJldHVybntjaXBoZXJ0ZXh0OnMsa2V5Om59fWZ1bmN0aW9uIERzKGUpe2xldCByPW51bGw7aWYoZSYmZS5wYXRoJiZlLnBhdGgubGVuZ3RoPjApaWYoQXJyYXkuaXNBcnJheShlLnBhdGgpKWZvcihsZXQgdCBvZiBlLnBhdGgpTWkuZXhpc3RzU3luYyh0KSYmKHI9dC5lbmRzV2l0aChcIi52YXVsdFwiKT90OmAke3R9LnZhdWx0YCk7ZWxzZSByPWUucGF0aC5lbmRzV2l0aChcIi52YXVsdFwiKT9lLnBhdGg6YCR7ZS5wYXRofS52YXVsdGA7ZWxzZSByPSRpLnJlc29sdmUocHJvY2Vzcy5jd2QoKSxcIi5lbnYudmF1bHRcIik7cmV0dXJuIE1pLmV4aXN0c1N5bmMocik/cjpudWxsfWZ1bmN0aW9uIENzKGUpe3JldHVybiBlWzBdPT09XCJ+XCI/JGkuam9pbihhcC5ob21lZGlyKCksZS5zbGljZSgxKSk6ZX1mdW5jdGlvbiBncChlKXshIShlJiZlLmRlYnVnKSYmb3QoXCJMb2FkaW5nIGVudiBmcm9tIGVuY3J5cHRlZCAuZW52LnZhdWx0XCIpO2xldCB0PUIuX3BhcnNlVmF1bHQoZSksbj1wcm9jZXNzLmVudjtyZXR1cm4gZSYmZS5wcm9jZXNzRW52IT1udWxsJiYobj1lLnByb2Nlc3NFbnYpLEIucG9wdWxhdGUobix0LGUpLHtwYXJzZWQ6dH19ZnVuY3Rpb24gaHAoZSl7bGV0IHI9JGkucmVzb2x2ZShwcm9jZXNzLmN3ZCgpLFwiLmVudlwiKSx0PVwidXRmOFwiLG49ISEoZSYmZS5kZWJ1Zyk7ZSYmZS5lbmNvZGluZz90PWUuZW5jb2Rpbmc6biYmb3QoXCJObyBlbmNvZGluZyBpcyBzcGVjaWZpZWQuIFVURi04IGlzIHVzZWQgYnkgZGVmYXVsdFwiKTtsZXQgaT1bcl07aWYoZSYmZS5wYXRoKWlmKCFBcnJheS5pc0FycmF5KGUucGF0aCkpaT1bQ3MoZS5wYXRoKV07ZWxzZXtpPVtdO2ZvcihsZXQgbCBvZiBlLnBhdGgpaS5wdXNoKENzKGwpKX1sZXQgbyxzPXt9O2ZvcihsZXQgbCBvZiBpKXRyeXtsZXQgdT1CLnBhcnNlKE1pLnJlYWRGaWxlU3luYyhsLHtlbmNvZGluZzp0fSkpO0IucG9wdWxhdGUocyx1LGUpfWNhdGNoKHUpe24mJm90KGBGYWlsZWQgdG8gbG9hZCAke2x9ICR7dS5tZXNzYWdlfWApLG89dX1sZXQgYT1wcm9jZXNzLmVudjtyZXR1cm4gZSYmZS5wcm9jZXNzRW52IT1udWxsJiYoYT1lLnByb2Nlc3NFbnYpLEIucG9wdWxhdGUoYSxzLGUpLG8/e3BhcnNlZDpzLGVycm9yOm99OntwYXJzZWQ6c319ZnVuY3Rpb24geXAoZSl7aWYoa3MoZSkubGVuZ3RoPT09MClyZXR1cm4gQi5jb25maWdEb3RlbnYoZSk7bGV0IHI9RHMoZSk7cmV0dXJuIHI/Qi5fY29uZmlnVmF1bHQoZSk6KG1wKGBZb3Ugc2V0IERPVEVOVl9LRVkgYnV0IHlvdSBhcmUgbWlzc2luZyBhIC5lbnYudmF1bHQgZmlsZSBhdCAke3J9LiBEaWQgeW91IGZvcmdldCB0byBidWlsZCBpdD9gKSxCLmNvbmZpZ0RvdGVudihlKSl9ZnVuY3Rpb24gYnAoZSxyKXtsZXQgdD1CdWZmZXIuZnJvbShyLnNsaWNlKC02NCksXCJoZXhcIiksbj1CdWZmZXIuZnJvbShlLFwiYmFzZTY0XCIpLGk9bi5zdWJhcnJheSgwLDEyKSxvPW4uc3ViYXJyYXkoLTE2KTtuPW4uc3ViYXJyYXkoMTIsLTE2KTt0cnl7bGV0IHM9bHAuY3JlYXRlRGVjaXBoZXJpdihcImFlcy0yNTYtZ2NtXCIsdCxpKTtyZXR1cm4gcy5zZXRBdXRoVGFnKG8pLGAke3MudXBkYXRlKG4pfSR7cy5maW5hbCgpfWB9Y2F0Y2gocyl7bGV0IGE9cyBpbnN0YW5jZW9mIFJhbmdlRXJyb3IsbD1zLm1lc3NhZ2U9PT1cIkludmFsaWQga2V5IGxlbmd0aFwiLHU9cy5tZXNzYWdlPT09XCJVbnN1cHBvcnRlZCBzdGF0ZSBvciB1bmFibGUgdG8gYXV0aGVudGljYXRlIGRhdGFcIjtpZihhfHxsKXtsZXQgYz1uZXcgRXJyb3IoXCJJTlZBTElEX0RPVEVOVl9LRVk6IEl0IG11c3QgYmUgNjQgY2hhcmFjdGVycyBsb25nIChvciBtb3JlKVwiKTt0aHJvdyBjLmNvZGU9XCJJTlZBTElEX0RPVEVOVl9LRVlcIixjfWVsc2UgaWYodSl7bGV0IGM9bmV3IEVycm9yKFwiREVDUllQVElPTl9GQUlMRUQ6IFBsZWFzZSBjaGVjayB5b3VyIERPVEVOVl9LRVlcIik7dGhyb3cgYy5jb2RlPVwiREVDUllQVElPTl9GQUlMRURcIixjfWVsc2UgdGhyb3cgc319ZnVuY3Rpb24gRXAoZSxyLHQ9e30pe2xldCBuPSEhKHQmJnQuZGVidWcpLGk9ISEodCYmdC5vdmVycmlkZSk7aWYodHlwZW9mIHIhPVwib2JqZWN0XCIpe2xldCBvPW5ldyBFcnJvcihcIk9CSkVDVF9SRVFVSVJFRDogUGxlYXNlIGNoZWNrIHRoZSBwcm9jZXNzRW52IGFyZ3VtZW50IGJlaW5nIHBhc3NlZCB0byBwb3B1bGF0ZVwiKTt0aHJvdyBvLmNvZGU9XCJPQkpFQ1RfUkVRVUlSRURcIixvfWZvcihsZXQgbyBvZiBPYmplY3Qua2V5cyhyKSlPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSxvKT8oaT09PSEwJiYoZVtvXT1yW29dKSxuJiZvdChpPT09ITA/YFwiJHtvfVwiIGlzIGFscmVhZHkgZGVmaW5lZCBhbmQgV0FTIG92ZXJ3cml0dGVuYDpgXCIke299XCIgaXMgYWxyZWFkeSBkZWZpbmVkIGFuZCB3YXMgTk9UIG92ZXJ3cml0dGVuYCkpOmVbb109cltvXX12YXIgQj17Y29uZmlnRG90ZW52OmhwLF9jb25maWdWYXVsdDpncCxfcGFyc2VWYXVsdDpkcCxjb25maWc6eXAsZGVjcnlwdDpicCxwYXJzZTpwcCxwb3B1bGF0ZTpFcH07TGUuZXhwb3J0cy5jb25maWdEb3RlbnY9Qi5jb25maWdEb3RlbnY7TGUuZXhwb3J0cy5fY29uZmlnVmF1bHQ9Qi5fY29uZmlnVmF1bHQ7TGUuZXhwb3J0cy5fcGFyc2VWYXVsdD1CLl9wYXJzZVZhdWx0O0xlLmV4cG9ydHMuY29uZmlnPUIuY29uZmlnO0xlLmV4cG9ydHMuZGVjcnlwdD1CLmRlY3J5cHQ7TGUuZXhwb3J0cy5wYXJzZT1CLnBhcnNlO0xlLmV4cG9ydHMucG9wdWxhdGU9Qi5wb3B1bGF0ZTtMZS5leHBvcnRzPUJ9KTt2YXIgRnM9bmUoKFloLGNuKT0+e1widXNlIHN0cmljdFwiO2NuLmV4cG9ydHM9KGU9e30pPT57bGV0IHI7aWYoZS5yZXBvVXJsKXI9ZS5yZXBvVXJsO2Vsc2UgaWYoZS51c2VyJiZlLnJlcG8pcj1gaHR0cHM6Ly9naXRodWIuY29tLyR7ZS51c2VyfS8ke2UucmVwb31gO2Vsc2UgdGhyb3cgbmV3IEVycm9yKFwiWW91IG5lZWQgdG8gc3BlY2lmeSBlaXRoZXIgdGhlIGByZXBvVXJsYCBvcHRpb24gb3IgYm90aCB0aGUgYHVzZXJgIGFuZCBgcmVwb2Agb3B0aW9uc1wiKTtsZXQgdD1uZXcgVVJMKGAke3J9L2lzc3Vlcy9uZXdgKSxuPVtcImJvZHlcIixcInRpdGxlXCIsXCJsYWJlbHNcIixcInRlbXBsYXRlXCIsXCJtaWxlc3RvbmVcIixcImFzc2lnbmVlXCIsXCJwcm9qZWN0c1wiXTtmb3IobGV0IGkgb2Ygbil7bGV0IG89ZVtpXTtpZihvIT09dm9pZCAwKXtpZihpPT09XCJsYWJlbHNcInx8aT09PVwicHJvamVjdHNcIil7aWYoIUFycmF5LmlzQXJyYXkobykpdGhyb3cgbmV3IFR5cGVFcnJvcihgVGhlIFxcYCR7aX1cXGAgb3B0aW9uIHNob3VsZCBiZSBhbiBhcnJheWApO289by5qb2luKFwiLFwiKX10LnNlYXJjaFBhcmFtcy5zZXQoaSxvKX19cmV0dXJuIHQudG9TdHJpbmcoKX07Y24uZXhwb3J0cy5kZWZhdWx0PWNuLmV4cG9ydHN9KTt2YXIgS2k9bmUoKEFiLG9hKT0+e1widXNlIHN0cmljdFwiO29hLmV4cG9ydHM9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKHIsdCxuLGksbyl7cmV0dXJuIHI8dHx8bjx0P3I+bj9uKzE6cisxOmk9PT1vP3Q6dCsxfXJldHVybiBmdW5jdGlvbihyLHQpe2lmKHI9PT10KXJldHVybiAwO2lmKHIubGVuZ3RoPnQubGVuZ3RoKXt2YXIgbj1yO3I9dCx0PW59Zm9yKHZhciBpPXIubGVuZ3RoLG89dC5sZW5ndGg7aT4wJiZyLmNoYXJDb2RlQXQoaS0xKT09PXQuY2hhckNvZGVBdChvLTEpOylpLS0sby0tO2Zvcih2YXIgcz0wO3M8aSYmci5jaGFyQ29kZUF0KHMpPT09dC5jaGFyQ29kZUF0KHMpOylzKys7aWYoaS09cyxvLT1zLGk9PT0wfHxvPDMpcmV0dXJuIG87dmFyIGE9MCxsLHUsYyxwLGQsZixoLGcsUyxQLFIsYixEPVtdO2ZvcihsPTA7bDxpO2wrKylELnB1c2gobCsxKSxELnB1c2goci5jaGFyQ29kZUF0KHMrbCkpO2Zvcih2YXIgbWU9RC5sZW5ndGgtMTthPG8tMzspZm9yKFM9dC5jaGFyQ29kZUF0KHMrKHU9YSkpLFA9dC5jaGFyQ29kZUF0KHMrKGM9YSsxKSksUj10LmNoYXJDb2RlQXQocysocD1hKzIpKSxiPXQuY2hhckNvZGVBdChzKyhkPWErMykpLGY9YSs9NCxsPTA7bDxtZTtsKz0yKWg9RFtsXSxnPURbbCsxXSx1PWUoaCx1LGMsUyxnKSxjPWUodSxjLHAsUCxnKSxwPWUoYyxwLGQsUixnKSxmPWUocCxkLGYsYixnKSxEW2xdPWYsZD1wLHA9YyxjPXUsdT1oO2Zvcig7YTxvOylmb3IoUz10LmNoYXJDb2RlQXQocysodT1hKSksZj0rK2EsbD0wO2w8bWU7bCs9MiloPURbbF0sRFtsXT1mPWUoaCx1LGYsUyxEW2wrMV0pLHU9aDtyZXR1cm4gZn19KCl9KTt2YXIgY2E9T28oKCk9PntcInVzZSBzdHJpY3RcIn0pO3ZhciBwYT1PbygoKT0+e1widXNlIHN0cmljdFwifSk7dmFyIEdmPXt9O3RyKEdmLHtETU1GOigpPT5jdCxEZWJ1ZzooKT0+TixEZWNpbWFsOigpPT52ZSxFeHRlbnNpb25zOigpPT5paSxNZXRyaWNzQ2xpZW50OigpPT5GcixQcmlzbWFDbGllbnRJbml0aWFsaXphdGlvbkVycm9yOigpPT5ULFByaXNtYUNsaWVudEtub3duUmVxdWVzdEVycm9yOigpPT56LFByaXNtYUNsaWVudFJ1c3RQYW5pY0Vycm9yOigpPT5sZSxQcmlzbWFDbGllbnRVbmtub3duUmVxdWVzdEVycm9yOigpPT5qLFByaXNtYUNsaWVudFZhbGlkYXRpb25FcnJvcjooKT0+WixQdWJsaWM6KCk9Pm9pLFNxbDooKT0+b2UsY3JlYXRlUGFyYW06KCk9PkFhLGRlZmluZURtbWZQcm9wZXJ0eTooKT0+X2EsZGVzZXJpYWxpemVKc29uUmVzcG9uc2U6KCk9PlRyLGRlc2VyaWFsaXplUmF3UmVzdWx0OigpPT5laSxkbW1mVG9SdW50aW1lRGF0YU1vZGVsOigpPT5YcyxlbXB0eTooKT0+RmEsZ2V0UHJpc21hQ2xpZW50OigpPT5idSxnZXRSdW50aW1lOigpPT5Hbixqb2luOigpPT5MYSxtYWtlU3RyaWN0RW51bTooKT0+RXUsbWFrZVR5cGVkUXVlcnlGYWN0b3J5OigpPT5OYSxvYmplY3RFbnVtVmFsdWVzOigpPT5rbixyYXc6KCk9PmlvLHNlcmlhbGl6ZUpzb25RdWVyeTooKT0+TW4sc2tpcDooKT0+Rm4sc3FsdGFnOigpPT5vbyx3YXJuRW52Q29uZmxpY3RzOigpPT53dSx3YXJuT25jZTooKT0+YXR9KTttb2R1bGUuZXhwb3J0cz1SdShHZik7dmFyIGlpPXt9O3RyKGlpLHtkZWZpbmVFeHRlbnNpb246KCk9Pk5vLGdldEV4dGVuc2lvbkNvbnRleHQ6KCk9PkxvfSk7ZnVuY3Rpb24gTm8oZSl7cmV0dXJuIHR5cGVvZiBlPT1cImZ1bmN0aW9uXCI/ZTpyPT5yLiRleHRlbmRzKGUpfWZ1bmN0aW9uIExvKGUpe3JldHVybiBlfXZhciBvaT17fTt0cihvaSx7dmFsaWRhdG9yOigpPT5Gb30pO2Z1bmN0aW9uIEZvKC4uLmUpe3JldHVybiByPT5yfXZhciBCdD17fTt0cihCdCx7JDooKT0+Vm8sYmdCbGFjazooKT0+RnUsYmdCbHVlOigpPT5qdSxiZ0N5YW46KCk9PkJ1LGJnR3JlZW46KCk9PiR1LGJnTWFnZW50YTooKT0+VnUsYmdSZWQ6KCk9Pk11LGJnV2hpdGU6KCk9PlV1LGJnWWVsbG93OigpPT5xdSxibGFjazooKT0+T3UsYmx1ZTooKT0+bnIsYm9sZDooKT0+VyxjeWFuOigpPT5EZSxkaW06KCk9PkllLGdyYXk6KCk9PktyLGdyZWVuOigpPT5xZSxncmV5OigpPT5MdSxoaWRkZW46KCk9Pmt1LGludmVyc2U6KCk9Pkl1LGl0YWxpYzooKT0+Q3UsbWFnZW50YTooKT0+X3UscmVkOigpPT5jZSxyZXNldDooKT0+QXUsc3RyaWtldGhyb3VnaDooKT0+RHUsdW5kZXJsaW5lOigpPT5ZLHdoaXRlOigpPT5OdSx5ZWxsb3c6KCk9PmtlfSk7dmFyIHNpLE1vLCRvLHFvLGpvPSEwO3R5cGVvZiBwcm9jZXNzPFwidVwiJiYoe0ZPUkNFX0NPTE9SOnNpLE5PREVfRElTQUJMRV9DT0xPUlM6TW8sTk9fQ09MT1I6JG8sVEVSTTpxb309cHJvY2Vzcy5lbnZ8fHt9LGpvPXByb2Nlc3Muc3Rkb3V0JiZwcm9jZXNzLnN0ZG91dC5pc1RUWSk7dmFyIFZvPXtlbmFibGVkOiFNbyYmJG89PW51bGwmJnFvIT09XCJkdW1iXCImJihzaSE9bnVsbCYmc2khPT1cIjBcInx8am8pfTtmdW5jdGlvbiBGKGUscil7bGV0IHQ9bmV3IFJlZ0V4cChgXFxcXHgxYlxcXFxbJHtyfW1gLFwiZ1wiKSxuPWBcXHgxQlske2V9bWAsaT1gXFx4MUJbJHtyfW1gO3JldHVybiBmdW5jdGlvbihvKXtyZXR1cm4hVm8uZW5hYmxlZHx8bz09bnVsbD9vOm4rKH4oXCJcIitvKS5pbmRleE9mKGkpP28ucmVwbGFjZSh0LGkrbik6bykraX19dmFyIEF1PUYoMCwwKSxXPUYoMSwyMiksSWU9RigyLDIyKSxDdT1GKDMsMjMpLFk9Rig0LDI0KSxJdT1GKDcsMjcpLGt1PUYoOCwyOCksRHU9Rig5LDI5KSxPdT1GKDMwLDM5KSxjZT1GKDMxLDM5KSxxZT1GKDMyLDM5KSxrZT1GKDMzLDM5KSxucj1GKDM0LDM5KSxfdT1GKDM1LDM5KSxEZT1GKDM2LDM5KSxOdT1GKDM3LDM5KSxLcj1GKDkwLDM5KSxMdT1GKDkwLDM5KSxGdT1GKDQwLDQ5KSxNdT1GKDQxLDQ5KSwkdT1GKDQyLDQ5KSxxdT1GKDQzLDQ5KSxqdT1GKDQ0LDQ5KSxWdT1GKDQ1LDQ5KSxCdT1GKDQ2LDQ5KSxVdT1GKDQ3LDQ5KTt2YXIgR3U9MTAwLEJvPVtcImdyZWVuXCIsXCJ5ZWxsb3dcIixcImJsdWVcIixcIm1hZ2VudGFcIixcImN5YW5cIixcInJlZFwiXSxZcj1bXSxVbz1EYXRlLm5vdygpLFF1PTAsYWk9dHlwZW9mIHByb2Nlc3M8XCJ1XCI/cHJvY2Vzcy5lbnY6e307Z2xvYmFsVGhpcy5ERUJVRz8/PWFpLkRFQlVHPz9cIlwiO2dsb2JhbFRoaXMuREVCVUdfQ09MT1JTPz89YWkuREVCVUdfQ09MT1JTP2FpLkRFQlVHX0NPTE9SUz09PVwidHJ1ZVwiOiEwO3ZhciB6cj17ZW5hYmxlKGUpe3R5cGVvZiBlPT1cInN0cmluZ1wiJiYoZ2xvYmFsVGhpcy5ERUJVRz1lKX0sZGlzYWJsZSgpe2xldCBlPWdsb2JhbFRoaXMuREVCVUc7cmV0dXJuIGdsb2JhbFRoaXMuREVCVUc9XCJcIixlfSxlbmFibGVkKGUpe2xldCByPWdsb2JhbFRoaXMuREVCVUcuc3BsaXQoXCIsXCIpLm1hcChpPT5pLnJlcGxhY2UoL1suKz9eJHt9KCl8W1xcXVxcXFxdL2csXCJcXFxcJCZcIikpLHQ9ci5zb21lKGk9Pmk9PT1cIlwifHxpWzBdPT09XCItXCI/ITE6ZS5tYXRjaChSZWdFeHAoaS5zcGxpdChcIipcIikuam9pbihcIi4qXCIpK1wiJFwiKSkpLG49ci5zb21lKGk9Pmk9PT1cIlwifHxpWzBdIT09XCItXCI/ITE6ZS5tYXRjaChSZWdFeHAoaS5zbGljZSgxKS5zcGxpdChcIipcIikuam9pbihcIi4qXCIpK1wiJFwiKSkpO3JldHVybiB0JiYhbn0sbG9nOiguLi5lKT0+e2xldFtyLHQsLi4ubl09ZTsoY29uc29sZS53YXJuPz9jb25zb2xlLmxvZykoYCR7cn0gJHt0fWAsLi4ubil9LGZvcm1hdHRlcnM6e319O2Z1bmN0aW9uIFd1KGUpe2xldCByPXtjb2xvcjpCb1tRdSsrJUJvLmxlbmd0aF0sZW5hYmxlZDp6ci5lbmFibGVkKGUpLG5hbWVzcGFjZTplLGxvZzp6ci5sb2csZXh0ZW5kOigpPT57fX0sdD0oLi4ubik9PntsZXR7ZW5hYmxlZDppLG5hbWVzcGFjZTpvLGNvbG9yOnMsbG9nOmF9PXI7aWYobi5sZW5ndGghPT0wJiZZci5wdXNoKFtvLC4uLm5dKSxZci5sZW5ndGg+R3UmJllyLnNoaWZ0KCksenIuZW5hYmxlZChvKXx8aSl7bGV0IGw9bi5tYXAoYz0+dHlwZW9mIGM9PVwic3RyaW5nXCI/YzpKdShjKSksdT1gKyR7RGF0ZS5ub3coKS1Vb31tc2A7VW89RGF0ZS5ub3coKSxnbG9iYWxUaGlzLkRFQlVHX0NPTE9SUz9hKEJ0W3NdKFcobykpLC4uLmwsQnRbc10odSkpOmEobywuLi5sLHUpfX07cmV0dXJuIG5ldyBQcm94eSh0LHtnZXQ6KG4saSk9PnJbaV0sc2V0OihuLGksbyk9PnJbaV09b30pfXZhciBOPW5ldyBQcm94eShXdSx7Z2V0OihlLHIpPT56cltyXSxzZXQ6KGUscix0KT0+enJbcl09dH0pO2Z1bmN0aW9uIEp1KGUscj0yKXtsZXQgdD1uZXcgU2V0O3JldHVybiBKU09OLnN0cmluZ2lmeShlLChuLGkpPT57aWYodHlwZW9mIGk9PVwib2JqZWN0XCImJmkhPT1udWxsKXtpZih0LmhhcyhpKSlyZXR1cm5cIltDaXJjdWxhciAqXVwiO3QuYWRkKGkpfWVsc2UgaWYodHlwZW9mIGk9PVwiYmlnaW50XCIpcmV0dXJuIGkudG9TdHJpbmcoKTtyZXR1cm4gaX0scil9ZnVuY3Rpb24gR28oZT03NTAwKXtsZXQgcj1Zci5tYXAoKFt0LC4uLm5dKT0+YCR7dH0gJHtuLm1hcChpPT50eXBlb2YgaT09XCJzdHJpbmdcIj9pOkpTT04uc3RyaW5naWZ5KGkpKS5qb2luKFwiIFwiKX1gKS5qb2luKGBcbmApO3JldHVybiByLmxlbmd0aDxlP3I6ci5zbGljZSgtZSl9ZnVuY3Rpb24gUW8oKXtZci5sZW5ndGg9MH12YXIgZ3I9Tjt2YXIgV289QyhyZXF1aXJlKFwibm9kZTpmc1wiKSk7ZnVuY3Rpb24gbGkoKXtsZXQgZT1wcm9jZXNzLmVudi5QUklTTUFfUVVFUllfRU5HSU5FX0xJQlJBUlk7aWYoIShlJiZXby5kZWZhdWx0LmV4aXN0c1N5bmMoZSkpJiZwcm9jZXNzLmFyY2g9PT1cImlhMzJcIil0aHJvdyBuZXcgRXJyb3IoJ1RoZSBkZWZhdWx0IHF1ZXJ5IGVuZ2luZSB0eXBlIChOb2RlLUFQSSwgXCJsaWJyYXJ5XCIpIGlzIGN1cnJlbnRseSBub3Qgc3VwcG9ydGVkIGZvciAzMmJpdCBOb2RlLiBQbGVhc2Ugc2V0IGBlbmdpbmVUeXBlID0gXCJiaW5hcnlcImAgaW4gdGhlIFwiZ2VuZXJhdG9yXCIgYmxvY2sgb2YgeW91ciBcInNjaGVtYS5wcmlzbWFcIiBmaWxlIChvciB1c2UgdGhlIGVudmlyb25tZW50IHZhcmlhYmxlcyBcIlBSSVNNQV9DTElFTlRfRU5HSU5FX1RZUEU9YmluYXJ5XCIgYW5kL29yIFwiUFJJU01BX0NMSV9RVUVSWV9FTkdJTkVfVFlQRT1iaW5hcnlcIi4pJyl9dmFyIHVpPVtcImRhcndpblwiLFwiZGFyd2luLWFybTY0XCIsXCJkZWJpYW4tb3BlbnNzbC0xLjAueFwiLFwiZGViaWFuLW9wZW5zc2wtMS4xLnhcIixcImRlYmlhbi1vcGVuc3NsLTMuMC54XCIsXCJyaGVsLW9wZW5zc2wtMS4wLnhcIixcInJoZWwtb3BlbnNzbC0xLjEueFwiLFwicmhlbC1vcGVuc3NsLTMuMC54XCIsXCJsaW51eC1hcm02NC1vcGVuc3NsLTEuMS54XCIsXCJsaW51eC1hcm02NC1vcGVuc3NsLTEuMC54XCIsXCJsaW51eC1hcm02NC1vcGVuc3NsLTMuMC54XCIsXCJsaW51eC1hcm0tb3BlbnNzbC0xLjEueFwiLFwibGludXgtYXJtLW9wZW5zc2wtMS4wLnhcIixcImxpbnV4LWFybS1vcGVuc3NsLTMuMC54XCIsXCJsaW51eC1tdXNsXCIsXCJsaW51eC1tdXNsLW9wZW5zc2wtMy4wLnhcIixcImxpbnV4LW11c2wtYXJtNjQtb3BlbnNzbC0xLjEueFwiLFwibGludXgtbXVzbC1hcm02NC1vcGVuc3NsLTMuMC54XCIsXCJsaW51eC1uaXhvc1wiLFwibGludXgtc3RhdGljLXg2NFwiLFwibGludXgtc3RhdGljLWFybTY0XCIsXCJ3aW5kb3dzXCIsXCJmcmVlYnNkMTFcIixcImZyZWVic2QxMlwiLFwiZnJlZWJzZDEzXCIsXCJmcmVlYnNkMTRcIixcImZyZWVic2QxNVwiLFwib3BlbmJzZFwiLFwibmV0YnNkXCIsXCJhcm1cIl07dmFyIFV0PVwibGlicXVlcnlfZW5naW5lXCI7ZnVuY3Rpb24gR3QoZSxyKXtsZXQgdD1yPT09XCJ1cmxcIjtyZXR1cm4gZS5pbmNsdWRlcyhcIndpbmRvd3NcIik/dD9cInF1ZXJ5X2VuZ2luZS5kbGwubm9kZVwiOmBxdWVyeV9lbmdpbmUtJHtlfS5kbGwubm9kZWA6ZS5pbmNsdWRlcyhcImRhcndpblwiKT90P2Ake1V0fS5keWxpYi5ub2RlYDpgJHtVdH0tJHtlfS5keWxpYi5ub2RlYDp0P2Ake1V0fS5zby5ub2RlYDpgJHtVdH0tJHtlfS5zby5ub2RlYH12YXIgWW89QyhyZXF1aXJlKFwibm9kZTpjaGlsZF9wcm9jZXNzXCIpKSxmaT1DKHJlcXVpcmUoXCJub2RlOmZzL3Byb21pc2VzXCIpKSxLdD1DKHJlcXVpcmUoXCJub2RlOm9zXCIpKTt2YXIgT2U9U3ltYm9sLmZvcihcIkB0cy1wYXR0ZXJuL21hdGNoZXJcIiksSHU9U3ltYm9sLmZvcihcIkB0cy1wYXR0ZXJuL2lzVmFyaWFkaWNcIiksV3Q9XCJAdHMtcGF0dGVybi9hbm9ueW1vdXMtc2VsZWN0LWtleVwiLGNpPWU9PiEhKGUmJnR5cGVvZiBlPT1cIm9iamVjdFwiKSxRdD1lPT5lJiYhIWVbT2VdLEVlPShlLHIsdCk9PntpZihRdChlKSl7bGV0IG49ZVtPZV0oKSx7bWF0Y2hlZDppLHNlbGVjdGlvbnM6b309bi5tYXRjaChyKTtyZXR1cm4gaSYmbyYmT2JqZWN0LmtleXMobykuZm9yRWFjaChzPT50KHMsb1tzXSkpLGl9aWYoY2koZSkpe2lmKCFjaShyKSlyZXR1cm4hMTtpZihBcnJheS5pc0FycmF5KGUpKXtpZighQXJyYXkuaXNBcnJheShyKSlyZXR1cm4hMTtsZXQgbj1bXSxpPVtdLG89W107Zm9yKGxldCBzIG9mIGUua2V5cygpKXtsZXQgYT1lW3NdO1F0KGEpJiZhW0h1XT9vLnB1c2goYSk6by5sZW5ndGg/aS5wdXNoKGEpOm4ucHVzaChhKX1pZihvLmxlbmd0aCl7aWYoby5sZW5ndGg+MSl0aHJvdyBuZXcgRXJyb3IoXCJQYXR0ZXJuIGVycm9yOiBVc2luZyBgLi4uUC5hcnJheSguLi4pYCBzZXZlcmFsIHRpbWVzIGluIGEgc2luZ2xlIHBhdHRlcm4gaXMgbm90IGFsbG93ZWQuXCIpO2lmKHIubGVuZ3RoPG4ubGVuZ3RoK2kubGVuZ3RoKXJldHVybiExO2xldCBzPXIuc2xpY2UoMCxuLmxlbmd0aCksYT1pLmxlbmd0aD09PTA/W106ci5zbGljZSgtaS5sZW5ndGgpLGw9ci5zbGljZShuLmxlbmd0aCxpLmxlbmd0aD09PTA/MS8wOi1pLmxlbmd0aCk7cmV0dXJuIG4uZXZlcnkoKHUsYyk9PkVlKHUsc1tjXSx0KSkmJmkuZXZlcnkoKHUsYyk9PkVlKHUsYVtjXSx0KSkmJihvLmxlbmd0aD09PTB8fEVlKG9bMF0sbCx0KSl9cmV0dXJuIGUubGVuZ3RoPT09ci5sZW5ndGgmJmUuZXZlcnkoKHMsYSk9PkVlKHMsclthXSx0KSl9cmV0dXJuIFJlZmxlY3Qub3duS2V5cyhlKS5ldmVyeShuPT57bGV0IGk9ZVtuXTtyZXR1cm4obiBpbiByfHxRdChvPWkpJiZvW09lXSgpLm1hdGNoZXJUeXBlPT09XCJvcHRpb25hbFwiKSYmRWUoaSxyW25dLHQpO3ZhciBvfSl9cmV0dXJuIE9iamVjdC5pcyhyLGUpfSxHZT1lPT57dmFyIHIsdCxuO3JldHVybiBjaShlKT9RdChlKT8ocj0odD0obj1lW09lXSgpKS5nZXRTZWxlY3Rpb25LZXlzKT09bnVsbD92b2lkIDA6dC5jYWxsKG4pKSE9bnVsbD9yOltdOkFycmF5LmlzQXJyYXkoZSk/WnIoZSxHZSk6WnIoT2JqZWN0LnZhbHVlcyhlKSxHZSk6W119LFpyPShlLHIpPT5lLnJlZHVjZSgodCxuKT0+dC5jb25jYXQocihuKSksW10pO2Z1bmN0aW9uIHBlKGUpe3JldHVybiBPYmplY3QuYXNzaWduKGUse29wdGlvbmFsOigpPT5LdShlKSxhbmQ6cj0+cShlLHIpLG9yOnI9Pll1KGUsciksc2VsZWN0OnI9PnI9PT12b2lkIDA/Sm8oZSk6Sm8ocixlKX0pfWZ1bmN0aW9uIEt1KGUpe3JldHVybiBwZSh7W09lXTooKT0+KHttYXRjaDpyPT57bGV0IHQ9e30sbj0oaSxvKT0+e3RbaV09b307cmV0dXJuIHI9PT12b2lkIDA/KEdlKGUpLmZvckVhY2goaT0+bihpLHZvaWQgMCkpLHttYXRjaGVkOiEwLHNlbGVjdGlvbnM6dH0pOnttYXRjaGVkOkVlKGUscixuKSxzZWxlY3Rpb25zOnR9fSxnZXRTZWxlY3Rpb25LZXlzOigpPT5HZShlKSxtYXRjaGVyVHlwZTpcIm9wdGlvbmFsXCJ9KX0pfWZ1bmN0aW9uIHEoLi4uZSl7cmV0dXJuIHBlKHtbT2VdOigpPT4oe21hdGNoOnI9PntsZXQgdD17fSxuPShpLG8pPT57dFtpXT1vfTtyZXR1cm57bWF0Y2hlZDplLmV2ZXJ5KGk9PkVlKGkscixuKSksc2VsZWN0aW9uczp0fX0sZ2V0U2VsZWN0aW9uS2V5czooKT0+WnIoZSxHZSksbWF0Y2hlclR5cGU6XCJhbmRcIn0pfSl9ZnVuY3Rpb24gWXUoLi4uZSl7cmV0dXJuIHBlKHtbT2VdOigpPT4oe21hdGNoOnI9PntsZXQgdD17fSxuPShpLG8pPT57dFtpXT1vfTtyZXR1cm4gWnIoZSxHZSkuZm9yRWFjaChpPT5uKGksdm9pZCAwKSkse21hdGNoZWQ6ZS5zb21lKGk9PkVlKGkscixuKSksc2VsZWN0aW9uczp0fX0sZ2V0U2VsZWN0aW9uS2V5czooKT0+WnIoZSxHZSksbWF0Y2hlclR5cGU6XCJvclwifSl9KX1mdW5jdGlvbiBJKGUpe3JldHVybntbT2VdOigpPT4oe21hdGNoOnI9Pih7bWF0Y2hlZDohIWUocil9KX0pfX1mdW5jdGlvbiBKbyguLi5lKXtsZXQgcj10eXBlb2YgZVswXT09XCJzdHJpbmdcIj9lWzBdOnZvaWQgMCx0PWUubGVuZ3RoPT09Mj9lWzFdOnR5cGVvZiBlWzBdPT1cInN0cmluZ1wiP3ZvaWQgMDplWzBdO3JldHVybiBwZSh7W09lXTooKT0+KHttYXRjaDpuPT57bGV0IGk9e1tyPz9XdF06bn07cmV0dXJue21hdGNoZWQ6dD09PXZvaWQgMHx8RWUodCxuLChvLHMpPT57aVtvXT1zfSksc2VsZWN0aW9uczppfX0sZ2V0U2VsZWN0aW9uS2V5czooKT0+W3I/P1d0XS5jb25jYXQodD09PXZvaWQgMD9bXTpHZSh0KSl9KX0pfWZ1bmN0aW9uIHllKGUpe3JldHVybiB0eXBlb2YgZT09XCJudW1iZXJcIn1mdW5jdGlvbiBqZShlKXtyZXR1cm4gdHlwZW9mIGU9PVwic3RyaW5nXCJ9ZnVuY3Rpb24gVmUoZSl7cmV0dXJuIHR5cGVvZiBlPT1cImJpZ2ludFwifXZhciBuZz1wZShJKGZ1bmN0aW9uKGUpe3JldHVybiEwfSkpO3ZhciBCZT1lPT5PYmplY3QuYXNzaWduKHBlKGUpLHtzdGFydHNXaXRoOnI9PntyZXR1cm4gQmUocShlLCh0PXIsSShuPT5qZShuKSYmbi5zdGFydHNXaXRoKHQpKSkpKTt2YXIgdH0sZW5kc1dpdGg6cj0+e3JldHVybiBCZShxKGUsKHQ9cixJKG49PmplKG4pJiZuLmVuZHNXaXRoKHQpKSkpKTt2YXIgdH0sbWluTGVuZ3RoOnI9PkJlKHEoZSwodD0+SShuPT5qZShuKSYmbi5sZW5ndGg+PXQpKShyKSkpLGxlbmd0aDpyPT5CZShxKGUsKHQ9Pkkobj0+amUobikmJm4ubGVuZ3RoPT09dCkpKHIpKSksbWF4TGVuZ3RoOnI9PkJlKHEoZSwodD0+SShuPT5qZShuKSYmbi5sZW5ndGg8PXQpKShyKSkpLGluY2x1ZGVzOnI9PntyZXR1cm4gQmUocShlLCh0PXIsSShuPT5qZShuKSYmbi5pbmNsdWRlcyh0KSkpKSk7dmFyIHR9LHJlZ2V4OnI9PntyZXR1cm4gQmUocShlLCh0PXIsSShuPT5qZShuKSYmISFuLm1hdGNoKHQpKSkpKTt2YXIgdH19KSxpZz1CZShJKGplKSksYmU9ZT0+T2JqZWN0LmFzc2lnbihwZShlKSx7YmV0d2Vlbjoocix0KT0+YmUocShlLCgobixpKT0+SShvPT55ZShvKSYmbjw9byYmaT49bykpKHIsdCkpKSxsdDpyPT5iZShxKGUsKHQ9Pkkobj0+eWUobikmJm48dCkpKHIpKSksZ3Q6cj0+YmUocShlLCh0PT5JKG49PnllKG4pJiZuPnQpKShyKSkpLGx0ZTpyPT5iZShxKGUsKHQ9Pkkobj0+eWUobikmJm48PXQpKShyKSkpLGd0ZTpyPT5iZShxKGUsKHQ9Pkkobj0+eWUobikmJm4+PXQpKShyKSkpLGludDooKT0+YmUocShlLEkocj0+eWUocikmJk51bWJlci5pc0ludGVnZXIocikpKSksZmluaXRlOigpPT5iZShxKGUsSShyPT55ZShyKSYmTnVtYmVyLmlzRmluaXRlKHIpKSkpLHBvc2l0aXZlOigpPT5iZShxKGUsSShyPT55ZShyKSYmcj4wKSkpLG5lZ2F0aXZlOigpPT5iZShxKGUsSShyPT55ZShyKSYmcjwwKSkpfSksb2c9YmUoSSh5ZSkpLFVlPWU9Pk9iamVjdC5hc3NpZ24ocGUoZSkse2JldHdlZW46KHIsdCk9PlVlKHEoZSwoKG4saSk9Pkkobz0+VmUobykmJm48PW8mJmk+PW8pKShyLHQpKSksbHQ6cj0+VWUocShlLCh0PT5JKG49PlZlKG4pJiZuPHQpKShyKSkpLGd0OnI9PlVlKHEoZSwodD0+SShuPT5WZShuKSYmbj50KSkocikpKSxsdGU6cj0+VWUocShlLCh0PT5JKG49PlZlKG4pJiZuPD10KSkocikpKSxndGU6cj0+VWUocShlLCh0PT5JKG49PlZlKG4pJiZuPj10KSkocikpKSxwb3NpdGl2ZTooKT0+VWUocShlLEkocj0+VmUocikmJnI+MCkpKSxuZWdhdGl2ZTooKT0+VWUocShlLEkocj0+VmUocikmJnI8MCkpKX0pLHNnPVVlKEkoVmUpKSxhZz1wZShJKGZ1bmN0aW9uKGUpe3JldHVybiB0eXBlb2YgZT09XCJib29sZWFuXCJ9KSksbGc9cGUoSShmdW5jdGlvbihlKXtyZXR1cm4gdHlwZW9mIGU9PVwic3ltYm9sXCJ9KSksdWc9cGUoSShmdW5jdGlvbihlKXtyZXR1cm4gZT09bnVsbH0pKSxjZz1wZShJKGZ1bmN0aW9uKGUpe3JldHVybiBlIT1udWxsfSkpO3ZhciBwaT1jbGFzcyBleHRlbmRzIEVycm9ye2NvbnN0cnVjdG9yKHIpe2xldCB0O3RyeXt0PUpTT04uc3RyaW5naWZ5KHIpfWNhdGNoe3Q9cn1zdXBlcihgUGF0dGVybiBtYXRjaGluZyBlcnJvcjogbm8gcGF0dGVybiBtYXRjaGVzIHZhbHVlICR7dH1gKSx0aGlzLmlucHV0PXZvaWQgMCx0aGlzLmlucHV0PXJ9fSxkaT17bWF0Y2hlZDohMSx2YWx1ZTp2b2lkIDB9O2Z1bmN0aW9uIGhyKGUpe3JldHVybiBuZXcgbWkoZSxkaSl9dmFyIG1pPWNsYXNzIGV7Y29uc3RydWN0b3Iocix0KXt0aGlzLmlucHV0PXZvaWQgMCx0aGlzLnN0YXRlPXZvaWQgMCx0aGlzLmlucHV0PXIsdGhpcy5zdGF0ZT10fXdpdGgoLi4ucil7aWYodGhpcy5zdGF0ZS5tYXRjaGVkKXJldHVybiB0aGlzO2xldCB0PXJbci5sZW5ndGgtMV0sbj1bclswXV0saTtyLmxlbmd0aD09PTMmJnR5cGVvZiByWzFdPT1cImZ1bmN0aW9uXCI/aT1yWzFdOnIubGVuZ3RoPjImJm4ucHVzaCguLi5yLnNsaWNlKDEsci5sZW5ndGgtMSkpO2xldCBvPSExLHM9e30sYT0odSxjKT0+e289ITAsc1t1XT1jfSxsPSFuLnNvbWUodT0+RWUodSx0aGlzLmlucHV0LGEpKXx8aSYmIWkodGhpcy5pbnB1dCk/ZGk6e21hdGNoZWQ6ITAsdmFsdWU6dChvP1d0IGluIHM/c1tXdF06czp0aGlzLmlucHV0LHRoaXMuaW5wdXQpfTtyZXR1cm4gbmV3IGUodGhpcy5pbnB1dCxsKX13aGVuKHIsdCl7aWYodGhpcy5zdGF0ZS5tYXRjaGVkKXJldHVybiB0aGlzO2xldCBuPSEhcih0aGlzLmlucHV0KTtyZXR1cm4gbmV3IGUodGhpcy5pbnB1dCxuP3ttYXRjaGVkOiEwLHZhbHVlOnQodGhpcy5pbnB1dCx0aGlzLmlucHV0KX06ZGkpfW90aGVyd2lzZShyKXtyZXR1cm4gdGhpcy5zdGF0ZS5tYXRjaGVkP3RoaXMuc3RhdGUudmFsdWU6cih0aGlzLmlucHV0KX1leGhhdXN0aXZlKCl7aWYodGhpcy5zdGF0ZS5tYXRjaGVkKXJldHVybiB0aGlzLnN0YXRlLnZhbHVlO3Rocm93IG5ldyBwaSh0aGlzLmlucHV0KX1ydW4oKXtyZXR1cm4gdGhpcy5leGhhdXN0aXZlKCl9cmV0dXJuVHlwZSgpe3JldHVybiB0aGlzfX07dmFyIHpvPXJlcXVpcmUoXCJub2RlOnV0aWxcIik7dmFyIHp1PXt3YXJuOmtlKFwicHJpc21hOndhcm5cIil9LFp1PXt3YXJuOigpPT4hcHJvY2Vzcy5lbnYuUFJJU01BX0RJU0FCTEVfV0FSTklOR1N9O2Z1bmN0aW9uIEp0KGUsLi4ucil7WnUud2FybigpJiZjb25zb2xlLndhcm4oYCR7enUud2Fybn0gJHtlfWAsLi4ucil9dmFyIFh1PSgwLHpvLnByb21pc2lmeSkoWW8uZGVmYXVsdC5leGVjKSxlZT1ncihcInByaXNtYTpnZXQtcGxhdGZvcm1cIiksZWM9W1wiMS4wLnhcIixcIjEuMS54XCIsXCIzLjAueFwiXTthc3luYyBmdW5jdGlvbiBabygpe2xldCBlPUt0LmRlZmF1bHQucGxhdGZvcm0oKSxyPXByb2Nlc3MuYXJjaDtpZihlPT09XCJmcmVlYnNkXCIpe2xldCBzPWF3YWl0IFl0KFwiZnJlZWJzZC12ZXJzaW9uXCIpO2lmKHMmJnMudHJpbSgpLmxlbmd0aD4wKXtsZXQgbD0vXihcXGQrKVxcLj8vLmV4ZWMocyk7aWYobClyZXR1cm57cGxhdGZvcm06XCJmcmVlYnNkXCIsdGFyZ2V0RGlzdHJvOmBmcmVlYnNkJHtsWzFdfWAsYXJjaDpyfX19aWYoZSE9PVwibGludXhcIilyZXR1cm57cGxhdGZvcm06ZSxhcmNoOnJ9O2xldCB0PWF3YWl0IHRjKCksbj1hd2FpdCBjYygpLGk9aWMoe2FyY2g6cixhcmNoRnJvbVVuYW1lOm4sZmFtaWx5RGlzdHJvOnQuZmFtaWx5RGlzdHJvfSkse2xpYnNzbDpvfT1hd2FpdCBvYyhpKTtyZXR1cm57cGxhdGZvcm06XCJsaW51eFwiLGxpYnNzbDpvLGFyY2g6cixhcmNoRnJvbVVuYW1lOm4sLi4udH19ZnVuY3Rpb24gcmMoZSl7bGV0IHI9L15JRD1cIj8oW15cIlxcbl0qKVwiPyQvaW0sdD0vXklEX0xJS0U9XCI/KFteXCJcXG5dKilcIj8kL2ltLG49ci5leGVjKGUpLGk9biYmblsxXSYmblsxXS50b0xvd2VyQ2FzZSgpfHxcIlwiLG89dC5leGVjKGUpLHM9byYmb1sxXSYmb1sxXS50b0xvd2VyQ2FzZSgpfHxcIlwiLGE9aHIoe2lkOmksaWRMaWtlOnN9KS53aXRoKHtpZDpcImFscGluZVwifSwoe2lkOmx9KT0+KHt0YXJnZXREaXN0cm86XCJtdXNsXCIsZmFtaWx5RGlzdHJvOmwsb3JpZ2luYWxEaXN0cm86bH0pKS53aXRoKHtpZDpcInJhc3BiaWFuXCJ9LCh7aWQ6bH0pPT4oe3RhcmdldERpc3RybzpcImFybVwiLGZhbWlseURpc3RybzpcImRlYmlhblwiLG9yaWdpbmFsRGlzdHJvOmx9KSkud2l0aCh7aWQ6XCJuaXhvc1wifSwoe2lkOmx9KT0+KHt0YXJnZXREaXN0cm86XCJuaXhvc1wiLG9yaWdpbmFsRGlzdHJvOmwsZmFtaWx5RGlzdHJvOlwibml4b3NcIn0pKS53aXRoKHtpZDpcImRlYmlhblwifSx7aWQ6XCJ1YnVudHVcIn0sKHtpZDpsfSk9Pih7dGFyZ2V0RGlzdHJvOlwiZGViaWFuXCIsZmFtaWx5RGlzdHJvOlwiZGViaWFuXCIsb3JpZ2luYWxEaXN0cm86bH0pKS53aXRoKHtpZDpcInJoZWxcIn0se2lkOlwiY2VudG9zXCJ9LHtpZDpcImZlZG9yYVwifSwoe2lkOmx9KT0+KHt0YXJnZXREaXN0cm86XCJyaGVsXCIsZmFtaWx5RGlzdHJvOlwicmhlbFwiLG9yaWdpbmFsRGlzdHJvOmx9KSkud2hlbigoe2lkTGlrZTpsfSk9PmwuaW5jbHVkZXMoXCJkZWJpYW5cIil8fGwuaW5jbHVkZXMoXCJ1YnVudHVcIiksKHtpZDpsfSk9Pih7dGFyZ2V0RGlzdHJvOlwiZGViaWFuXCIsZmFtaWx5RGlzdHJvOlwiZGViaWFuXCIsb3JpZ2luYWxEaXN0cm86bH0pKS53aGVuKCh7aWRMaWtlOmx9KT0+aT09PVwiYXJjaFwifHxsLmluY2x1ZGVzKFwiYXJjaFwiKSwoe2lkOmx9KT0+KHt0YXJnZXREaXN0cm86XCJkZWJpYW5cIixmYW1pbHlEaXN0cm86XCJhcmNoXCIsb3JpZ2luYWxEaXN0cm86bH0pKS53aGVuKCh7aWRMaWtlOmx9KT0+bC5pbmNsdWRlcyhcImNlbnRvc1wiKXx8bC5pbmNsdWRlcyhcImZlZG9yYVwiKXx8bC5pbmNsdWRlcyhcInJoZWxcIil8fGwuaW5jbHVkZXMoXCJzdXNlXCIpLCh7aWQ6bH0pPT4oe3RhcmdldERpc3RybzpcInJoZWxcIixmYW1pbHlEaXN0cm86XCJyaGVsXCIsb3JpZ2luYWxEaXN0cm86bH0pKS5vdGhlcndpc2UoKHtpZDpsfSk9Pih7dGFyZ2V0RGlzdHJvOnZvaWQgMCxmYW1pbHlEaXN0cm86dm9pZCAwLG9yaWdpbmFsRGlzdHJvOmx9KSk7cmV0dXJuIGVlKGBGb3VuZCBkaXN0cm8gaW5mbzpcbiR7SlNPTi5zdHJpbmdpZnkoYSxudWxsLDIpfWApLGF9YXN5bmMgZnVuY3Rpb24gdGMoKXtsZXQgZT1cIi9ldGMvb3MtcmVsZWFzZVwiO3RyeXtsZXQgcj1hd2FpdCBmaS5kZWZhdWx0LnJlYWRGaWxlKGUse2VuY29kaW5nOlwidXRmLThcIn0pO3JldHVybiByYyhyKX1jYXRjaHtyZXR1cm57dGFyZ2V0RGlzdHJvOnZvaWQgMCxmYW1pbHlEaXN0cm86dm9pZCAwLG9yaWdpbmFsRGlzdHJvOnZvaWQgMH19fWZ1bmN0aW9uIG5jKGUpe2xldCByPS9eT3BlblNTTFxccyhcXGQrXFwuXFxkKylcXC5cXGQrLy5leGVjKGUpO2lmKHIpe2xldCB0PWAke3JbMV19LnhgO3JldHVybiBYbyh0KX19ZnVuY3Rpb24gSG8oZSl7bGV0IHI9L2xpYnNzbFxcLnNvXFwuKFxcZCkoXFwuXFxkKT8vLmV4ZWMoZSk7aWYocil7bGV0IHQ9YCR7clsxXX0ke3JbMl0/P1wiLjBcIn0ueGA7cmV0dXJuIFhvKHQpfX1mdW5jdGlvbiBYbyhlKXtsZXQgcj0oKCk9PntpZihycyhlKSlyZXR1cm4gZTtsZXQgdD1lLnNwbGl0KFwiLlwiKTtyZXR1cm4gdFsxXT1cIjBcIix0LmpvaW4oXCIuXCIpfSkoKTtpZihlYy5pbmNsdWRlcyhyKSlyZXR1cm4gcn1mdW5jdGlvbiBpYyhlKXtyZXR1cm4gaHIoZSkud2l0aCh7ZmFtaWx5RGlzdHJvOlwibXVzbFwifSwoKT0+KGVlKCdUcnlpbmcgcGxhdGZvcm0tc3BlY2lmaWMgcGF0aHMgZm9yIFwiYWxwaW5lXCInKSxbXCIvbGliXCIsXCIvdXNyL2xpYlwiXSkpLndpdGgoe2ZhbWlseURpc3RybzpcImRlYmlhblwifSwoe2FyY2hGcm9tVW5hbWU6cn0pPT4oZWUoJ1RyeWluZyBwbGF0Zm9ybS1zcGVjaWZpYyBwYXRocyBmb3IgXCJkZWJpYW5cIiAoYW5kIFwidWJ1bnR1XCIpJyksW2AvdXNyL2xpYi8ke3J9LWxpbnV4LWdudWAsYC9saWIvJHtyfS1saW51eC1nbnVgXSkpLndpdGgoe2ZhbWlseURpc3RybzpcInJoZWxcIn0sKCk9PihlZSgnVHJ5aW5nIHBsYXRmb3JtLXNwZWNpZmljIHBhdGhzIGZvciBcInJoZWxcIicpLFtcIi9saWI2NFwiLFwiL3Vzci9saWI2NFwiXSkpLm90aGVyd2lzZSgoe2ZhbWlseURpc3RybzpyLGFyY2g6dCxhcmNoRnJvbVVuYW1lOm59KT0+KGVlKGBEb24ndCBrbm93IGFueSBwbGF0Zm9ybS1zcGVjaWZpYyBwYXRocyBmb3IgXCIke3J9XCIgb24gJHt0fSAoJHtufSlgKSxbXSkpfWFzeW5jIGZ1bmN0aW9uIG9jKGUpe2xldCByPSdncmVwIC12IFwibGlic3NsLnNvLjBcIicsdD1hd2FpdCBLbyhlKTtpZih0KXtlZShgRm91bmQgbGlic3NsLnNvIGZpbGUgdXNpbmcgcGxhdGZvcm0tc3BlY2lmaWMgcGF0aHM6ICR7dH1gKTtsZXQgbz1Ibyh0KTtpZihlZShgVGhlIHBhcnNlZCBsaWJzc2wgdmVyc2lvbiBpczogJHtvfWApLG8pcmV0dXJue2xpYnNzbDpvLHN0cmF0ZWd5OlwibGlic3NsLXNwZWNpZmljLXBhdGhcIn19ZWUoJ0ZhbGxpbmcgYmFjayB0byBcImxkY29uZmlnXCIgYW5kIG90aGVyIGdlbmVyaWMgcGF0aHMnKTtsZXQgbj1hd2FpdCBZdChgbGRjb25maWcgLXAgfCBzZWQgXCJzLy4qPT5zKi8vXCIgfCBzZWQgXCJzfC4qL3x8XCIgfCBncmVwIGxpYnNzbCB8IHNvcnQgfCAke3J9YCk7aWYobnx8KG49YXdhaXQgS28oW1wiL2xpYjY0XCIsXCIvdXNyL2xpYjY0XCIsXCIvbGliXCIsXCIvdXNyL2xpYlwiXSkpLG4pe2VlKGBGb3VuZCBsaWJzc2wuc28gZmlsZSB1c2luZyBcImxkY29uZmlnXCIgb3Igb3RoZXIgZ2VuZXJpYyBwYXRoczogJHtufWApO2xldCBvPUhvKG4pO2lmKGVlKGBUaGUgcGFyc2VkIGxpYnNzbCB2ZXJzaW9uIGlzOiAke299YCksbylyZXR1cm57bGlic3NsOm8sc3RyYXRlZ3k6XCJsZGNvbmZpZ1wifX1sZXQgaT1hd2FpdCBZdChcIm9wZW5zc2wgdmVyc2lvbiAtdlwiKTtpZihpKXtlZShgRm91bmQgb3BlbnNzbCBiaW5hcnkgd2l0aCB2ZXJzaW9uOiAke2l9YCk7bGV0IG89bmMoaSk7aWYoZWUoYFRoZSBwYXJzZWQgb3BlbnNzbCB2ZXJzaW9uIGlzOiAke299YCksbylyZXR1cm57bGlic3NsOm8sc3RyYXRlZ3k6XCJvcGVuc3NsLWJpbmFyeVwifX1yZXR1cm4gZWUoXCJDb3VsZG4ndCBmaW5kIGFueSB2ZXJzaW9uIG9mIGxpYnNzbCBvciBPcGVuU1NMIGluIHRoZSBzeXN0ZW1cIikse319YXN5bmMgZnVuY3Rpb24gS28oZSl7Zm9yKGxldCByIG9mIGUpe2xldCB0PWF3YWl0IHNjKHIpO2lmKHQpcmV0dXJuIHR9fWFzeW5jIGZ1bmN0aW9uIHNjKGUpe3RyeXtyZXR1cm4oYXdhaXQgZmkuZGVmYXVsdC5yZWFkZGlyKGUpKS5maW5kKHQ9PnQuc3RhcnRzV2l0aChcImxpYnNzbC5zby5cIikmJiF0LnN0YXJ0c1dpdGgoXCJsaWJzc2wuc28uMFwiKSl9Y2F0Y2gocil7aWYoci5jb2RlPT09XCJFTk9FTlRcIilyZXR1cm47dGhyb3cgcn19YXN5bmMgZnVuY3Rpb24gaXIoKXtsZXR7YmluYXJ5VGFyZ2V0OmV9PWF3YWl0IGVzKCk7cmV0dXJuIGV9ZnVuY3Rpb24gYWMoZSl7cmV0dXJuIGUuYmluYXJ5VGFyZ2V0IT09dm9pZCAwfWFzeW5jIGZ1bmN0aW9uIGdpKCl7bGV0e21lbW9pemVkOmUsLi4ucn09YXdhaXQgZXMoKTtyZXR1cm4gcn12YXIgSHQ9e307YXN5bmMgZnVuY3Rpb24gZXMoKXtpZihhYyhIdCkpcmV0dXJuIFByb21pc2UucmVzb2x2ZSh7Li4uSHQsbWVtb2l6ZWQ6ITB9KTtsZXQgZT1hd2FpdCBabygpLHI9bGMoZSk7cmV0dXJuIEh0PXsuLi5lLGJpbmFyeVRhcmdldDpyfSx7Li4uSHQsbWVtb2l6ZWQ6ITF9fWZ1bmN0aW9uIGxjKGUpe2xldHtwbGF0Zm9ybTpyLGFyY2g6dCxhcmNoRnJvbVVuYW1lOm4sbGlic3NsOmksdGFyZ2V0RGlzdHJvOm8sZmFtaWx5RGlzdHJvOnMsb3JpZ2luYWxEaXN0cm86YX09ZTtyPT09XCJsaW51eFwiJiYhW1wieDY0XCIsXCJhcm02NFwiXS5pbmNsdWRlcyh0KSYmSnQoYFByaXNtYSBvbmx5IG9mZmljaWFsbHkgc3VwcG9ydHMgTGludXggb24gYW1kNjQgKHg4Nl82NCkgYW5kIGFybTY0IChhYXJjaDY0KSBzeXN0ZW0gYXJjaGl0ZWN0dXJlcyAoZGV0ZWN0ZWQgXCIke3R9XCIgaW5zdGVhZCkuIElmIHlvdSBhcmUgdXNpbmcgeW91ciBvd24gY3VzdG9tIFByaXNtYSBlbmdpbmVzLCB5b3UgY2FuIGlnbm9yZSB0aGlzIHdhcm5pbmcsIGFzIGxvbmcgYXMgeW91J3ZlIGNvbXBpbGVkIHRoZSBlbmdpbmVzIGZvciB5b3VyIHN5c3RlbSBhcmNoaXRlY3R1cmUgXCIke259XCIuYCk7bGV0IGw9XCIxLjEueFwiO2lmKHI9PT1cImxpbnV4XCImJmk9PT12b2lkIDApe2xldCBjPWhyKHtmYW1pbHlEaXN0cm86c30pLndpdGgoe2ZhbWlseURpc3RybzpcImRlYmlhblwifSwoKT0+XCJQbGVhc2UgbWFudWFsbHkgaW5zdGFsbCBPcGVuU1NMIHZpYSBgYXB0LWdldCB1cGRhdGUgLXkgJiYgYXB0LWdldCBpbnN0YWxsIC15IG9wZW5zc2xgIGFuZCB0cnkgaW5zdGFsbGluZyBQcmlzbWEgYWdhaW4uIElmIHlvdSdyZSBydW5uaW5nIFByaXNtYSBvbiBEb2NrZXIsIGFkZCB0aGlzIGNvbW1hbmQgdG8geW91ciBEb2NrZXJmaWxlLCBvciBzd2l0Y2ggdG8gYW4gaW1hZ2UgdGhhdCBhbHJlYWR5IGhhcyBPcGVuU1NMIGluc3RhbGxlZC5cIikub3RoZXJ3aXNlKCgpPT5cIlBsZWFzZSBtYW51YWxseSBpbnN0YWxsIE9wZW5TU0wgYW5kIHRyeSBpbnN0YWxsaW5nIFByaXNtYSBhZ2Fpbi5cIik7SnQoYFByaXNtYSBmYWlsZWQgdG8gZGV0ZWN0IHRoZSBsaWJzc2wvb3BlbnNzbCB2ZXJzaW9uIHRvIHVzZSwgYW5kIG1heSBub3Qgd29yayBhcyBleHBlY3RlZC4gRGVmYXVsdGluZyB0byBcIm9wZW5zc2wtJHtsfVwiLlxuJHtjfWApfWxldCB1PVwiZGViaWFuXCI7aWYocj09PVwibGludXhcIiYmbz09PXZvaWQgMCYmZWUoYERpc3RybyBpcyBcIiR7YX1cIi4gRmFsbGluZyBiYWNrIHRvIFByaXNtYSBlbmdpbmVzIGJ1aWx0IGZvciBcIiR7dX1cIi5gKSxyPT09XCJkYXJ3aW5cIiYmdD09PVwiYXJtNjRcIilyZXR1cm5cImRhcndpbi1hcm02NFwiO2lmKHI9PT1cImRhcndpblwiKXJldHVyblwiZGFyd2luXCI7aWYocj09PVwid2luMzJcIilyZXR1cm5cIndpbmRvd3NcIjtpZihyPT09XCJmcmVlYnNkXCIpcmV0dXJuIG87aWYocj09PVwib3BlbmJzZFwiKXJldHVyblwib3BlbmJzZFwiO2lmKHI9PT1cIm5ldGJzZFwiKXJldHVyblwibmV0YnNkXCI7aWYocj09PVwibGludXhcIiYmbz09PVwibml4b3NcIilyZXR1cm5cImxpbnV4LW5peG9zXCI7aWYocj09PVwibGludXhcIiYmdD09PVwiYXJtNjRcIilyZXR1cm5gJHtvPT09XCJtdXNsXCI/XCJsaW51eC1tdXNsLWFybTY0XCI6XCJsaW51eC1hcm02NFwifS1vcGVuc3NsLSR7aXx8bH1gO2lmKHI9PT1cImxpbnV4XCImJnQ9PT1cImFybVwiKXJldHVybmBsaW51eC1hcm0tb3BlbnNzbC0ke2l8fGx9YDtpZihyPT09XCJsaW51eFwiJiZvPT09XCJtdXNsXCIpe2xldCBjPVwibGludXgtbXVzbFwiO3JldHVybiFpfHxycyhpKT9jOmAke2N9LW9wZW5zc2wtJHtpfWB9cmV0dXJuIHI9PT1cImxpbnV4XCImJm8mJmk/YCR7b30tb3BlbnNzbC0ke2l9YDoociE9PVwibGludXhcIiYmSnQoYFByaXNtYSBkZXRlY3RlZCB1bmtub3duIE9TIFwiJHtyfVwiIGFuZCBtYXkgbm90IHdvcmsgYXMgZXhwZWN0ZWQuIERlZmF1bHRpbmcgdG8gXCJsaW51eFwiLmApLGk/YCR7dX0tb3BlbnNzbC0ke2l9YDpvP2Ake299LW9wZW5zc2wtJHtsfWA6YCR7dX0tb3BlbnNzbC0ke2x9YCl9YXN5bmMgZnVuY3Rpb24gdWMoZSl7dHJ5e3JldHVybiBhd2FpdCBlKCl9Y2F0Y2h7cmV0dXJufX1mdW5jdGlvbiBZdChlKXtyZXR1cm4gdWMoYXN5bmMoKT0+e2xldCByPWF3YWl0IFh1KGUpO3JldHVybiBlZShgQ29tbWFuZCBcIiR7ZX1cIiBzdWNjZXNzZnVsbHkgcmV0dXJuZWQgXCIke3Iuc3Rkb3V0fVwiYCksci5zdGRvdXR9KX1hc3luYyBmdW5jdGlvbiBjYygpe3JldHVybiB0eXBlb2YgS3QuZGVmYXVsdC5tYWNoaW5lPT1cImZ1bmN0aW9uXCI/S3QuZGVmYXVsdC5tYWNoaW5lKCk6KGF3YWl0IFl0KFwidW5hbWUgLW1cIikpPy50cmltKCl9ZnVuY3Rpb24gcnMoZSl7cmV0dXJuIGUuc3RhcnRzV2l0aChcIjEuXCIpfXZhciBYdD17fTt0cihYdCx7YmVlcDooKT0+RmMsY2xlYXJTY3JlZW46KCk9Pk9jLGNsZWFyVGVybWluYWw6KCk9Pl9jLGN1cnNvckJhY2t3YXJkOigpPT55YyxjdXJzb3JEb3duOigpPT5nYyxjdXJzb3JGb3J3YXJkOigpPT5oYyxjdXJzb3JHZXRQb3NpdGlvbjooKT0+d2MsY3Vyc29ySGlkZTooKT0+UGMsY3Vyc29yTGVmdDooKT0+aXMsY3Vyc29yTW92ZTooKT0+ZmMsY3Vyc29yTmV4dExpbmU6KCk9PnhjLGN1cnNvclByZXZMaW5lOigpPT52YyxjdXJzb3JSZXN0b3JlUG9zaXRpb246KCk9PkVjLGN1cnNvclNhdmVQb3NpdGlvbjooKT0+YmMsY3Vyc29yU2hvdzooKT0+VGMsY3Vyc29yVG86KCk9Pm1jLGN1cnNvclVwOigpPT5ucyxlbnRlckFsdGVybmF0aXZlU2NyZWVuOigpPT5OYyxlcmFzZURvd246KCk9PkNjLGVyYXNlRW5kTGluZTooKT0+UmMsZXJhc2VMaW5lOigpPT5vcyxlcmFzZUxpbmVzOigpPT5TYyxlcmFzZVNjcmVlbjooKT0+aGksZXJhc2VTdGFydExpbmU6KCk9PkFjLGVyYXNlVXA6KCk9PkljLGV4aXRBbHRlcm5hdGl2ZVNjcmVlbjooKT0+TGMsaVRlcm06KCk9PnFjLGltYWdlOigpPT4kYyxsaW5rOigpPT5NYyxzY3JvbGxEb3duOigpPT5EYyxzY3JvbGxVcDooKT0+a2N9KTt2YXIgWnQ9QyhyZXF1aXJlKFwibm9kZTpwcm9jZXNzXCIpLDEpO3ZhciB6dD1nbG9iYWxUaGlzLndpbmRvdz8uZG9jdW1lbnQhPT12b2lkIDAsYmc9Z2xvYmFsVGhpcy5wcm9jZXNzPy52ZXJzaW9ucz8ubm9kZSE9PXZvaWQgMCxFZz1nbG9iYWxUaGlzLnByb2Nlc3M/LnZlcnNpb25zPy5idW4hPT12b2lkIDAsd2c9Z2xvYmFsVGhpcy5EZW5vPy52ZXJzaW9uPy5kZW5vIT09dm9pZCAwLHhnPWdsb2JhbFRoaXMucHJvY2Vzcz8udmVyc2lvbnM/LmVsZWN0cm9uIT09dm9pZCAwLHZnPWdsb2JhbFRoaXMubmF2aWdhdG9yPy51c2VyQWdlbnQ/LmluY2x1ZGVzKFwianNkb21cIik9PT0hMCxQZz10eXBlb2YgV29ya2VyR2xvYmFsU2NvcGU8XCJ1XCImJmdsb2JhbFRoaXMgaW5zdGFuY2VvZiBXb3JrZXJHbG9iYWxTY29wZSxUZz10eXBlb2YgRGVkaWNhdGVkV29ya2VyR2xvYmFsU2NvcGU8XCJ1XCImJmdsb2JhbFRoaXMgaW5zdGFuY2VvZiBEZWRpY2F0ZWRXb3JrZXJHbG9iYWxTY29wZSxTZz10eXBlb2YgU2hhcmVkV29ya2VyR2xvYmFsU2NvcGU8XCJ1XCImJmdsb2JhbFRoaXMgaW5zdGFuY2VvZiBTaGFyZWRXb3JrZXJHbG9iYWxTY29wZSxSZz10eXBlb2YgU2VydmljZVdvcmtlckdsb2JhbFNjb3BlPFwidVwiJiZnbG9iYWxUaGlzIGluc3RhbmNlb2YgU2VydmljZVdvcmtlckdsb2JhbFNjb3BlLFhyPWdsb2JhbFRoaXMubmF2aWdhdG9yPy51c2VyQWdlbnREYXRhPy5wbGF0Zm9ybSxBZz1Ycj09PVwibWFjT1NcInx8Z2xvYmFsVGhpcy5uYXZpZ2F0b3I/LnBsYXRmb3JtPT09XCJNYWNJbnRlbFwifHxnbG9iYWxUaGlzLm5hdmlnYXRvcj8udXNlckFnZW50Py5pbmNsdWRlcyhcIiBNYWMgXCIpPT09ITB8fGdsb2JhbFRoaXMucHJvY2Vzcz8ucGxhdGZvcm09PT1cImRhcndpblwiLENnPVhyPT09XCJXaW5kb3dzXCJ8fGdsb2JhbFRoaXMubmF2aWdhdG9yPy5wbGF0Zm9ybT09PVwiV2luMzJcInx8Z2xvYmFsVGhpcy5wcm9jZXNzPy5wbGF0Zm9ybT09PVwid2luMzJcIixJZz1Ycj09PVwiTGludXhcInx8Z2xvYmFsVGhpcy5uYXZpZ2F0b3I/LnBsYXRmb3JtPy5zdGFydHNXaXRoKFwiTGludXhcIik9PT0hMHx8Z2xvYmFsVGhpcy5uYXZpZ2F0b3I/LnVzZXJBZ2VudD8uaW5jbHVkZXMoXCIgTGludXggXCIpPT09ITB8fGdsb2JhbFRoaXMucHJvY2Vzcz8ucGxhdGZvcm09PT1cImxpbnV4XCIsa2c9WHI9PT1cImlPU1wifHxnbG9iYWxUaGlzLm5hdmlnYXRvcj8ucGxhdGZvcm09PT1cIk1hY0ludGVsXCImJmdsb2JhbFRoaXMubmF2aWdhdG9yPy5tYXhUb3VjaFBvaW50cz4xfHwvaVBhZHxpUGhvbmV8aVBvZC8udGVzdChnbG9iYWxUaGlzLm5hdmlnYXRvcj8ucGxhdGZvcm0pLERnPVhyPT09XCJBbmRyb2lkXCJ8fGdsb2JhbFRoaXMubmF2aWdhdG9yPy5wbGF0Zm9ybT09PVwiQW5kcm9pZFwifHxnbG9iYWxUaGlzLm5hdmlnYXRvcj8udXNlckFnZW50Py5pbmNsdWRlcyhcIiBBbmRyb2lkIFwiKT09PSEwfHxnbG9iYWxUaGlzLnByb2Nlc3M/LnBsYXRmb3JtPT09XCJhbmRyb2lkXCI7dmFyIGs9XCJcXHgxQltcIixydD1cIlxceDFCXVwiLHlyPVwiXFx4MDdcIixldD1cIjtcIix0cz0henQmJlp0LmRlZmF1bHQuZW52LlRFUk1fUFJPR1JBTT09PVwiQXBwbGVfVGVybWluYWxcIixwYz0henQmJlp0LmRlZmF1bHQucGxhdGZvcm09PT1cIndpbjMyXCIsZGM9enQ/KCk9Pnt0aHJvdyBuZXcgRXJyb3IoXCJgcHJvY2Vzcy5jd2QoKWAgb25seSB3b3JrcyBpbiBOb2RlLmpzLCBub3QgdGhlIGJyb3dzZXIuXCIpfTpadC5kZWZhdWx0LmN3ZCxtYz0oZSxyKT0+e2lmKHR5cGVvZiBlIT1cIm51bWJlclwiKXRocm93IG5ldyBUeXBlRXJyb3IoXCJUaGUgYHhgIGFyZ3VtZW50IGlzIHJlcXVpcmVkXCIpO3JldHVybiB0eXBlb2YgciE9XCJudW1iZXJcIj9rKyhlKzEpK1wiR1wiOmsrKHIrMSkrZXQrKGUrMSkrXCJIXCJ9LGZjPShlLHIpPT57aWYodHlwZW9mIGUhPVwibnVtYmVyXCIpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlRoZSBgeGAgYXJndW1lbnQgaXMgcmVxdWlyZWRcIik7bGV0IHQ9XCJcIjtyZXR1cm4gZTwwP3QrPWsrLWUrXCJEXCI6ZT4wJiYodCs9aytlK1wiQ1wiKSxyPDA/dCs9aystcitcIkFcIjpyPjAmJih0Kz1rK3IrXCJCXCIpLHR9LG5zPShlPTEpPT5rK2UrXCJBXCIsZ2M9KGU9MSk9PmsrZStcIkJcIixoYz0oZT0xKT0+aytlK1wiQ1wiLHljPShlPTEpPT5rK2UrXCJEXCIsaXM9aytcIkdcIixiYz10cz9cIlxceDFCN1wiOmsrXCJzXCIsRWM9dHM/XCJcXHgxQjhcIjprK1widVwiLHdjPWsrXCI2blwiLHhjPWsrXCJFXCIsdmM9aytcIkZcIixQYz1rK1wiPzI1bFwiLFRjPWsrXCI/MjVoXCIsU2M9ZT0+e2xldCByPVwiXCI7Zm9yKGxldCB0PTA7dDxlO3QrKylyKz1vcysodDxlLTE/bnMoKTpcIlwiKTtyZXR1cm4gZSYmKHIrPWlzKSxyfSxSYz1rK1wiS1wiLEFjPWsrXCIxS1wiLG9zPWsrXCIyS1wiLENjPWsrXCJKXCIsSWM9aytcIjFKXCIsaGk9aytcIjJKXCIsa2M9aytcIlNcIixEYz1rK1wiVFwiLE9jPVwiXFx4MUJjXCIsX2M9cGM/YCR7aGl9JHtrfTBmYDpgJHtoaX0ke2t9M0oke2t9SGAsTmM9aytcIj8xMDQ5aFwiLExjPWsrXCI/MTA0OWxcIixGYz15cixNYz0oZSxyKT0+W3J0LFwiOFwiLGV0LGV0LHIseXIsZSxydCxcIjhcIixldCxldCx5cl0uam9pbihcIlwiKSwkYz0oZSxyPXt9KT0+e2xldCB0PWAke3J0fTEzMzc7RmlsZT1pbmxpbmU9MWA7cmV0dXJuIHIud2lkdGgmJih0Kz1gO3dpZHRoPSR7ci53aWR0aH1gKSxyLmhlaWdodCYmKHQrPWA7aGVpZ2h0PSR7ci5oZWlnaHR9YCksci5wcmVzZXJ2ZUFzcGVjdFJhdGlvPT09ITEmJih0Kz1cIjtwcmVzZXJ2ZUFzcGVjdFJhdGlvPTBcIiksdCtcIjpcIitCdWZmZXIuZnJvbShlKS50b1N0cmluZyhcImJhc2U2NFwiKSt5cn0scWM9e3NldEN3ZDooZT1kYygpKT0+YCR7cnR9NTA7Q3VycmVudERpcj0ke2V9JHt5cn1gLGFubm90YXRpb24oZSxyPXt9KXtsZXQgdD1gJHtydH0xMzM3O2Asbj1yLnghPT12b2lkIDAsaT1yLnkhPT12b2lkIDA7aWYoKG58fGkpJiYhKG4mJmkmJnIubGVuZ3RoIT09dm9pZCAwKSl0aHJvdyBuZXcgRXJyb3IoXCJgeGAsIGB5YCBhbmQgYGxlbmd0aGAgbXVzdCBiZSBkZWZpbmVkIHdoZW4gYHhgIG9yIGB5YCBpcyBkZWZpbmVkXCIpO3JldHVybiBlPWUucmVwbGFjZUFsbChcInxcIixcIlwiKSx0Kz1yLmlzSGlkZGVuP1wiQWRkSGlkZGVuQW5ub3RhdGlvbj1cIjpcIkFkZEFubm90YXRpb249XCIsci5sZW5ndGg+MD90Kz0obj9bZSxyLmxlbmd0aCxyLngsci55XTpbci5sZW5ndGgsZV0pLmpvaW4oXCJ8XCIpOnQrPWUsdCt5cn19O3ZhciBlbj1DKGRzKCksMSk7ZnVuY3Rpb24gb3IoZSxyLHt0YXJnZXQ6dD1cInN0ZG91dFwiLC4uLm59PXt9KXtyZXR1cm4gZW4uZGVmYXVsdFt0XT9YdC5saW5rKGUscik6bi5mYWxsYmFjaz09PSExP2U6dHlwZW9mIG4uZmFsbGJhY2s9PVwiZnVuY3Rpb25cIj9uLmZhbGxiYWNrKGUscik6YCR7ZX0gKFxcdTIwMEIke3J9XFx1MjAwQilgfW9yLmlzU3VwcG9ydGVkPWVuLmRlZmF1bHQuc3Rkb3V0O29yLnN0ZGVycj0oZSxyLHQ9e30pPT5vcihlLHIse3RhcmdldDpcInN0ZGVyclwiLC4uLnR9KTtvci5zdGRlcnIuaXNTdXBwb3J0ZWQ9ZW4uZGVmYXVsdC5zdGRlcnI7ZnVuY3Rpb24geGkoZSl7cmV0dXJuIG9yKGUsZSx7ZmFsbGJhY2s6WX0pfXZhciBHYz1tcygpLHZpPUdjLnZlcnNpb247ZnVuY3Rpb24gRXIoZSl7bGV0IHI9UWMoKTtyZXR1cm4gcnx8KGU/LmNvbmZpZy5lbmdpbmVUeXBlPT09XCJsaWJyYXJ5XCI/XCJsaWJyYXJ5XCI6ZT8uY29uZmlnLmVuZ2luZVR5cGU9PT1cImJpbmFyeVwiP1wiYmluYXJ5XCI6ZT8uY29uZmlnLmVuZ2luZVR5cGU9PT1cImNsaWVudFwiP1wiY2xpZW50XCI6V2MoZSkpfWZ1bmN0aW9uIFFjKCl7bGV0IGU9cHJvY2Vzcy5lbnYuUFJJU01BX0NMSUVOVF9FTkdJTkVfVFlQRTtyZXR1cm4gZT09PVwibGlicmFyeVwiP1wibGlicmFyeVwiOmU9PT1cImJpbmFyeVwiP1wiYmluYXJ5XCI6ZT09PVwiY2xpZW50XCI/XCJjbGllbnRcIjp2b2lkIDB9ZnVuY3Rpb24gV2MoZSl7cmV0dXJuIGU/LnByZXZpZXdGZWF0dXJlcy5pbmNsdWRlcyhcInF1ZXJ5Q29tcGlsZXJcIik/XCJjbGllbnRcIjpcImxpYnJhcnlcIn1mdW5jdGlvbiBQaShlKXtyZXR1cm4gZS5uYW1lPT09XCJEcml2ZXJBZGFwdGVyRXJyb3JcIiYmdHlwZW9mIGUuY2F1c2U9PVwib2JqZWN0XCJ9ZnVuY3Rpb24gcm4oZSl7cmV0dXJue29rOiEwLHZhbHVlOmUsbWFwKHIpe3JldHVybiBybihyKGUpKX0sZmxhdE1hcChyKXtyZXR1cm4gcihlKX19fWZ1bmN0aW9uIHNyKGUpe3JldHVybntvazohMSxlcnJvcjplLG1hcCgpe3JldHVybiBzcihlKX0sZmxhdE1hcCgpe3JldHVybiBzcihlKX19fXZhciBmcz1OKFwiZHJpdmVyLWFkYXB0ZXItdXRpbHNcIiksVGk9Y2xhc3N7cmVnaXN0ZXJlZEVycm9ycz1bXTtjb25zdW1lRXJyb3Iocil7cmV0dXJuIHRoaXMucmVnaXN0ZXJlZEVycm9yc1tyXX1yZWdpc3Rlck5ld0Vycm9yKHIpe2xldCB0PTA7Zm9yKDt0aGlzLnJlZ2lzdGVyZWRFcnJvcnNbdF0hPT12b2lkIDA7KXQrKztyZXR1cm4gdGhpcy5yZWdpc3RlcmVkRXJyb3JzW3RdPXtlcnJvcjpyfSx0fX07dmFyIHRuPShlLHI9bmV3IFRpKT0+e2xldCB0PXthZGFwdGVyTmFtZTplLmFkYXB0ZXJOYW1lLGVycm9yUmVnaXN0cnk6cixxdWVyeVJhdzpfZShyLGUucXVlcnlSYXcuYmluZChlKSksZXhlY3V0ZVJhdzpfZShyLGUuZXhlY3V0ZVJhdy5iaW5kKGUpKSxleGVjdXRlU2NyaXB0Ol9lKHIsZS5leGVjdXRlU2NyaXB0LmJpbmQoZSkpLGRpc3Bvc2U6X2UocixlLmRpc3Bvc2UuYmluZChlKSkscHJvdmlkZXI6ZS5wcm92aWRlcixzdGFydFRyYW5zYWN0aW9uOmFzeW5jKC4uLm4pPT4oYXdhaXQgX2UocixlLnN0YXJ0VHJhbnNhY3Rpb24uYmluZChlKSkoLi4ubikpLm1hcChvPT5KYyhyLG8pKX07cmV0dXJuIGUuZ2V0Q29ubmVjdGlvbkluZm8mJih0LmdldENvbm5lY3Rpb25JbmZvPUhjKHIsZS5nZXRDb25uZWN0aW9uSW5mby5iaW5kKGUpKSksdH0sSmM9KGUscik9Pih7YWRhcHRlck5hbWU6ci5hZGFwdGVyTmFtZSxwcm92aWRlcjpyLnByb3ZpZGVyLG9wdGlvbnM6ci5vcHRpb25zLHF1ZXJ5UmF3Ol9lKGUsci5xdWVyeVJhdy5iaW5kKHIpKSxleGVjdXRlUmF3Ol9lKGUsci5leGVjdXRlUmF3LmJpbmQocikpLGNvbW1pdDpfZShlLHIuY29tbWl0LmJpbmQocikpLHJvbGxiYWNrOl9lKGUsci5yb2xsYmFjay5iaW5kKHIpKX0pO2Z1bmN0aW9uIF9lKGUscil7cmV0dXJuIGFzeW5jKC4uLnQpPT57dHJ5e3JldHVybiBybihhd2FpdCByKC4uLnQpKX1jYXRjaChuKXtpZihmcyhcIltlcnJvckB3cmFwQXN5bmNdXCIsbiksUGkobikpcmV0dXJuIHNyKG4uY2F1c2UpO2xldCBpPWUucmVnaXN0ZXJOZXdFcnJvcihuKTtyZXR1cm4gc3Ioe2tpbmQ6XCJHZW5lcmljSnNcIixpZDppfSl9fX1mdW5jdGlvbiBIYyhlLHIpe3JldHVybiguLi50KT0+e3RyeXtyZXR1cm4gcm4ociguLi50KSl9Y2F0Y2gobil7aWYoZnMoXCJbZXJyb3JAd3JhcFN5bmNdXCIsbiksUGkobikpcmV0dXJuIHNyKG4uY2F1c2UpO2xldCBpPWUucmVnaXN0ZXJOZXdFcnJvcihuKTtyZXR1cm4gc3Ioe2tpbmQ6XCJHZW5lcmljSnNcIixpZDppfSl9fX12YXIgWWM9QyhvbigpKTt2YXIgTT1DKHJlcXVpcmUoXCJub2RlOnBhdGhcIikpLHpjPUMob24oKSksUGg9TihcInByaXNtYTplbmdpbmVzXCIpO2Z1bmN0aW9uIGdzKCl7cmV0dXJuIE0uZGVmYXVsdC5qb2luKF9fZGlybmFtZSxcIi4uL1wiKX12YXIgVGg9XCJsaWJxdWVyeS1lbmdpbmVcIjtNLmRlZmF1bHQuam9pbihfX2Rpcm5hbWUsXCIuLi9xdWVyeS1lbmdpbmUtZGFyd2luXCIpO00uZGVmYXVsdC5qb2luKF9fZGlybmFtZSxcIi4uL3F1ZXJ5LWVuZ2luZS1kYXJ3aW4tYXJtNjRcIik7TS5kZWZhdWx0LmpvaW4oX19kaXJuYW1lLFwiLi4vcXVlcnktZW5naW5lLWRlYmlhbi1vcGVuc3NsLTEuMC54XCIpO00uZGVmYXVsdC5qb2luKF9fZGlybmFtZSxcIi4uL3F1ZXJ5LWVuZ2luZS1kZWJpYW4tb3BlbnNzbC0xLjEueFwiKTtNLmRlZmF1bHQuam9pbihfX2Rpcm5hbWUsXCIuLi9xdWVyeS1lbmdpbmUtZGViaWFuLW9wZW5zc2wtMy4wLnhcIik7TS5kZWZhdWx0LmpvaW4oX19kaXJuYW1lLFwiLi4vcXVlcnktZW5naW5lLWxpbnV4LXN0YXRpYy14NjRcIik7TS5kZWZhdWx0LmpvaW4oX19kaXJuYW1lLFwiLi4vcXVlcnktZW5naW5lLWxpbnV4LXN0YXRpYy1hcm02NFwiKTtNLmRlZmF1bHQuam9pbihfX2Rpcm5hbWUsXCIuLi9xdWVyeS1lbmdpbmUtcmhlbC1vcGVuc3NsLTEuMC54XCIpO00uZGVmYXVsdC5qb2luKF9fZGlybmFtZSxcIi4uL3F1ZXJ5LWVuZ2luZS1yaGVsLW9wZW5zc2wtMS4xLnhcIik7TS5kZWZhdWx0LmpvaW4oX19kaXJuYW1lLFwiLi4vcXVlcnktZW5naW5lLXJoZWwtb3BlbnNzbC0zLjAueFwiKTtNLmRlZmF1bHQuam9pbihfX2Rpcm5hbWUsXCIuLi9saWJxdWVyeV9lbmdpbmUtZGFyd2luLmR5bGliLm5vZGVcIik7TS5kZWZhdWx0LmpvaW4oX19kaXJuYW1lLFwiLi4vbGlicXVlcnlfZW5naW5lLWRhcndpbi1hcm02NC5keWxpYi5ub2RlXCIpO00uZGVmYXVsdC5qb2luKF9fZGlybmFtZSxcIi4uL2xpYnF1ZXJ5X2VuZ2luZS1kZWJpYW4tb3BlbnNzbC0xLjAueC5zby5ub2RlXCIpO00uZGVmYXVsdC5qb2luKF9fZGlybmFtZSxcIi4uL2xpYnF1ZXJ5X2VuZ2luZS1kZWJpYW4tb3BlbnNzbC0xLjEueC5zby5ub2RlXCIpO00uZGVmYXVsdC5qb2luKF9fZGlybmFtZSxcIi4uL2xpYnF1ZXJ5X2VuZ2luZS1kZWJpYW4tb3BlbnNzbC0zLjAueC5zby5ub2RlXCIpO00uZGVmYXVsdC5qb2luKF9fZGlybmFtZSxcIi4uL2xpYnF1ZXJ5X2VuZ2luZS1saW51eC1hcm02NC1vcGVuc3NsLTEuMC54LnNvLm5vZGVcIik7TS5kZWZhdWx0LmpvaW4oX19kaXJuYW1lLFwiLi4vbGlicXVlcnlfZW5naW5lLWxpbnV4LWFybTY0LW9wZW5zc2wtMS4xLnguc28ubm9kZVwiKTtNLmRlZmF1bHQuam9pbihfX2Rpcm5hbWUsXCIuLi9saWJxdWVyeV9lbmdpbmUtbGludXgtYXJtNjQtb3BlbnNzbC0zLjAueC5zby5ub2RlXCIpO00uZGVmYXVsdC5qb2luKF9fZGlybmFtZSxcIi4uL2xpYnF1ZXJ5X2VuZ2luZS1saW51eC1tdXNsLnNvLm5vZGVcIik7TS5kZWZhdWx0LmpvaW4oX19kaXJuYW1lLFwiLi4vbGlicXVlcnlfZW5naW5lLWxpbnV4LW11c2wtb3BlbnNzbC0zLjAueC5zby5ub2RlXCIpO00uZGVmYXVsdC5qb2luKF9fZGlybmFtZSxcIi4uL2xpYnF1ZXJ5X2VuZ2luZS1yaGVsLW9wZW5zc2wtMS4wLnguc28ubm9kZVwiKTtNLmRlZmF1bHQuam9pbihfX2Rpcm5hbWUsXCIuLi9saWJxdWVyeV9lbmdpbmUtcmhlbC1vcGVuc3NsLTEuMS54LnNvLm5vZGVcIik7TS5kZWZhdWx0LmpvaW4oX19kaXJuYW1lLFwiLi4vbGlicXVlcnlfZW5naW5lLXJoZWwtb3BlbnNzbC0zLjAueC5zby5ub2RlXCIpO00uZGVmYXVsdC5qb2luKF9fZGlybmFtZSxcIi4uL3F1ZXJ5X2VuZ2luZS13aW5kb3dzLmRsbC5ub2RlXCIpO3ZhciBSaT1DKHJlcXVpcmUoXCJub2RlOmZzXCIpKSxocz1ncihcImNobW9kUGx1c1hcIik7ZnVuY3Rpb24gQWkoZSl7aWYocHJvY2Vzcy5wbGF0Zm9ybT09PVwid2luMzJcIilyZXR1cm47bGV0IHI9UmkuZGVmYXVsdC5zdGF0U3luYyhlKSx0PXIubW9kZXw2NHw4fDE7aWYoci5tb2RlPT09dCl7aHMoYEV4ZWN1dGlvbiBwZXJtaXNzaW9ucyBvZiAke2V9IGFyZSBmaW5lYCk7cmV0dXJufWxldCBuPXQudG9TdHJpbmcoOCkuc2xpY2UoLTMpO2hzKGBIYXZlIHRvIGNhbGwgY2htb2RQbHVzWCBvbiAke2V9YCksUmkuZGVmYXVsdC5jaG1vZFN5bmMoZSxuKX1mdW5jdGlvbiBDaShlKXtsZXQgcj1lLmUsdD1hPT5gUHJpc21hIGNhbm5vdCBmaW5kIHRoZSByZXF1aXJlZCBcXGAke2F9XFxgIHN5c3RlbSBsaWJyYXJ5IGluIHlvdXIgc3lzdGVtYCxuPXIubWVzc2FnZS5pbmNsdWRlcyhcImNhbm5vdCBvcGVuIHNoYXJlZCBvYmplY3QgZmlsZVwiKSxpPWBQbGVhc2UgcmVmZXIgdG8gdGhlIGRvY3VtZW50YXRpb24gYWJvdXQgUHJpc21hJ3Mgc3lzdGVtIHJlcXVpcmVtZW50czogJHt4aShcImh0dHBzOi8vcHJpcy5seS9kL3N5c3RlbS1yZXF1aXJlbWVudHNcIil9YCxvPWBVbmFibGUgdG8gcmVxdWlyZShcXGAke0llKGUuaWQpfVxcYCkuYCxzPWhyKHttZXNzYWdlOnIubWVzc2FnZSxjb2RlOnIuY29kZX0pLndpdGgoe2NvZGU6XCJFTk9FTlRcIn0sKCk9PlwiRmlsZSBkb2VzIG5vdCBleGlzdC5cIikud2hlbigoe21lc3NhZ2U6YX0pPT5uJiZhLmluY2x1ZGVzKFwibGlielwiKSwoKT0+YCR7dChcImxpYnpcIil9LiBQbGVhc2UgaW5zdGFsbCBpdCBhbmQgdHJ5IGFnYWluLmApLndoZW4oKHttZXNzYWdlOmF9KT0+biYmYS5pbmNsdWRlcyhcImxpYmdjY19zXCIpLCgpPT5gJHt0KFwibGliZ2NjX3NcIil9LiBQbGVhc2UgaW5zdGFsbCBpdCBhbmQgdHJ5IGFnYWluLmApLndoZW4oKHttZXNzYWdlOmF9KT0+biYmYS5pbmNsdWRlcyhcImxpYnNzbFwiKSwoKT0+e2xldCBhPWUucGxhdGZvcm1JbmZvLmxpYnNzbD9gb3BlbnNzbC0ke2UucGxhdGZvcm1JbmZvLmxpYnNzbH1gOlwib3BlbnNzbFwiO3JldHVybmAke3QoXCJsaWJzc2xcIil9LiBQbGVhc2UgaW5zdGFsbCAke2F9IGFuZCB0cnkgYWdhaW4uYH0pLndoZW4oKHttZXNzYWdlOmF9KT0+YS5pbmNsdWRlcyhcIkdMSUJDXCIpLCgpPT5gUHJpc21hIGhhcyBkZXRlY3RlZCBhbiBpbmNvbXBhdGlibGUgdmVyc2lvbiBvZiB0aGUgXFxgZ2xpYmNcXGAgQyBzdGFuZGFyZCBsaWJyYXJ5IGluc3RhbGxlZCBpbiB5b3VyIHN5c3RlbS4gVGhpcyBwcm9iYWJseSBtZWFucyB5b3VyIHN5c3RlbSBtYXkgYmUgdG9vIG9sZCB0byBydW4gUHJpc21hLiAke2l9YCkud2hlbigoe21lc3NhZ2U6YX0pPT5lLnBsYXRmb3JtSW5mby5wbGF0Zm9ybT09PVwibGludXhcIiYmYS5pbmNsdWRlcyhcInN5bWJvbCBub3QgZm91bmRcIiksKCk9PmBUaGUgUHJpc21hIGVuZ2luZXMgYXJlIG5vdCBjb21wYXRpYmxlIHdpdGggeW91ciBzeXN0ZW0gJHtlLnBsYXRmb3JtSW5mby5vcmlnaW5hbERpc3Ryb30gb24gKCR7ZS5wbGF0Zm9ybUluZm8uYXJjaEZyb21VbmFtZX0pIHdoaWNoIHVzZXMgdGhlIFxcYCR7ZS5wbGF0Zm9ybUluZm8uYmluYXJ5VGFyZ2V0fVxcYCBiaW5hcnlUYXJnZXQgYnkgZGVmYXVsdC4gJHtpfWApLm90aGVyd2lzZSgoKT0+YFRoZSBQcmlzbWEgZW5naW5lcyBkbyBub3Qgc2VlbSB0byBiZSBjb21wYXRpYmxlIHdpdGggeW91ciBzeXN0ZW0uICR7aX1gKTtyZXR1cm5gJHtvfVxuJHtzfVxuXG5EZXRhaWxzOiAke3IubWVzc2FnZX1gfXZhciBFcz1DKGJzKCksMSk7ZnVuY3Rpb24gSWkoZSl7bGV0IHI9KDAsRXMuZGVmYXVsdCkoZSk7aWYocj09PTApcmV0dXJuIGU7bGV0IHQ9bmV3IFJlZ0V4cChgXlsgXFxcXHRdeyR7cn19YCxcImdtXCIpO3JldHVybiBlLnJlcGxhY2UodCxcIlwiKX12YXIgd3M9XCJwcmlzbWErcG9zdGdyZXNcIixzbj1gJHt3c306YDtmdW5jdGlvbiBhbihlKXtyZXR1cm4gZT8udG9TdHJpbmcoKS5zdGFydHNXaXRoKGAke3NufS8vYCk/PyExfWZ1bmN0aW9uIGtpKGUpe2lmKCFhbihlKSlyZXR1cm4hMTtsZXR7aG9zdDpyfT1uZXcgVVJMKGUpO3JldHVybiByLmluY2x1ZGVzKFwibG9jYWxob3N0XCIpfHxyLmluY2x1ZGVzKFwiMTI3LjAuMC4xXCIpfHxyLmluY2x1ZGVzKFwiWzo6MV1cIil9dmFyIHZzPUMoRGkoKSk7ZnVuY3Rpb24gX2koZSl7cmV0dXJuIFN0cmluZyhuZXcgT2koZSkpfXZhciBPaT1jbGFzc3tjb25zdHJ1Y3RvcihyKXt0aGlzLmNvbmZpZz1yfXRvU3RyaW5nKCl7bGV0e2NvbmZpZzpyfT10aGlzLHQ9ci5wcm92aWRlci5mcm9tRW52VmFyP2BlbnYoXCIke3IucHJvdmlkZXIuZnJvbUVudlZhcn1cIilgOnIucHJvdmlkZXIudmFsdWUsbj1KU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHtwcm92aWRlcjp0LGJpbmFyeVRhcmdldHM6WmMoci5iaW5hcnlUYXJnZXRzKX0pKTtyZXR1cm5gZ2VuZXJhdG9yICR7ci5uYW1lfSB7XG4keygwLHZzLmRlZmF1bHQpKFhjKG4pLDIpfVxufWB9fTtmdW5jdGlvbiBaYyhlKXtsZXQgcjtpZihlLmxlbmd0aD4wKXtsZXQgdD1lLmZpbmQobj0+bi5mcm9tRW52VmFyIT09bnVsbCk7dD9yPWBlbnYoXCIke3QuZnJvbUVudlZhcn1cIilgOnI9ZS5tYXAobj0+bi5uYXRpdmU/XCJuYXRpdmVcIjpuLnZhbHVlKX1lbHNlIHI9dm9pZCAwO3JldHVybiByfWZ1bmN0aW9uIFhjKGUpe2xldCByPU9iamVjdC5rZXlzKGUpLnJlZHVjZSgodCxuKT0+TWF0aC5tYXgodCxuLmxlbmd0aCksMCk7cmV0dXJuIE9iamVjdC5lbnRyaWVzKGUpLm1hcCgoW3Qsbl0pPT5gJHt0LnBhZEVuZChyKX0gPSAke2VwKG4pfWApLmpvaW4oYFxuYCl9ZnVuY3Rpb24gZXAoZSl7cmV0dXJuIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoZSwocix0KT0+QXJyYXkuaXNBcnJheSh0KT9gWyR7dC5tYXAobj0+SlNPTi5zdHJpbmdpZnkobikpLmpvaW4oXCIsIFwiKX1dYDpKU09OLnN0cmluZ2lmeSh0KSkpfXZhciBudD17fTt0cihudCx7ZXJyb3I6KCk9Pm5wLGluZm86KCk9PnRwLGxvZzooKT0+cnAscXVlcnk6KCk9PmlwLHNob3VsZDooKT0+UHMsdGFnczooKT0+dHQsd2FybjooKT0+Tml9KTt2YXIgdHQ9e2Vycm9yOmNlKFwicHJpc21hOmVycm9yXCIpLHdhcm46a2UoXCJwcmlzbWE6d2FyblwiKSxpbmZvOkRlKFwicHJpc21hOmluZm9cIikscXVlcnk6bnIoXCJwcmlzbWE6cXVlcnlcIil9LFBzPXt3YXJuOigpPT4hcHJvY2Vzcy5lbnYuUFJJU01BX0RJU0FCTEVfV0FSTklOR1N9O2Z1bmN0aW9uIHJwKC4uLmUpe2NvbnNvbGUubG9nKC4uLmUpfWZ1bmN0aW9uIE5pKGUsLi4ucil7UHMud2FybigpJiZjb25zb2xlLndhcm4oYCR7dHQud2Fybn0gJHtlfWAsLi4ucil9ZnVuY3Rpb24gdHAoZSwuLi5yKXtjb25zb2xlLmluZm8oYCR7dHQuaW5mb30gJHtlfWAsLi4ucil9ZnVuY3Rpb24gbnAoZSwuLi5yKXtjb25zb2xlLmVycm9yKGAke3R0LmVycm9yfSAke2V9YCwuLi5yKX1mdW5jdGlvbiBpcChlLC4uLnIpe2NvbnNvbGUubG9nKGAke3R0LnF1ZXJ5fSAke2V9YCwuLi5yKX1mdW5jdGlvbiBsbihlLHIpe2lmKCFlKXRocm93IG5ldyBFcnJvcihgJHtyfS4gVGhpcyBzaG91bGQgbmV2ZXIgaGFwcGVuLiBJZiB5b3Ugc2VlIHRoaXMgZXJyb3IsIHBsZWFzZSwgb3BlbiBhbiBpc3N1ZSBhdCBodHRwczovL3ByaXMubHkvcHJpc21hLXByaXNtYS1idWctcmVwb3J0YCl9ZnVuY3Rpb24gTmUoZSxyKXt0aHJvdyBuZXcgRXJyb3Iocil9dmFyIGl0PUMocmVxdWlyZShcIm5vZGU6cGF0aFwiKSk7ZnVuY3Rpb24gRmkoZSl7cmV0dXJuIGl0LmRlZmF1bHQuc2VwPT09aXQuZGVmYXVsdC5wb3NpeC5zZXA/ZTplLnNwbGl0KGl0LmRlZmF1bHQuc2VwKS5qb2luKGl0LmRlZmF1bHQucG9zaXguc2VwKX12YXIgamk9QyhPcygpKSx1bj1DKHJlcXVpcmUoXCJub2RlOmZzXCIpKTt2YXIgd3I9QyhyZXF1aXJlKFwibm9kZTpwYXRoXCIpKTtmdW5jdGlvbiBfcyhlKXtsZXQgcj1lLmlnbm9yZVByb2Nlc3NFbnY/e306cHJvY2Vzcy5lbnYsdD1uPT5uLm1hdGNoKC8oLj9cXCR7KD86W2EtekEtWjAtOV9dKyk/fSkvZyk/LnJlZHVjZShmdW5jdGlvbihvLHMpe2xldCBhPS8oLj8pXFwkeyhbYS16QS1aMC05X10rKT99L2cuZXhlYyhzKTtpZighYSlyZXR1cm4gbztsZXQgbD1hWzFdLHUsYztpZihsPT09XCJcXFxcXCIpYz1hWzBdLHU9Yy5yZXBsYWNlKFwiXFxcXCRcIixcIiRcIik7ZWxzZXtsZXQgcD1hWzJdO2M9YVswXS5zdWJzdHJpbmcobC5sZW5ndGgpLHU9T2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwocixwKT9yW3BdOmUucGFyc2VkW3BdfHxcIlwiLHU9dCh1KX1yZXR1cm4gby5yZXBsYWNlKGMsdSl9LG4pPz9uO2ZvcihsZXQgbiBpbiBlLnBhcnNlZCl7bGV0IGk9T2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwocixuKT9yW25dOmUucGFyc2VkW25dO2UucGFyc2VkW25dPXQoaSl9Zm9yKGxldCBuIGluIGUucGFyc2VkKXJbbl09ZS5wYXJzZWRbbl07cmV0dXJuIGV9dmFyIHFpPWdyKFwicHJpc21hOnRyeUxvYWRFbnZcIik7ZnVuY3Rpb24gc3Qoe3Jvb3RFbnZQYXRoOmUsc2NoZW1hRW52UGF0aDpyfSx0PXtjb25mbGljdENoZWNrOlwibm9uZVwifSl7bGV0IG49TnMoZSk7dC5jb25mbGljdENoZWNrIT09XCJub25lXCImJndwKG4scix0LmNvbmZsaWN0Q2hlY2spO2xldCBpPW51bGw7cmV0dXJuIExzKG4/LnBhdGgscil8fChpPU5zKHIpKSwhbiYmIWkmJnFpKFwiTm8gRW52aXJvbm1lbnQgdmFyaWFibGVzIGxvYWRlZFwiKSxpPy5kb3RlbnZSZXN1bHQuZXJyb3I/Y29uc29sZS5lcnJvcihjZShXKFwiU2NoZW1hIEVudiBFcnJvcjogXCIpKStpLmRvdGVudlJlc3VsdC5lcnJvcik6e21lc3NhZ2U6W24/Lm1lc3NhZ2UsaT8ubWVzc2FnZV0uZmlsdGVyKEJvb2xlYW4pLmpvaW4oYFxuYCkscGFyc2VkOnsuLi5uPy5kb3RlbnZSZXN1bHQ/LnBhcnNlZCwuLi5pPy5kb3RlbnZSZXN1bHQ/LnBhcnNlZH19fWZ1bmN0aW9uIHdwKGUscix0KXtsZXQgbj1lPy5kb3RlbnZSZXN1bHQucGFyc2VkLGk9IUxzKGU/LnBhdGgscik7aWYobiYmciYmaSYmdW4uZGVmYXVsdC5leGlzdHNTeW5jKHIpKXtsZXQgbz1qaS5kZWZhdWx0LnBhcnNlKHVuLmRlZmF1bHQucmVhZEZpbGVTeW5jKHIpKSxzPVtdO2ZvcihsZXQgYSBpbiBvKW5bYV09PT1vW2FdJiZzLnB1c2goYSk7aWYocy5sZW5ndGg+MCl7bGV0IGE9d3IuZGVmYXVsdC5yZWxhdGl2ZShwcm9jZXNzLmN3ZCgpLGUucGF0aCksbD13ci5kZWZhdWx0LnJlbGF0aXZlKHByb2Nlc3MuY3dkKCkscik7aWYodD09PVwiZXJyb3JcIil7bGV0IHU9YFRoZXJlIGlzIGEgY29uZmxpY3QgYmV0d2VlbiBlbnYgdmFyJHtzLmxlbmd0aD4xP1wic1wiOlwiXCJ9IGluICR7WShhKX0gYW5kICR7WShsKX1cbkNvbmZsaWN0aW5nIGVudiB2YXJzOlxuJHtzLm1hcChjPT5gICAke1coYyl9YCkuam9pbihgXG5gKX1cblxuV2Ugc3VnZ2VzdCB0byBtb3ZlIHRoZSBjb250ZW50cyBvZiAke1kobCl9IHRvICR7WShhKX0gdG8gY29uc29saWRhdGUgeW91ciBlbnYgdmFycy5cbmA7dGhyb3cgbmV3IEVycm9yKHUpfWVsc2UgaWYodD09PVwid2FyblwiKXtsZXQgdT1gQ29uZmxpY3QgZm9yIGVudiB2YXIke3MubGVuZ3RoPjE/XCJzXCI6XCJcIn0gJHtzLm1hcChjPT5XKGMpKS5qb2luKFwiLCBcIil9IGluICR7WShhKX0gYW5kICR7WShsKX1cbkVudiB2YXJzIGZyb20gJHtZKGwpfSBvdmVyd3JpdGUgdGhlIG9uZXMgZnJvbSAke1koYSl9XG4gICAgICBgO2NvbnNvbGUud2FybihgJHtrZShcIndhcm4ocHJpc21hKVwiKX0gJHt1fWApfX19fWZ1bmN0aW9uIE5zKGUpe2lmKHhwKGUpKXtxaShgRW52aXJvbm1lbnQgdmFyaWFibGVzIGxvYWRlZCBmcm9tICR7ZX1gKTtsZXQgcj1qaS5kZWZhdWx0LmNvbmZpZyh7cGF0aDplLGRlYnVnOnByb2Nlc3MuZW52LkRPVEVOVl9DT05GSUdfREVCVUc/ITA6dm9pZCAwfSk7cmV0dXJue2RvdGVudlJlc3VsdDpfcyhyKSxtZXNzYWdlOkllKGBFbnZpcm9ubWVudCB2YXJpYWJsZXMgbG9hZGVkIGZyb20gJHt3ci5kZWZhdWx0LnJlbGF0aXZlKHByb2Nlc3MuY3dkKCksZSl9YCkscGF0aDplfX1lbHNlIHFpKGBFbnZpcm9ubWVudCB2YXJpYWJsZXMgbm90IGZvdW5kIGF0ICR7ZX1gKTtyZXR1cm4gbnVsbH1mdW5jdGlvbiBMcyhlLHIpe3JldHVybiBlJiZyJiZ3ci5kZWZhdWx0LnJlc29sdmUoZSk9PT13ci5kZWZhdWx0LnJlc29sdmUocil9ZnVuY3Rpb24geHAoZSl7cmV0dXJuISEoZSYmdW4uZGVmYXVsdC5leGlzdHNTeW5jKGUpKX1mdW5jdGlvbiBWaShlLHIpe3JldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSxyKX1mdW5jdGlvbiB4cihlLHIpe2xldCB0PXt9O2ZvcihsZXQgbiBvZiBPYmplY3Qua2V5cyhlKSl0W25dPXIoZVtuXSxuKTtyZXR1cm4gdH1mdW5jdGlvbiBCaShlLHIpe2lmKGUubGVuZ3RoPT09MClyZXR1cm47bGV0IHQ9ZVswXTtmb3IobGV0IG49MTtuPGUubGVuZ3RoO24rKylyKHQsZVtuXSk8MCYmKHQ9ZVtuXSk7cmV0dXJuIHR9ZnVuY3Rpb24geChlLHIpe09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwibmFtZVwiLHt2YWx1ZTpyLGNvbmZpZ3VyYWJsZTohMH0pfXZhciBNcz1uZXcgU2V0LGF0PShlLHIsLi4udCk9PntNcy5oYXMoZSl8fChNcy5hZGQoZSksTmkociwuLi50KSl9O3ZhciBUPWNsYXNzIGUgZXh0ZW5kcyBFcnJvcntjbGllbnRWZXJzaW9uO2Vycm9yQ29kZTtyZXRyeWFibGU7Y29uc3RydWN0b3Iocix0LG4pe3N1cGVyKHIpLHRoaXMubmFtZT1cIlByaXNtYUNsaWVudEluaXRpYWxpemF0aW9uRXJyb3JcIix0aGlzLmNsaWVudFZlcnNpb249dCx0aGlzLmVycm9yQ29kZT1uLEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKGUpfWdldFtTeW1ib2wudG9TdHJpbmdUYWddKCl7cmV0dXJuXCJQcmlzbWFDbGllbnRJbml0aWFsaXphdGlvbkVycm9yXCJ9fTt4KFQsXCJQcmlzbWFDbGllbnRJbml0aWFsaXphdGlvbkVycm9yXCIpO3ZhciB6PWNsYXNzIGV4dGVuZHMgRXJyb3J7Y29kZTttZXRhO2NsaWVudFZlcnNpb247YmF0Y2hSZXF1ZXN0SWR4O2NvbnN0cnVjdG9yKHIse2NvZGU6dCxjbGllbnRWZXJzaW9uOm4sbWV0YTppLGJhdGNoUmVxdWVzdElkeDpvfSl7c3VwZXIociksdGhpcy5uYW1lPVwiUHJpc21hQ2xpZW50S25vd25SZXF1ZXN0RXJyb3JcIix0aGlzLmNvZGU9dCx0aGlzLmNsaWVudFZlcnNpb249bix0aGlzLm1ldGE9aSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcImJhdGNoUmVxdWVzdElkeFwiLHt2YWx1ZTpvLGVudW1lcmFibGU6ITEsd3JpdGFibGU6ITB9KX1nZXRbU3ltYm9sLnRvU3RyaW5nVGFnXSgpe3JldHVyblwiUHJpc21hQ2xpZW50S25vd25SZXF1ZXN0RXJyb3JcIn19O3goeixcIlByaXNtYUNsaWVudEtub3duUmVxdWVzdEVycm9yXCIpO3ZhciBsZT1jbGFzcyBleHRlbmRzIEVycm9ye2NsaWVudFZlcnNpb247Y29uc3RydWN0b3Iocix0KXtzdXBlcihyKSx0aGlzLm5hbWU9XCJQcmlzbWFDbGllbnRSdXN0UGFuaWNFcnJvclwiLHRoaXMuY2xpZW50VmVyc2lvbj10fWdldFtTeW1ib2wudG9TdHJpbmdUYWddKCl7cmV0dXJuXCJQcmlzbWFDbGllbnRSdXN0UGFuaWNFcnJvclwifX07eChsZSxcIlByaXNtYUNsaWVudFJ1c3RQYW5pY0Vycm9yXCIpO3ZhciBqPWNsYXNzIGV4dGVuZHMgRXJyb3J7Y2xpZW50VmVyc2lvbjtiYXRjaFJlcXVlc3RJZHg7Y29uc3RydWN0b3Iocix7Y2xpZW50VmVyc2lvbjp0LGJhdGNoUmVxdWVzdElkeDpufSl7c3VwZXIociksdGhpcy5uYW1lPVwiUHJpc21hQ2xpZW50VW5rbm93blJlcXVlc3RFcnJvclwiLHRoaXMuY2xpZW50VmVyc2lvbj10LE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwiYmF0Y2hSZXF1ZXN0SWR4XCIse3ZhbHVlOm4sd3JpdGFibGU6ITAsZW51bWVyYWJsZTohMX0pfWdldFtTeW1ib2wudG9TdHJpbmdUYWddKCl7cmV0dXJuXCJQcmlzbWFDbGllbnRVbmtub3duUmVxdWVzdEVycm9yXCJ9fTt4KGosXCJQcmlzbWFDbGllbnRVbmtub3duUmVxdWVzdEVycm9yXCIpO3ZhciBaPWNsYXNzIGV4dGVuZHMgRXJyb3J7bmFtZT1cIlByaXNtYUNsaWVudFZhbGlkYXRpb25FcnJvclwiO2NsaWVudFZlcnNpb247Y29uc3RydWN0b3Iocix7Y2xpZW50VmVyc2lvbjp0fSl7c3VwZXIociksdGhpcy5jbGllbnRWZXJzaW9uPXR9Z2V0W1N5bWJvbC50b1N0cmluZ1RhZ10oKXtyZXR1cm5cIlByaXNtYUNsaWVudFZhbGlkYXRpb25FcnJvclwifX07eChaLFwiUHJpc21hQ2xpZW50VmFsaWRhdGlvbkVycm9yXCIpO3ZhciB2cj05ZTE1LEtlPTFlOSxVaT1cIjAxMjM0NTY3ODlhYmNkZWZcIixmbj1cIjIuMzAyNTg1MDkyOTk0MDQ1Njg0MDE3OTkxNDU0Njg0MzY0MjA3NjAxMTAxNDg4NjI4NzcyOTc2MDMzMzI3OTAwOTY3NTcyNjA5Njc3MzUyNDgwMjM1OTk3MjA1MDg5NTk4Mjk4MzQxOTY3Nzg0MDQyMjg2MjQ4NjMzNDA5NTI1NDY1MDgyODA2NzU2NjY2Mjg3MzY5MDk4NzgxNjg5NDgyOTA3MjA4MzI1NTU0NjgwODQzNzk5ODk0ODI2MjMzMTk4NTI4MzkzNTA1MzA4OTY1Mzc3NzMyNjI4ODQ2MTYzMzY2MjIyMjg3Njk4MjE5ODg2NzQ2NTQzNjY3NDc0NDA0MjQzMjc0MzY1MTU1MDQ4OTM0MzE0OTM5MzkxNDc5NjE5NDA0NDAwMjIyMTA1MTAxNzE0MTc0ODAwMzY4ODA4NDAxMjY0NzA4MDY4NTU2Nzc0MzIxNjIyODM1NTIyMDExNDgwNDY2MzcxNTY1OTEyMTM3MzQ1MDc0Nzg1Njk0NzY4MzQ2MzYxNjc5MjEwMTgwNjQ0NTA3MDY0ODAwMDI3NzUwMjY4NDkxNjc0NjU1MDU4Njg1NjkzNTY3MzQyMDY3MDU4MTEzNjQyOTIyNDU1NDQwNTc1ODkyNTcyNDIwODI0MTMxNDY5NTY4OTAxNjc1ODk0MDI1Njc3NjMxMTM1NjkxOTI5MjAzMzM3NjU4NzE0MTY2MDIzMDEwNTcwMzA4OTYzNDU3MjA3NTQ0MDM3MDg0NzQ2OTk0MDE2ODI2OTI4MjgwODQ4MTE4NDI4OTMxNDg0ODUyNDk0ODY0NDg3MTkyNzgwOTY3NjI3MTI3NTc3NTM5NzAyNzY2ODYwNTk1MjQ5NjcxNjY3NDE4MzQ4NTcwNDQyMjUwNzE5Nzk2NTAwNDcxNDk1MTA1MDQ5MjIxNDc3NjU2NzYzNjkzODY2Mjk3Njk3OTUyMjExMDcxODI2NDU0OTczNDc3MjY2MjQyNTcwOTQyOTMyMjU4Mjc5ODUwMjU4NTUwOTc4NTI2NTM4MzIwNzYwNjcyNjMxNzE2NDMwOTUwNTk5NTA4NzgwNzUyMzcxMDMzMzEwMTE5Nzg1NzU0NzMzMTU0MTQyMTgwODQyNzU0Mzg2MzU5MTc3ODExNzA1NDMwOTgyNzQ4MjM4NTA0NTY0ODAxOTA5NTYxMDI5OTI5MTgyNDMxODIzNzUyNTM1NzcwOTc1MDUzOTU2NTE4NzY5NzUxMDM3NDk3MDg4ODY5MjE4MDIwNTE4OTMzOTUwNzIzODUzOTIwNTE0NDYzNDE5NzI2NTI4NzI4Njk2NTExMDg2MjU3MTQ5MjE5ODg0OTk3ODc0ODg3Mzc3MTM0NTY4NjIwOTE2NzA1OFwiLGduPVwiMy4xNDE1OTI2NTM1ODk3OTMyMzg0NjI2NDMzODMyNzk1MDI4ODQxOTcxNjkzOTkzNzUxMDU4MjA5NzQ5NDQ1OTIzMDc4MTY0MDYyODYyMDg5OTg2MjgwMzQ4MjUzNDIxMTcwNjc5ODIxNDgwODY1MTMyODIzMDY2NDcwOTM4NDQ2MDk1NTA1ODIyMzE3MjUzNTk0MDgxMjg0ODExMTc0NTAyODQxMDI3MDE5Mzg1MjExMDU1NTk2NDQ2MjI5NDg5NTQ5MzAzODE5NjQ0Mjg4MTA5NzU2NjU5MzM0NDYxMjg0NzU2NDgyMzM3ODY3ODMxNjUyNzEyMDE5MDkxNDU2NDg1NjY5MjM0NjAzNDg2MTA0NTQzMjY2NDgyMTMzOTM2MDcyNjAyNDkxNDEyNzM3MjQ1ODcwMDY2MDYzMTU1ODgxNzQ4ODE1MjA5MjA5NjI4MjkyNTQwOTE3MTUzNjQzNjc4OTI1OTAzNjAwMTEzMzA1MzA1NDg4MjA0NjY1MjEzODQxNDY5NTE5NDE1MTE2MDk0MzMwNTcyNzAzNjU3NTk1OTE5NTMwOTIxODYxMTczODE5MzI2MTE3OTMxMDUxMTg1NDgwNzQ0NjIzNzk5NjI3NDk1NjczNTE4ODU3NTI3MjQ4OTEyMjc5MzgxODMwMTE5NDkxMjk4MzM2NzMzNjI0NDA2NTY2NDMwODYwMjEzOTQ5NDYzOTUyMjQ3MzcxOTA3MDIxNzk4NjA5NDM3MDI3NzA1MzkyMTcxNzYyOTMxNzY3NTIzODQ2NzQ4MTg0Njc2Njk0MDUxMzIwMDA1NjgxMjcxNDUyNjM1NjA4Mjc3ODU3NzEzNDI3NTc3ODk2MDkxNzM2MzcxNzg3MjE0Njg0NDA5MDEyMjQ5NTM0MzAxNDY1NDk1ODUzNzEwNTA3OTIyNzk2ODkyNTg5MjM1NDIwMTk5NTYxMTIxMjkwMjE5NjA4NjQwMzQ0MTgxNTk4MTM2Mjk3NzQ3NzEzMDk5NjA1MTg3MDcyMTEzNDk5OTk5OTgzNzI5NzgwNDk5NTEwNTk3MzE3MzI4MTYwOTYzMTg1OTUwMjQ0NTk0NTUzNDY5MDgzMDI2NDI1MjIzMDgyNTMzNDQ2ODUwMzUyNjE5MzExODgxNzEwMTAwMDMxMzc4Mzg3NTI4ODY1ODc1MzMyMDgzODE0MjA2MTcxNzc2NjkxNDczMDM1OTgyNTM0OTA0Mjg3NTU0Njg3MzExNTk1NjI4NjM4ODIzNTM3ODc1OTM3NTE5NTc3ODE4NTc3ODA1MzIxNzEyMjY4MDY2MTMwMDE5Mjc4NzY2MTExOTU5MDkyMTY0MjAxOTg5MzgwOTUyNTcyMDEwNjU0ODU4NjMyNzg5XCIsR2k9e3ByZWNpc2lvbjoyMCxyb3VuZGluZzo0LG1vZHVsbzoxLHRvRXhwTmVnOi03LHRvRXhwUG9zOjIxLG1pbkU6LXZyLG1heEU6dnIsY3J5cHRvOiExfSxWcyxGZSx3PSEwLHluPVwiW0RlY2ltYWxFcnJvcl0gXCIsSGU9eW4rXCJJbnZhbGlkIGFyZ3VtZW50OiBcIixCcz15bitcIlByZWNpc2lvbiBsaW1pdCBleGNlZWRlZFwiLFVzPXluK1wiY3J5cHRvIHVuYXZhaWxhYmxlXCIsR3M9XCJbb2JqZWN0IERlY2ltYWxdXCIsWD1NYXRoLmZsb29yLFU9TWF0aC5wb3csdnA9L14wYihbMDFdKyhcXC5bMDFdKik/fFxcLlswMV0rKShwWystXT9cXGQrKT8kL2ksUHA9L14weChbMC05YS1mXSsoXFwuWzAtOWEtZl0qKT98XFwuWzAtOWEtZl0rKShwWystXT9cXGQrKT8kL2ksVHA9L14wbyhbMC03XSsoXFwuWzAtN10qKT98XFwuWzAtN10rKShwWystXT9cXGQrKT8kL2ksUXM9L14oXFxkKyhcXC5cXGQqKT98XFwuXFxkKykoZVsrLV0/XFxkKyk/JC9pLGZlPTFlNyxFPTcsU3A9OTAwNzE5OTI1NDc0MDk5MSxScD1mbi5sZW5ndGgtMSxRaT1nbi5sZW5ndGgtMSxtPXt0b1N0cmluZ1RhZzpHc307bS5hYnNvbHV0ZVZhbHVlPW0uYWJzPWZ1bmN0aW9uKCl7dmFyIGU9bmV3IHRoaXMuY29uc3RydWN0b3IodGhpcyk7cmV0dXJuIGUuczwwJiYoZS5zPTEpLHkoZSl9O20uY2VpbD1mdW5jdGlvbigpe3JldHVybiB5KG5ldyB0aGlzLmNvbnN0cnVjdG9yKHRoaXMpLHRoaXMuZSsxLDIpfTttLmNsYW1wZWRUbz1tLmNsYW1wPWZ1bmN0aW9uKGUscil7dmFyIHQsbj10aGlzLGk9bi5jb25zdHJ1Y3RvcjtpZihlPW5ldyBpKGUpLHI9bmV3IGkociksIWUuc3x8IXIucylyZXR1cm4gbmV3IGkoTmFOKTtpZihlLmd0KHIpKXRocm93IEVycm9yKEhlK3IpO3JldHVybiB0PW4uY21wKGUpLHQ8MD9lOm4uY21wKHIpPjA/cjpuZXcgaShuKX07bS5jb21wYXJlZFRvPW0uY21wPWZ1bmN0aW9uKGUpe3ZhciByLHQsbixpLG89dGhpcyxzPW8uZCxhPShlPW5ldyBvLmNvbnN0cnVjdG9yKGUpKS5kLGw9by5zLHU9ZS5zO2lmKCFzfHwhYSlyZXR1cm4hbHx8IXU/TmFOOmwhPT11P2w6cz09PWE/MDohc15sPDA/MTotMTtpZighc1swXXx8IWFbMF0pcmV0dXJuIHNbMF0/bDphWzBdPy11OjA7aWYobCE9PXUpcmV0dXJuIGw7aWYoby5lIT09ZS5lKXJldHVybiBvLmU+ZS5lXmw8MD8xOi0xO2ZvcihuPXMubGVuZ3RoLGk9YS5sZW5ndGgscj0wLHQ9bjxpP246aTtyPHQ7KytyKWlmKHNbcl0hPT1hW3JdKXJldHVybiBzW3JdPmFbcl1ebDwwPzE6LTE7cmV0dXJuIG49PT1pPzA6bj5pXmw8MD8xOi0xfTttLmNvc2luZT1tLmNvcz1mdW5jdGlvbigpe3ZhciBlLHIsdD10aGlzLG49dC5jb25zdHJ1Y3RvcjtyZXR1cm4gdC5kP3QuZFswXT8oZT1uLnByZWNpc2lvbixyPW4ucm91bmRpbmcsbi5wcmVjaXNpb249ZStNYXRoLm1heCh0LmUsdC5zZCgpKStFLG4ucm91bmRpbmc9MSx0PUFwKG4sWXMobix0KSksbi5wcmVjaXNpb249ZSxuLnJvdW5kaW5nPXIseShGZT09Mnx8RmU9PTM/dC5uZWcoKTp0LGUsciwhMCkpOm5ldyBuKDEpOm5ldyBuKE5hTil9O20uY3ViZVJvb3Q9bS5jYnJ0PWZ1bmN0aW9uKCl7dmFyIGUscix0LG4saSxvLHMsYSxsLHUsYz10aGlzLHA9Yy5jb25zdHJ1Y3RvcjtpZighYy5pc0Zpbml0ZSgpfHxjLmlzWmVybygpKXJldHVybiBuZXcgcChjKTtmb3Iodz0hMSxvPWMucypVKGMucypjLDEvMyksIW98fE1hdGguYWJzKG8pPT0xLzA/KHQ9SihjLmQpLGU9Yy5lLChvPShlLXQubGVuZ3RoKzEpJTMpJiYodCs9bz09MXx8bz09LTI/XCIwXCI6XCIwMFwiKSxvPVUodCwxLzMpLGU9WCgoZSsxKS8zKS0oZSUzPT0oZTwwPy0xOjIpKSxvPT0xLzA/dD1cIjVlXCIrZToodD1vLnRvRXhwb25lbnRpYWwoKSx0PXQuc2xpY2UoMCx0LmluZGV4T2YoXCJlXCIpKzEpK2UpLG49bmV3IHAodCksbi5zPWMucyk6bj1uZXcgcChvLnRvU3RyaW5nKCkpLHM9KGU9cC5wcmVjaXNpb24pKzM7OylpZihhPW4sbD1hLnRpbWVzKGEpLnRpbWVzKGEpLHU9bC5wbHVzKGMpLG49TCh1LnBsdXMoYykudGltZXMoYSksdS5wbHVzKGwpLHMrMiwxKSxKKGEuZCkuc2xpY2UoMCxzKT09PSh0PUoobi5kKSkuc2xpY2UoMCxzKSlpZih0PXQuc2xpY2Uocy0zLHMrMSksdD09XCI5OTk5XCJ8fCFpJiZ0PT1cIjQ5OTlcIil7aWYoIWkmJih5KGEsZSsxLDApLGEudGltZXMoYSkudGltZXMoYSkuZXEoYykpKXtuPWE7YnJlYWt9cys9NCxpPTF9ZWxzZXsoISt0fHwhK3Quc2xpY2UoMSkmJnQuY2hhckF0KDApPT1cIjVcIikmJih5KG4sZSsxLDEpLHI9IW4udGltZXMobikudGltZXMobikuZXEoYykpO2JyZWFrfXJldHVybiB3PSEwLHkobixlLHAucm91bmRpbmcscil9O20uZGVjaW1hbFBsYWNlcz1tLmRwPWZ1bmN0aW9uKCl7dmFyIGUscj10aGlzLmQsdD1OYU47aWYocil7aWYoZT1yLmxlbmd0aC0xLHQ9KGUtWCh0aGlzLmUvRSkpKkUsZT1yW2VdLGUpZm9yKDtlJTEwPT0wO2UvPTEwKXQtLTt0PDAmJih0PTApfXJldHVybiB0fTttLmRpdmlkZWRCeT1tLmRpdj1mdW5jdGlvbihlKXtyZXR1cm4gTCh0aGlzLG5ldyB0aGlzLmNvbnN0cnVjdG9yKGUpKX07bS5kaXZpZGVkVG9JbnRlZ2VyQnk9bS5kaXZUb0ludD1mdW5jdGlvbihlKXt2YXIgcj10aGlzLHQ9ci5jb25zdHJ1Y3RvcjtyZXR1cm4geShMKHIsbmV3IHQoZSksMCwxLDEpLHQucHJlY2lzaW9uLHQucm91bmRpbmcpfTttLmVxdWFscz1tLmVxPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmNtcChlKT09PTB9O20uZmxvb3I9ZnVuY3Rpb24oKXtyZXR1cm4geShuZXcgdGhpcy5jb25zdHJ1Y3Rvcih0aGlzKSx0aGlzLmUrMSwzKX07bS5ncmVhdGVyVGhhbj1tLmd0PWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmNtcChlKT4wfTttLmdyZWF0ZXJUaGFuT3JFcXVhbFRvPW0uZ3RlPWZ1bmN0aW9uKGUpe3ZhciByPXRoaXMuY21wKGUpO3JldHVybiByPT0xfHxyPT09MH07bS5oeXBlcmJvbGljQ29zaW5lPW0uY29zaD1mdW5jdGlvbigpe3ZhciBlLHIsdCxuLGksbz10aGlzLHM9by5jb25zdHJ1Y3RvcixhPW5ldyBzKDEpO2lmKCFvLmlzRmluaXRlKCkpcmV0dXJuIG5ldyBzKG8ucz8xLzA6TmFOKTtpZihvLmlzWmVybygpKXJldHVybiBhO3Q9cy5wcmVjaXNpb24sbj1zLnJvdW5kaW5nLHMucHJlY2lzaW9uPXQrTWF0aC5tYXgoby5lLG8uc2QoKSkrNCxzLnJvdW5kaW5nPTEsaT1vLmQubGVuZ3RoLGk8MzI/KGU9TWF0aC5jZWlsKGkvMykscj0oMS9Fbig0LGUpKS50b1N0cmluZygpKTooZT0xNixyPVwiMi4zMjgzMDY0MzY1Mzg2OTYyODkwNjI1ZS0xMFwiKSxvPVByKHMsMSxvLnRpbWVzKHIpLG5ldyBzKDEpLCEwKTtmb3IodmFyIGwsdT1lLGM9bmV3IHMoOCk7dS0tOylsPW8udGltZXMobyksbz1hLm1pbnVzKGwudGltZXMoYy5taW51cyhsLnRpbWVzKGMpKSkpO3JldHVybiB5KG8scy5wcmVjaXNpb249dCxzLnJvdW5kaW5nPW4sITApfTttLmh5cGVyYm9saWNTaW5lPW0uc2luaD1mdW5jdGlvbigpe3ZhciBlLHIsdCxuLGk9dGhpcyxvPWkuY29uc3RydWN0b3I7aWYoIWkuaXNGaW5pdGUoKXx8aS5pc1plcm8oKSlyZXR1cm4gbmV3IG8oaSk7aWYocj1vLnByZWNpc2lvbix0PW8ucm91bmRpbmcsby5wcmVjaXNpb249citNYXRoLm1heChpLmUsaS5zZCgpKSs0LG8ucm91bmRpbmc9MSxuPWkuZC5sZW5ndGgsbjwzKWk9UHIobywyLGksaSwhMCk7ZWxzZXtlPTEuNCpNYXRoLnNxcnQobiksZT1lPjE2PzE2OmV8MCxpPWkudGltZXMoMS9Fbig1LGUpKSxpPVByKG8sMixpLGksITApO2Zvcih2YXIgcyxhPW5ldyBvKDUpLGw9bmV3IG8oMTYpLHU9bmV3IG8oMjApO2UtLTspcz1pLnRpbWVzKGkpLGk9aS50aW1lcyhhLnBsdXMocy50aW1lcyhsLnRpbWVzKHMpLnBsdXModSkpKSl9cmV0dXJuIG8ucHJlY2lzaW9uPXIsby5yb3VuZGluZz10LHkoaSxyLHQsITApfTttLmh5cGVyYm9saWNUYW5nZW50PW0udGFuaD1mdW5jdGlvbigpe3ZhciBlLHIsdD10aGlzLG49dC5jb25zdHJ1Y3RvcjtyZXR1cm4gdC5pc0Zpbml0ZSgpP3QuaXNaZXJvKCk/bmV3IG4odCk6KGU9bi5wcmVjaXNpb24scj1uLnJvdW5kaW5nLG4ucHJlY2lzaW9uPWUrNyxuLnJvdW5kaW5nPTEsTCh0LnNpbmgoKSx0LmNvc2goKSxuLnByZWNpc2lvbj1lLG4ucm91bmRpbmc9cikpOm5ldyBuKHQucyl9O20uaW52ZXJzZUNvc2luZT1tLmFjb3M9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLHI9ZS5jb25zdHJ1Y3Rvcix0PWUuYWJzKCkuY21wKDEpLG49ci5wcmVjaXNpb24saT1yLnJvdW5kaW5nO3JldHVybiB0IT09LTE/dD09PTA/ZS5pc05lZygpP3dlKHIsbixpKTpuZXcgcigwKTpuZXcgcihOYU4pOmUuaXNaZXJvKCk/d2UocixuKzQsaSkudGltZXMoLjUpOihyLnByZWNpc2lvbj1uKzYsci5yb3VuZGluZz0xLGU9bmV3IHIoMSkubWludXMoZSkuZGl2KGUucGx1cygxKSkuc3FydCgpLmF0YW4oKSxyLnByZWNpc2lvbj1uLHIucm91bmRpbmc9aSxlLnRpbWVzKDIpKX07bS5pbnZlcnNlSHlwZXJib2xpY0Nvc2luZT1tLmFjb3NoPWZ1bmN0aW9uKCl7dmFyIGUscix0PXRoaXMsbj10LmNvbnN0cnVjdG9yO3JldHVybiB0Lmx0ZSgxKT9uZXcgbih0LmVxKDEpPzA6TmFOKTp0LmlzRmluaXRlKCk/KGU9bi5wcmVjaXNpb24scj1uLnJvdW5kaW5nLG4ucHJlY2lzaW9uPWUrTWF0aC5tYXgoTWF0aC5hYnModC5lKSx0LnNkKCkpKzQsbi5yb3VuZGluZz0xLHc9ITEsdD10LnRpbWVzKHQpLm1pbnVzKDEpLnNxcnQoKS5wbHVzKHQpLHc9ITAsbi5wcmVjaXNpb249ZSxuLnJvdW5kaW5nPXIsdC5sbigpKTpuZXcgbih0KX07bS5pbnZlcnNlSHlwZXJib2xpY1NpbmU9bS5hc2luaD1mdW5jdGlvbigpe3ZhciBlLHIsdD10aGlzLG49dC5jb25zdHJ1Y3RvcjtyZXR1cm4hdC5pc0Zpbml0ZSgpfHx0LmlzWmVybygpP25ldyBuKHQpOihlPW4ucHJlY2lzaW9uLHI9bi5yb3VuZGluZyxuLnByZWNpc2lvbj1lKzIqTWF0aC5tYXgoTWF0aC5hYnModC5lKSx0LnNkKCkpKzYsbi5yb3VuZGluZz0xLHc9ITEsdD10LnRpbWVzKHQpLnBsdXMoMSkuc3FydCgpLnBsdXModCksdz0hMCxuLnByZWNpc2lvbj1lLG4ucm91bmRpbmc9cix0LmxuKCkpfTttLmludmVyc2VIeXBlcmJvbGljVGFuZ2VudD1tLmF0YW5oPWZ1bmN0aW9uKCl7dmFyIGUscix0LG4saT10aGlzLG89aS5jb25zdHJ1Y3RvcjtyZXR1cm4gaS5pc0Zpbml0ZSgpP2kuZT49MD9uZXcgbyhpLmFicygpLmVxKDEpP2kucy8wOmkuaXNaZXJvKCk/aTpOYU4pOihlPW8ucHJlY2lzaW9uLHI9by5yb3VuZGluZyxuPWkuc2QoKSxNYXRoLm1heChuLGUpPDIqLWkuZS0xP3kobmV3IG8oaSksZSxyLCEwKTooby5wcmVjaXNpb249dD1uLWkuZSxpPUwoaS5wbHVzKDEpLG5ldyBvKDEpLm1pbnVzKGkpLHQrZSwxKSxvLnByZWNpc2lvbj1lKzQsby5yb3VuZGluZz0xLGk9aS5sbigpLG8ucHJlY2lzaW9uPWUsby5yb3VuZGluZz1yLGkudGltZXMoLjUpKSk6bmV3IG8oTmFOKX07bS5pbnZlcnNlU2luZT1tLmFzaW49ZnVuY3Rpb24oKXt2YXIgZSxyLHQsbixpPXRoaXMsbz1pLmNvbnN0cnVjdG9yO3JldHVybiBpLmlzWmVybygpP25ldyBvKGkpOihyPWkuYWJzKCkuY21wKDEpLHQ9by5wcmVjaXNpb24sbj1vLnJvdW5kaW5nLHIhPT0tMT9yPT09MD8oZT13ZShvLHQrNCxuKS50aW1lcyguNSksZS5zPWkucyxlKTpuZXcgbyhOYU4pOihvLnByZWNpc2lvbj10KzYsby5yb3VuZGluZz0xLGk9aS5kaXYobmV3IG8oMSkubWludXMoaS50aW1lcyhpKSkuc3FydCgpLnBsdXMoMSkpLmF0YW4oKSxvLnByZWNpc2lvbj10LG8ucm91bmRpbmc9bixpLnRpbWVzKDIpKSl9O20uaW52ZXJzZVRhbmdlbnQ9bS5hdGFuPWZ1bmN0aW9uKCl7dmFyIGUscix0LG4saSxvLHMsYSxsLHU9dGhpcyxjPXUuY29uc3RydWN0b3IscD1jLnByZWNpc2lvbixkPWMucm91bmRpbmc7aWYodS5pc0Zpbml0ZSgpKXtpZih1LmlzWmVybygpKXJldHVybiBuZXcgYyh1KTtpZih1LmFicygpLmVxKDEpJiZwKzQ8PVFpKXJldHVybiBzPXdlKGMscCs0LGQpLnRpbWVzKC4yNSkscy5zPXUucyxzfWVsc2V7aWYoIXUucylyZXR1cm4gbmV3IGMoTmFOKTtpZihwKzQ8PVFpKXJldHVybiBzPXdlKGMscCs0LGQpLnRpbWVzKC41KSxzLnM9dS5zLHN9Zm9yKGMucHJlY2lzaW9uPWE9cCsxMCxjLnJvdW5kaW5nPTEsdD1NYXRoLm1pbigyOCxhL0UrMnwwKSxlPXQ7ZTstLWUpdT11LmRpdih1LnRpbWVzKHUpLnBsdXMoMSkuc3FydCgpLnBsdXMoMSkpO2Zvcih3PSExLHI9TWF0aC5jZWlsKGEvRSksbj0xLGw9dS50aW1lcyh1KSxzPW5ldyBjKHUpLGk9dTtlIT09LTE7KWlmKGk9aS50aW1lcyhsKSxvPXMubWludXMoaS5kaXYobis9MikpLGk9aS50aW1lcyhsKSxzPW8ucGx1cyhpLmRpdihuKz0yKSkscy5kW3JdIT09dm9pZCAwKWZvcihlPXI7cy5kW2VdPT09by5kW2VdJiZlLS07KTtyZXR1cm4gdCYmKHM9cy50aW1lcygyPDx0LTEpKSx3PSEwLHkocyxjLnByZWNpc2lvbj1wLGMucm91bmRpbmc9ZCwhMCl9O20uaXNGaW5pdGU9ZnVuY3Rpb24oKXtyZXR1cm4hIXRoaXMuZH07bS5pc0ludGVnZXI9bS5pc0ludD1mdW5jdGlvbigpe3JldHVybiEhdGhpcy5kJiZYKHRoaXMuZS9FKT50aGlzLmQubGVuZ3RoLTJ9O20uaXNOYU49ZnVuY3Rpb24oKXtyZXR1cm4hdGhpcy5zfTttLmlzTmVnYXRpdmU9bS5pc05lZz1mdW5jdGlvbigpe3JldHVybiB0aGlzLnM8MH07bS5pc1Bvc2l0aXZlPW0uaXNQb3M9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zPjB9O20uaXNaZXJvPWZ1bmN0aW9uKCl7cmV0dXJuISF0aGlzLmQmJnRoaXMuZFswXT09PTB9O20ubGVzc1RoYW49bS5sdD1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5jbXAoZSk8MH07bS5sZXNzVGhhbk9yRXF1YWxUbz1tLmx0ZT1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5jbXAoZSk8MX07bS5sb2dhcml0aG09bS5sb2c9ZnVuY3Rpb24oZSl7dmFyIHIsdCxuLGksbyxzLGEsbCx1PXRoaXMsYz11LmNvbnN0cnVjdG9yLHA9Yy5wcmVjaXNpb24sZD1jLnJvdW5kaW5nLGY9NTtpZihlPT1udWxsKWU9bmV3IGMoMTApLHI9ITA7ZWxzZXtpZihlPW5ldyBjKGUpLHQ9ZS5kLGUuczwwfHwhdHx8IXRbMF18fGUuZXEoMSkpcmV0dXJuIG5ldyBjKE5hTik7cj1lLmVxKDEwKX1pZih0PXUuZCx1LnM8MHx8IXR8fCF0WzBdfHx1LmVxKDEpKXJldHVybiBuZXcgYyh0JiYhdFswXT8tMS8wOnUucyE9MT9OYU46dD8wOjEvMCk7aWYocilpZih0Lmxlbmd0aD4xKW89ITA7ZWxzZXtmb3IoaT10WzBdO2klMTA9PT0wOylpLz0xMDtvPWkhPT0xfWlmKHc9ITEsYT1wK2Yscz1KZSh1LGEpLG49cj9obihjLGErMTApOkplKGUsYSksbD1MKHMsbixhLDEpLGx0KGwuZCxpPXAsZCkpZG8gaWYoYSs9MTAscz1KZSh1LGEpLG49cj9obihjLGErMTApOkplKGUsYSksbD1MKHMsbixhLDEpLCFvKXsrSihsLmQpLnNsaWNlKGkrMSxpKzE1KSsxPT0xZTE0JiYobD15KGwscCsxLDApKTticmVha313aGlsZShsdChsLmQsaSs9MTAsZCkpO3JldHVybiB3PSEwLHkobCxwLGQpfTttLm1pbnVzPW0uc3ViPWZ1bmN0aW9uKGUpe3ZhciByLHQsbixpLG8scyxhLGwsdSxjLHAsZCxmPXRoaXMsaD1mLmNvbnN0cnVjdG9yO2lmKGU9bmV3IGgoZSksIWYuZHx8IWUuZClyZXR1cm4hZi5zfHwhZS5zP2U9bmV3IGgoTmFOKTpmLmQ/ZS5zPS1lLnM6ZT1uZXcgaChlLmR8fGYucyE9PWUucz9mOk5hTiksZTtpZihmLnMhPWUucylyZXR1cm4gZS5zPS1lLnMsZi5wbHVzKGUpO2lmKHU9Zi5kLGQ9ZS5kLGE9aC5wcmVjaXNpb24sbD1oLnJvdW5kaW5nLCF1WzBdfHwhZFswXSl7aWYoZFswXSllLnM9LWUucztlbHNlIGlmKHVbMF0pZT1uZXcgaChmKTtlbHNlIHJldHVybiBuZXcgaChsPT09Mz8tMDowKTtyZXR1cm4gdz95KGUsYSxsKTplfWlmKHQ9WChlLmUvRSksYz1YKGYuZS9FKSx1PXUuc2xpY2UoKSxvPWMtdCxvKXtmb3IocD1vPDAscD8ocj11LG89LW8scz1kLmxlbmd0aCk6KHI9ZCx0PWMscz11Lmxlbmd0aCksbj1NYXRoLm1heChNYXRoLmNlaWwoYS9FKSxzKSsyLG8+biYmKG89bixyLmxlbmd0aD0xKSxyLnJldmVyc2UoKSxuPW87bi0tOylyLnB1c2goMCk7ci5yZXZlcnNlKCl9ZWxzZXtmb3Iobj11Lmxlbmd0aCxzPWQubGVuZ3RoLHA9bjxzLHAmJihzPW4pLG49MDtuPHM7bisrKWlmKHVbbl0hPWRbbl0pe3A9dVtuXTxkW25dO2JyZWFrfW89MH1mb3IocCYmKHI9dSx1PWQsZD1yLGUucz0tZS5zKSxzPXUubGVuZ3RoLG49ZC5sZW5ndGgtcztuPjA7LS1uKXVbcysrXT0wO2ZvcihuPWQubGVuZ3RoO24+bzspe2lmKHVbLS1uXTxkW25dKXtmb3IoaT1uO2kmJnVbLS1pXT09PTA7KXVbaV09ZmUtMTstLXVbaV0sdVtuXSs9ZmV9dVtuXS09ZFtuXX1mb3IoO3VbLS1zXT09PTA7KXUucG9wKCk7Zm9yKDt1WzBdPT09MDt1LnNoaWZ0KCkpLS10O3JldHVybiB1WzBdPyhlLmQ9dSxlLmU9Ym4odSx0KSx3P3koZSxhLGwpOmUpOm5ldyBoKGw9PT0zPy0wOjApfTttLm1vZHVsbz1tLm1vZD1mdW5jdGlvbihlKXt2YXIgcix0PXRoaXMsbj10LmNvbnN0cnVjdG9yO3JldHVybiBlPW5ldyBuKGUpLCF0LmR8fCFlLnN8fGUuZCYmIWUuZFswXT9uZXcgbihOYU4pOiFlLmR8fHQuZCYmIXQuZFswXT95KG5ldyBuKHQpLG4ucHJlY2lzaW9uLG4ucm91bmRpbmcpOih3PSExLG4ubW9kdWxvPT05PyhyPUwodCxlLmFicygpLDAsMywxKSxyLnMqPWUucyk6cj1MKHQsZSwwLG4ubW9kdWxvLDEpLHI9ci50aW1lcyhlKSx3PSEwLHQubWludXMocikpfTttLm5hdHVyYWxFeHBvbmVudGlhbD1tLmV4cD1mdW5jdGlvbigpe3JldHVybiBXaSh0aGlzKX07bS5uYXR1cmFsTG9nYXJpdGhtPW0ubG49ZnVuY3Rpb24oKXtyZXR1cm4gSmUodGhpcyl9O20ubmVnYXRlZD1tLm5lZz1mdW5jdGlvbigpe3ZhciBlPW5ldyB0aGlzLmNvbnN0cnVjdG9yKHRoaXMpO3JldHVybiBlLnM9LWUucyx5KGUpfTttLnBsdXM9bS5hZGQ9ZnVuY3Rpb24oZSl7dmFyIHIsdCxuLGksbyxzLGEsbCx1LGMscD10aGlzLGQ9cC5jb25zdHJ1Y3RvcjtpZihlPW5ldyBkKGUpLCFwLmR8fCFlLmQpcmV0dXJuIXAuc3x8IWUucz9lPW5ldyBkKE5hTik6cC5kfHwoZT1uZXcgZChlLmR8fHAucz09PWUucz9wOk5hTikpLGU7aWYocC5zIT1lLnMpcmV0dXJuIGUucz0tZS5zLHAubWludXMoZSk7aWYodT1wLmQsYz1lLmQsYT1kLnByZWNpc2lvbixsPWQucm91bmRpbmcsIXVbMF18fCFjWzBdKXJldHVybiBjWzBdfHwoZT1uZXcgZChwKSksdz95KGUsYSxsKTplO2lmKG89WChwLmUvRSksbj1YKGUuZS9FKSx1PXUuc2xpY2UoKSxpPW8tbixpKXtmb3IoaTwwPyh0PXUsaT0taSxzPWMubGVuZ3RoKToodD1jLG49byxzPXUubGVuZ3RoKSxvPU1hdGguY2VpbChhL0UpLHM9bz5zP28rMTpzKzEsaT5zJiYoaT1zLHQubGVuZ3RoPTEpLHQucmV2ZXJzZSgpO2ktLTspdC5wdXNoKDApO3QucmV2ZXJzZSgpfWZvcihzPXUubGVuZ3RoLGk9Yy5sZW5ndGgscy1pPDAmJihpPXMsdD1jLGM9dSx1PXQpLHI9MDtpOylyPSh1Wy0taV09dVtpXStjW2ldK3IpL2ZlfDAsdVtpXSU9ZmU7Zm9yKHImJih1LnVuc2hpZnQociksKytuKSxzPXUubGVuZ3RoO3VbLS1zXT09MDspdS5wb3AoKTtyZXR1cm4gZS5kPXUsZS5lPWJuKHUsbiksdz95KGUsYSxsKTplfTttLnByZWNpc2lvbj1tLnNkPWZ1bmN0aW9uKGUpe3ZhciByLHQ9dGhpcztpZihlIT09dm9pZCAwJiZlIT09ISFlJiZlIT09MSYmZSE9PTApdGhyb3cgRXJyb3IoSGUrZSk7cmV0dXJuIHQuZD8ocj1Xcyh0LmQpLGUmJnQuZSsxPnImJihyPXQuZSsxKSk6cj1OYU4scn07bS5yb3VuZD1mdW5jdGlvbigpe3ZhciBlPXRoaXMscj1lLmNvbnN0cnVjdG9yO3JldHVybiB5KG5ldyByKGUpLGUuZSsxLHIucm91bmRpbmcpfTttLnNpbmU9bS5zaW49ZnVuY3Rpb24oKXt2YXIgZSxyLHQ9dGhpcyxuPXQuY29uc3RydWN0b3I7cmV0dXJuIHQuaXNGaW5pdGUoKT90LmlzWmVybygpP25ldyBuKHQpOihlPW4ucHJlY2lzaW9uLHI9bi5yb3VuZGluZyxuLnByZWNpc2lvbj1lK01hdGgubWF4KHQuZSx0LnNkKCkpK0Usbi5yb3VuZGluZz0xLHQ9SXAobixZcyhuLHQpKSxuLnByZWNpc2lvbj1lLG4ucm91bmRpbmc9cix5KEZlPjI/dC5uZWcoKTp0LGUsciwhMCkpOm5ldyBuKE5hTil9O20uc3F1YXJlUm9vdD1tLnNxcnQ9ZnVuY3Rpb24oKXt2YXIgZSxyLHQsbixpLG8scz10aGlzLGE9cy5kLGw9cy5lLHU9cy5zLGM9cy5jb25zdHJ1Y3RvcjtpZih1IT09MXx8IWF8fCFhWzBdKXJldHVybiBuZXcgYyghdXx8dTwwJiYoIWF8fGFbMF0pP05hTjphP3M6MS8wKTtmb3Iodz0hMSx1PU1hdGguc3FydCgrcyksdT09MHx8dT09MS8wPyhyPUooYSksKHIubGVuZ3RoK2wpJTI9PTAmJihyKz1cIjBcIiksdT1NYXRoLnNxcnQociksbD1YKChsKzEpLzIpLShsPDB8fGwlMiksdT09MS8wP3I9XCI1ZVwiK2w6KHI9dS50b0V4cG9uZW50aWFsKCkscj1yLnNsaWNlKDAsci5pbmRleE9mKFwiZVwiKSsxKStsKSxuPW5ldyBjKHIpKTpuPW5ldyBjKHUudG9TdHJpbmcoKSksdD0obD1jLnByZWNpc2lvbikrMzs7KWlmKG89bixuPW8ucGx1cyhMKHMsbyx0KzIsMSkpLnRpbWVzKC41KSxKKG8uZCkuc2xpY2UoMCx0KT09PShyPUoobi5kKSkuc2xpY2UoMCx0KSlpZihyPXIuc2xpY2UodC0zLHQrMSkscj09XCI5OTk5XCJ8fCFpJiZyPT1cIjQ5OTlcIil7aWYoIWkmJih5KG8sbCsxLDApLG8udGltZXMobykuZXEocykpKXtuPW87YnJlYWt9dCs9NCxpPTF9ZWxzZXsoIStyfHwhK3Iuc2xpY2UoMSkmJnIuY2hhckF0KDApPT1cIjVcIikmJih5KG4sbCsxLDEpLGU9IW4udGltZXMobikuZXEocykpO2JyZWFrfXJldHVybiB3PSEwLHkobixsLGMucm91bmRpbmcsZSl9O20udGFuZ2VudD1tLnRhbj1mdW5jdGlvbigpe3ZhciBlLHIsdD10aGlzLG49dC5jb25zdHJ1Y3RvcjtyZXR1cm4gdC5pc0Zpbml0ZSgpP3QuaXNaZXJvKCk/bmV3IG4odCk6KGU9bi5wcmVjaXNpb24scj1uLnJvdW5kaW5nLG4ucHJlY2lzaW9uPWUrMTAsbi5yb3VuZGluZz0xLHQ9dC5zaW4oKSx0LnM9MSx0PUwodCxuZXcgbigxKS5taW51cyh0LnRpbWVzKHQpKS5zcXJ0KCksZSsxMCwwKSxuLnByZWNpc2lvbj1lLG4ucm91bmRpbmc9cix5KEZlPT0yfHxGZT09ND90Lm5lZygpOnQsZSxyLCEwKSk6bmV3IG4oTmFOKX07bS50aW1lcz1tLm11bD1mdW5jdGlvbihlKXt2YXIgcix0LG4saSxvLHMsYSxsLHUsYz10aGlzLHA9Yy5jb25zdHJ1Y3RvcixkPWMuZCxmPShlPW5ldyBwKGUpKS5kO2lmKGUucyo9Yy5zLCFkfHwhZFswXXx8IWZ8fCFmWzBdKXJldHVybiBuZXcgcCghZS5zfHxkJiYhZFswXSYmIWZ8fGYmJiFmWzBdJiYhZD9OYU46IWR8fCFmP2Uucy8wOmUucyowKTtmb3IodD1YKGMuZS9FKStYKGUuZS9FKSxsPWQubGVuZ3RoLHU9Zi5sZW5ndGgsbDx1JiYobz1kLGQ9ZixmPW8scz1sLGw9dSx1PXMpLG89W10scz1sK3Usbj1zO24tLTspby5wdXNoKDApO2ZvcihuPXU7LS1uPj0wOyl7Zm9yKHI9MCxpPWwrbjtpPm47KWE9b1tpXStmW25dKmRbaS1uLTFdK3Isb1tpLS1dPWElZmV8MCxyPWEvZmV8MDtvW2ldPShvW2ldK3IpJWZlfDB9Zm9yKDshb1stLXNdOylvLnBvcCgpO3JldHVybiByPysrdDpvLnNoaWZ0KCksZS5kPW8sZS5lPWJuKG8sdCksdz95KGUscC5wcmVjaXNpb24scC5yb3VuZGluZyk6ZX07bS50b0JpbmFyeT1mdW5jdGlvbihlLHIpe3JldHVybiBKaSh0aGlzLDIsZSxyKX07bS50b0RlY2ltYWxQbGFjZXM9bS50b0RQPWZ1bmN0aW9uKGUscil7dmFyIHQ9dGhpcyxuPXQuY29uc3RydWN0b3I7cmV0dXJuIHQ9bmV3IG4odCksZT09PXZvaWQgMD90OihpZShlLDAsS2UpLHI9PT12b2lkIDA/cj1uLnJvdW5kaW5nOmllKHIsMCw4KSx5KHQsZSt0LmUrMSxyKSl9O20udG9FeHBvbmVudGlhbD1mdW5jdGlvbihlLHIpe3ZhciB0LG49dGhpcyxpPW4uY29uc3RydWN0b3I7cmV0dXJuIGU9PT12b2lkIDA/dD14ZShuLCEwKTooaWUoZSwwLEtlKSxyPT09dm9pZCAwP3I9aS5yb3VuZGluZzppZShyLDAsOCksbj15KG5ldyBpKG4pLGUrMSxyKSx0PXhlKG4sITAsZSsxKSksbi5pc05lZygpJiYhbi5pc1plcm8oKT9cIi1cIit0OnR9O20udG9GaXhlZD1mdW5jdGlvbihlLHIpe3ZhciB0LG4saT10aGlzLG89aS5jb25zdHJ1Y3RvcjtyZXR1cm4gZT09PXZvaWQgMD90PXhlKGkpOihpZShlLDAsS2UpLHI9PT12b2lkIDA/cj1vLnJvdW5kaW5nOmllKHIsMCw4KSxuPXkobmV3IG8oaSksZStpLmUrMSxyKSx0PXhlKG4sITEsZStuLmUrMSkpLGkuaXNOZWcoKSYmIWkuaXNaZXJvKCk/XCItXCIrdDp0fTttLnRvRnJhY3Rpb249ZnVuY3Rpb24oZSl7dmFyIHIsdCxuLGksbyxzLGEsbCx1LGMscCxkLGY9dGhpcyxoPWYuZCxnPWYuY29uc3RydWN0b3I7aWYoIWgpcmV0dXJuIG5ldyBnKGYpO2lmKHU9dD1uZXcgZygxKSxuPWw9bmV3IGcoMCkscj1uZXcgZyhuKSxvPXIuZT1XcyhoKS1mLmUtMSxzPW8lRSxyLmRbMF09VSgxMCxzPDA/RStzOnMpLGU9PW51bGwpZT1vPjA/cjp1O2Vsc2V7aWYoYT1uZXcgZyhlKSwhYS5pc0ludCgpfHxhLmx0KHUpKXRocm93IEVycm9yKEhlK2EpO2U9YS5ndChyKT9vPjA/cjp1OmF9Zm9yKHc9ITEsYT1uZXcgZyhKKGgpKSxjPWcucHJlY2lzaW9uLGcucHJlY2lzaW9uPW89aC5sZW5ndGgqRSoyO3A9TChhLHIsMCwxLDEpLGk9dC5wbHVzKHAudGltZXMobikpLGkuY21wKGUpIT0xOyl0PW4sbj1pLGk9dSx1PWwucGx1cyhwLnRpbWVzKGkpKSxsPWksaT1yLHI9YS5taW51cyhwLnRpbWVzKGkpKSxhPWk7cmV0dXJuIGk9TChlLm1pbnVzKHQpLG4sMCwxLDEpLGw9bC5wbHVzKGkudGltZXModSkpLHQ9dC5wbHVzKGkudGltZXMobikpLGwucz11LnM9Zi5zLGQ9TCh1LG4sbywxKS5taW51cyhmKS5hYnMoKS5jbXAoTChsLHQsbywxKS5taW51cyhmKS5hYnMoKSk8MT9bdSxuXTpbbCx0XSxnLnByZWNpc2lvbj1jLHc9ITAsZH07bS50b0hleGFkZWNpbWFsPW0udG9IZXg9ZnVuY3Rpb24oZSxyKXtyZXR1cm4gSmkodGhpcywxNixlLHIpfTttLnRvTmVhcmVzdD1mdW5jdGlvbihlLHIpe3ZhciB0PXRoaXMsbj10LmNvbnN0cnVjdG9yO2lmKHQ9bmV3IG4odCksZT09bnVsbCl7aWYoIXQuZClyZXR1cm4gdDtlPW5ldyBuKDEpLHI9bi5yb3VuZGluZ31lbHNle2lmKGU9bmV3IG4oZSkscj09PXZvaWQgMD9yPW4ucm91bmRpbmc6aWUociwwLDgpLCF0LmQpcmV0dXJuIGUucz90OmU7aWYoIWUuZClyZXR1cm4gZS5zJiYoZS5zPXQucyksZX1yZXR1cm4gZS5kWzBdPyh3PSExLHQ9TCh0LGUsMCxyLDEpLnRpbWVzKGUpLHc9ITAseSh0KSk6KGUucz10LnMsdD1lKSx0fTttLnRvTnVtYmVyPWZ1bmN0aW9uKCl7cmV0dXJuK3RoaXN9O20udG9PY3RhbD1mdW5jdGlvbihlLHIpe3JldHVybiBKaSh0aGlzLDgsZSxyKX07bS50b1Bvd2VyPW0ucG93PWZ1bmN0aW9uKGUpe3ZhciByLHQsbixpLG8scyxhPXRoaXMsbD1hLmNvbnN0cnVjdG9yLHU9KyhlPW5ldyBsKGUpKTtpZighYS5kfHwhZS5kfHwhYS5kWzBdfHwhZS5kWzBdKXJldHVybiBuZXcgbChVKCthLHUpKTtpZihhPW5ldyBsKGEpLGEuZXEoMSkpcmV0dXJuIGE7aWYobj1sLnByZWNpc2lvbixvPWwucm91bmRpbmcsZS5lcSgxKSlyZXR1cm4geShhLG4sbyk7aWYocj1YKGUuZS9FKSxyPj1lLmQubGVuZ3RoLTEmJih0PXU8MD8tdTp1KTw9U3ApcmV0dXJuIGk9SnMobCxhLHQsbiksZS5zPDA/bmV3IGwoMSkuZGl2KGkpOnkoaSxuLG8pO2lmKHM9YS5zLHM8MCl7aWYocjxlLmQubGVuZ3RoLTEpcmV0dXJuIG5ldyBsKE5hTik7aWYoKGUuZFtyXSYxKT09MCYmKHM9MSksYS5lPT0wJiZhLmRbMF09PTEmJmEuZC5sZW5ndGg9PTEpcmV0dXJuIGEucz1zLGF9cmV0dXJuIHQ9VSgrYSx1KSxyPXQ9PTB8fCFpc0Zpbml0ZSh0KT9YKHUqKE1hdGgubG9nKFwiMC5cIitKKGEuZCkpL01hdGguTE4xMCthLmUrMSkpOm5ldyBsKHQrXCJcIikuZSxyPmwubWF4RSsxfHxyPGwubWluRS0xP25ldyBsKHI+MD9zLzA6MCk6KHc9ITEsbC5yb3VuZGluZz1hLnM9MSx0PU1hdGgubWluKDEyLChyK1wiXCIpLmxlbmd0aCksaT1XaShlLnRpbWVzKEplKGEsbit0KSksbiksaS5kJiYoaT15KGksbis1LDEpLGx0KGkuZCxuLG8pJiYocj1uKzEwLGk9eShXaShlLnRpbWVzKEplKGEscit0KSkscikscis1LDEpLCtKKGkuZCkuc2xpY2UobisxLG4rMTUpKzE9PTFlMTQmJihpPXkoaSxuKzEsMCkpKSksaS5zPXMsdz0hMCxsLnJvdW5kaW5nPW8seShpLG4sbykpfTttLnRvUHJlY2lzaW9uPWZ1bmN0aW9uKGUscil7dmFyIHQsbj10aGlzLGk9bi5jb25zdHJ1Y3RvcjtyZXR1cm4gZT09PXZvaWQgMD90PXhlKG4sbi5lPD1pLnRvRXhwTmVnfHxuLmU+PWkudG9FeHBQb3MpOihpZShlLDEsS2UpLHI9PT12b2lkIDA/cj1pLnJvdW5kaW5nOmllKHIsMCw4KSxuPXkobmV3IGkobiksZSxyKSx0PXhlKG4sZTw9bi5lfHxuLmU8PWkudG9FeHBOZWcsZSkpLG4uaXNOZWcoKSYmIW4uaXNaZXJvKCk/XCItXCIrdDp0fTttLnRvU2lnbmlmaWNhbnREaWdpdHM9bS50b1NEPWZ1bmN0aW9uKGUscil7dmFyIHQ9dGhpcyxuPXQuY29uc3RydWN0b3I7cmV0dXJuIGU9PT12b2lkIDA/KGU9bi5wcmVjaXNpb24scj1uLnJvdW5kaW5nKTooaWUoZSwxLEtlKSxyPT09dm9pZCAwP3I9bi5yb3VuZGluZzppZShyLDAsOCkpLHkobmV3IG4odCksZSxyKX07bS50b1N0cmluZz1mdW5jdGlvbigpe3ZhciBlPXRoaXMscj1lLmNvbnN0cnVjdG9yLHQ9eGUoZSxlLmU8PXIudG9FeHBOZWd8fGUuZT49ci50b0V4cFBvcyk7cmV0dXJuIGUuaXNOZWcoKSYmIWUuaXNaZXJvKCk/XCItXCIrdDp0fTttLnRydW5jYXRlZD1tLnRydW5jPWZ1bmN0aW9uKCl7cmV0dXJuIHkobmV3IHRoaXMuY29uc3RydWN0b3IodGhpcyksdGhpcy5lKzEsMSl9O20udmFsdWVPZj1tLnRvSlNPTj1mdW5jdGlvbigpe3ZhciBlPXRoaXMscj1lLmNvbnN0cnVjdG9yLHQ9eGUoZSxlLmU8PXIudG9FeHBOZWd8fGUuZT49ci50b0V4cFBvcyk7cmV0dXJuIGUuaXNOZWcoKT9cIi1cIit0OnR9O2Z1bmN0aW9uIEooZSl7dmFyIHIsdCxuLGk9ZS5sZW5ndGgtMSxvPVwiXCIscz1lWzBdO2lmKGk+MCl7Zm9yKG8rPXMscj0xO3I8aTtyKyspbj1lW3JdK1wiXCIsdD1FLW4ubGVuZ3RoLHQmJihvKz1XZSh0KSksbys9bjtzPWVbcl0sbj1zK1wiXCIsdD1FLW4ubGVuZ3RoLHQmJihvKz1XZSh0KSl9ZWxzZSBpZihzPT09MClyZXR1cm5cIjBcIjtmb3IoO3MlMTA9PT0wOylzLz0xMDtyZXR1cm4gbytzfWZ1bmN0aW9uIGllKGUscix0KXtpZihlIT09fn5lfHxlPHJ8fGU+dCl0aHJvdyBFcnJvcihIZStlKX1mdW5jdGlvbiBsdChlLHIsdCxuKXt2YXIgaSxvLHMsYTtmb3Iobz1lWzBdO28+PTEwO28vPTEwKS0tcjtyZXR1cm4tLXI8MD8ocis9RSxpPTApOihpPU1hdGguY2VpbCgocisxKS9FKSxyJT1FKSxvPVUoMTAsRS1yKSxhPWVbaV0lb3wwLG49PW51bGw/cjwzPyhyPT0wP2E9YS8xMDB8MDpyPT0xJiYoYT1hLzEwfDApLHM9dDw0JiZhPT05OTk5OXx8dD4zJiZhPT00OTk5OXx8YT09NWU0fHxhPT0wKTpzPSh0PDQmJmErMT09b3x8dD4zJiZhKzE9PW8vMikmJihlW2krMV0vby8xMDB8MCk9PVUoMTAsci0yKS0xfHwoYT09by8yfHxhPT0wKSYmKGVbaSsxXS9vLzEwMHwwKT09MDpyPDQ/KHI9PTA/YT1hLzFlM3wwOnI9PTE/YT1hLzEwMHwwOnI9PTImJihhPWEvMTB8MCkscz0obnx8dDw0KSYmYT09OTk5OXx8IW4mJnQ+MyYmYT09NDk5OSk6cz0oKG58fHQ8NCkmJmErMT09b3x8IW4mJnQ+MyYmYSsxPT1vLzIpJiYoZVtpKzFdL28vMWUzfDApPT1VKDEwLHItMyktMSxzfWZ1bmN0aW9uIGRuKGUscix0KXtmb3IodmFyIG4saT1bMF0sbyxzPTAsYT1lLmxlbmd0aDtzPGE7KXtmb3Iobz1pLmxlbmd0aDtvLS07KWlbb10qPXI7Zm9yKGlbMF0rPVVpLmluZGV4T2YoZS5jaGFyQXQocysrKSksbj0wO248aS5sZW5ndGg7bisrKWlbbl0+dC0xJiYoaVtuKzFdPT09dm9pZCAwJiYoaVtuKzFdPTApLGlbbisxXSs9aVtuXS90fDAsaVtuXSU9dCl9cmV0dXJuIGkucmV2ZXJzZSgpfWZ1bmN0aW9uIEFwKGUscil7dmFyIHQsbixpO2lmKHIuaXNaZXJvKCkpcmV0dXJuIHI7bj1yLmQubGVuZ3RoLG48MzI/KHQ9TWF0aC5jZWlsKG4vMyksaT0oMS9Fbig0LHQpKS50b1N0cmluZygpKToodD0xNixpPVwiMi4zMjgzMDY0MzY1Mzg2OTYyODkwNjI1ZS0xMFwiKSxlLnByZWNpc2lvbis9dCxyPVByKGUsMSxyLnRpbWVzKGkpLG5ldyBlKDEpKTtmb3IodmFyIG89dDtvLS07KXt2YXIgcz1yLnRpbWVzKHIpO3I9cy50aW1lcyhzKS5taW51cyhzKS50aW1lcyg4KS5wbHVzKDEpfXJldHVybiBlLnByZWNpc2lvbi09dCxyfXZhciBMPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShuLGksbyl7dmFyIHMsYT0wLGw9bi5sZW5ndGg7Zm9yKG49bi5zbGljZSgpO2wtLTspcz1uW2xdKmkrYSxuW2xdPXMlb3wwLGE9cy9vfDA7cmV0dXJuIGEmJm4udW5zaGlmdChhKSxufWZ1bmN0aW9uIHIobixpLG8scyl7dmFyIGEsbDtpZihvIT1zKWw9bz5zPzE6LTE7ZWxzZSBmb3IoYT1sPTA7YTxvO2ErKylpZihuW2FdIT1pW2FdKXtsPW5bYV0+aVthXT8xOi0xO2JyZWFrfXJldHVybiBsfWZ1bmN0aW9uIHQobixpLG8scyl7Zm9yKHZhciBhPTA7by0tOyluW29dLT1hLGE9bltvXTxpW29dPzE6MCxuW29dPWEqcytuW29dLWlbb107Zm9yKDshblswXSYmbi5sZW5ndGg+MTspbi5zaGlmdCgpfXJldHVybiBmdW5jdGlvbihuLGksbyxzLGEsbCl7dmFyIHUsYyxwLGQsZixoLGcsUyxQLFIsYixELG1lLGFlLEhyLFYsdGUsQ2UsSCxmcixqdD1uLmNvbnN0cnVjdG9yLG5pPW4ucz09aS5zPzE6LTEsSz1uLmQsXz1pLmQ7aWYoIUt8fCFLWzBdfHwhX3x8IV9bMF0pcmV0dXJuIG5ldyBqdCghbi5zfHwhaS5zfHwoSz9fJiZLWzBdPT1fWzBdOiFfKT9OYU46SyYmS1swXT09MHx8IV8/bmkqMDpuaS8wKTtmb3IobD8oZj0xLGM9bi5lLWkuZSk6KGw9ZmUsZj1FLGM9WChuLmUvZiktWChpLmUvZikpLEg9Xy5sZW5ndGgsdGU9Sy5sZW5ndGgsUD1uZXcganQobmkpLFI9UC5kPVtdLHA9MDtfW3BdPT0oS1twXXx8MCk7cCsrKTtpZihfW3BdPihLW3BdfHwwKSYmYy0tLG89PW51bGw/KGFlPW89anQucHJlY2lzaW9uLHM9anQucm91bmRpbmcpOmE/YWU9bysobi5lLWkuZSkrMTphZT1vLGFlPDApUi5wdXNoKDEpLGg9ITA7ZWxzZXtpZihhZT1hZS9mKzJ8MCxwPTAsSD09MSl7Zm9yKGQ9MCxfPV9bMF0sYWUrKzsocDx0ZXx8ZCkmJmFlLS07cCsrKUhyPWQqbCsoS1twXXx8MCksUltwXT1Ici9ffDAsZD1IciVffDA7aD1kfHxwPHRlfWVsc2V7Zm9yKGQ9bC8oX1swXSsxKXwwLGQ+MSYmKF89ZShfLGQsbCksSz1lKEssZCxsKSxIPV8ubGVuZ3RoLHRlPUsubGVuZ3RoKSxWPUgsYj1LLnNsaWNlKDAsSCksRD1iLmxlbmd0aDtEPEg7KWJbRCsrXT0wO2ZyPV8uc2xpY2UoKSxmci51bnNoaWZ0KDApLENlPV9bMF0sX1sxXT49bC8yJiYrK0NlO2RvIGQ9MCx1PXIoXyxiLEgsRCksdTwwPyhtZT1iWzBdLEghPUQmJihtZT1tZSpsKyhiWzFdfHwwKSksZD1tZS9DZXwwLGQ+MT8oZD49bCYmKGQ9bC0xKSxnPWUoXyxkLGwpLFM9Zy5sZW5ndGgsRD1iLmxlbmd0aCx1PXIoZyxiLFMsRCksdT09MSYmKGQtLSx0KGcsSDxTP2ZyOl8sUyxsKSkpOihkPT0wJiYodT1kPTEpLGc9Xy5zbGljZSgpKSxTPWcubGVuZ3RoLFM8RCYmZy51bnNoaWZ0KDApLHQoYixnLEQsbCksdT09LTEmJihEPWIubGVuZ3RoLHU9cihfLGIsSCxEKSx1PDEmJihkKyssdChiLEg8RD9mcjpfLEQsbCkpKSxEPWIubGVuZ3RoKTp1PT09MCYmKGQrKyxiPVswXSksUltwKytdPWQsdSYmYlswXT9iW0QrK109S1tWXXx8MDooYj1bS1tWXV0sRD0xKTt3aGlsZSgoVisrPHRlfHxiWzBdIT09dm9pZCAwKSYmYWUtLSk7aD1iWzBdIT09dm9pZCAwfVJbMF18fFIuc2hpZnQoKX1pZihmPT0xKVAuZT1jLFZzPWg7ZWxzZXtmb3IocD0xLGQ9UlswXTtkPj0xMDtkLz0xMClwKys7UC5lPXArYypmLTEseShQLGE/bytQLmUrMTpvLHMsaCl9cmV0dXJuIFB9fSgpO2Z1bmN0aW9uIHkoZSxyLHQsbil7dmFyIGksbyxzLGEsbCx1LGMscCxkLGY9ZS5jb25zdHJ1Y3RvcjtlOmlmKHIhPW51bGwpe2lmKHA9ZS5kLCFwKXJldHVybiBlO2ZvcihpPTEsYT1wWzBdO2E+PTEwO2EvPTEwKWkrKztpZihvPXItaSxvPDApbys9RSxzPXIsYz1wW2Q9MF0sbD1jL1UoMTAsaS1zLTEpJTEwfDA7ZWxzZSBpZihkPU1hdGguY2VpbCgobysxKS9FKSxhPXAubGVuZ3RoLGQ+PWEpaWYobil7Zm9yKDthKys8PWQ7KXAucHVzaCgwKTtjPWw9MCxpPTEsbyU9RSxzPW8tRSsxfWVsc2UgYnJlYWsgZTtlbHNle2ZvcihjPWE9cFtkXSxpPTE7YT49MTA7YS89MTApaSsrO28lPUUscz1vLUUraSxsPXM8MD8wOmMvVSgxMCxpLXMtMSklMTB8MH1pZihuPW58fHI8MHx8cFtkKzFdIT09dm9pZCAwfHwoczwwP2M6YyVVKDEwLGktcy0xKSksdT10PDQ/KGx8fG4pJiYodD09MHx8dD09KGUuczwwPzM6MikpOmw+NXx8bD09NSYmKHQ9PTR8fG58fHQ9PTYmJihvPjA/cz4wP2MvVSgxMCxpLXMpOjA6cFtkLTFdKSUxMCYxfHx0PT0oZS5zPDA/ODo3KSkscjwxfHwhcFswXSlyZXR1cm4gcC5sZW5ndGg9MCx1PyhyLT1lLmUrMSxwWzBdPVUoMTAsKEUtciVFKSVFKSxlLmU9LXJ8fDApOnBbMF09ZS5lPTAsZTtpZihvPT0wPyhwLmxlbmd0aD1kLGE9MSxkLS0pOihwLmxlbmd0aD1kKzEsYT1VKDEwLEUtbykscFtkXT1zPjA/KGMvVSgxMCxpLXMpJVUoMTAscyl8MCkqYTowKSx1KWZvcig7OylpZihkPT0wKXtmb3Iobz0xLHM9cFswXTtzPj0xMDtzLz0xMClvKys7Zm9yKHM9cFswXSs9YSxhPTE7cz49MTA7cy89MTApYSsrO28hPWEmJihlLmUrKyxwWzBdPT1mZSYmKHBbMF09MSkpO2JyZWFrfWVsc2V7aWYocFtkXSs9YSxwW2RdIT1mZSlicmVhaztwW2QtLV09MCxhPTF9Zm9yKG89cC5sZW5ndGg7cFstLW9dPT09MDspcC5wb3AoKX1yZXR1cm4gdyYmKGUuZT5mLm1heEU/KGUuZD1udWxsLGUuZT1OYU4pOmUuZTxmLm1pbkUmJihlLmU9MCxlLmQ9WzBdKSksZX1mdW5jdGlvbiB4ZShlLHIsdCl7aWYoIWUuaXNGaW5pdGUoKSlyZXR1cm4gS3MoZSk7dmFyIG4saT1lLmUsbz1KKGUuZCkscz1vLmxlbmd0aDtyZXR1cm4gcj8odCYmKG49dC1zKT4wP289by5jaGFyQXQoMCkrXCIuXCIrby5zbGljZSgxKStXZShuKTpzPjEmJihvPW8uY2hhckF0KDApK1wiLlwiK28uc2xpY2UoMSkpLG89bysoZS5lPDA/XCJlXCI6XCJlK1wiKStlLmUpOmk8MD8obz1cIjAuXCIrV2UoLWktMSkrbyx0JiYobj10LXMpPjAmJihvKz1XZShuKSkpOmk+PXM/KG8rPVdlKGkrMS1zKSx0JiYobj10LWktMSk+MCYmKG89bytcIi5cIitXZShuKSkpOigobj1pKzEpPHMmJihvPW8uc2xpY2UoMCxuKStcIi5cIitvLnNsaWNlKG4pKSx0JiYobj10LXMpPjAmJihpKzE9PT1zJiYobys9XCIuXCIpLG8rPVdlKG4pKSksb31mdW5jdGlvbiBibihlLHIpe3ZhciB0PWVbMF07Zm9yKHIqPUU7dD49MTA7dC89MTApcisrO3JldHVybiByfWZ1bmN0aW9uIGhuKGUscix0KXtpZihyPlJwKXRocm93IHc9ITAsdCYmKGUucHJlY2lzaW9uPXQpLEVycm9yKEJzKTtyZXR1cm4geShuZXcgZShmbiksciwxLCEwKX1mdW5jdGlvbiB3ZShlLHIsdCl7aWYocj5RaSl0aHJvdyBFcnJvcihCcyk7cmV0dXJuIHkobmV3IGUoZ24pLHIsdCwhMCl9ZnVuY3Rpb24gV3MoZSl7dmFyIHI9ZS5sZW5ndGgtMSx0PXIqRSsxO2lmKHI9ZVtyXSxyKXtmb3IoO3IlMTA9PTA7ci89MTApdC0tO2ZvcihyPWVbMF07cj49MTA7ci89MTApdCsrfXJldHVybiB0fWZ1bmN0aW9uIFdlKGUpe2Zvcih2YXIgcj1cIlwiO2UtLTspcis9XCIwXCI7cmV0dXJuIHJ9ZnVuY3Rpb24gSnMoZSxyLHQsbil7dmFyIGksbz1uZXcgZSgxKSxzPU1hdGguY2VpbChuL0UrNCk7Zm9yKHc9ITE7Oyl7aWYodCUyJiYobz1vLnRpbWVzKHIpLHFzKG8uZCxzKSYmKGk9ITApKSx0PVgodC8yKSx0PT09MCl7dD1vLmQubGVuZ3RoLTEsaSYmby5kW3RdPT09MCYmKytvLmRbdF07YnJlYWt9cj1yLnRpbWVzKHIpLHFzKHIuZCxzKX1yZXR1cm4gdz0hMCxvfWZ1bmN0aW9uICRzKGUpe3JldHVybiBlLmRbZS5kLmxlbmd0aC0xXSYxfWZ1bmN0aW9uIEhzKGUscix0KXtmb3IodmFyIG4saSxvPW5ldyBlKHJbMF0pLHM9MDsrK3M8ci5sZW5ndGg7KXtpZihpPW5ldyBlKHJbc10pLCFpLnMpe289aTticmVha31uPW8uY21wKGkpLChuPT09dHx8bj09PTAmJm8ucz09PXQpJiYobz1pKX1yZXR1cm4gb31mdW5jdGlvbiBXaShlLHIpe3ZhciB0LG4saSxvLHMsYSxsLHU9MCxjPTAscD0wLGQ9ZS5jb25zdHJ1Y3RvcixmPWQucm91bmRpbmcsaD1kLnByZWNpc2lvbjtpZighZS5kfHwhZS5kWzBdfHxlLmU+MTcpcmV0dXJuIG5ldyBkKGUuZD9lLmRbMF0/ZS5zPDA/MDoxLzA6MTplLnM/ZS5zPDA/MDplOk5hTik7Zm9yKHI9PW51bGw/KHc9ITEsbD1oKTpsPXIsYT1uZXcgZCguMDMxMjUpO2UuZT4tMjspZT1lLnRpbWVzKGEpLHArPTU7Zm9yKG49TWF0aC5sb2coVSgyLHApKS9NYXRoLkxOMTAqMis1fDAsbCs9bix0PW89cz1uZXcgZCgxKSxkLnByZWNpc2lvbj1sOzspe2lmKG89eShvLnRpbWVzKGUpLGwsMSksdD10LnRpbWVzKCsrYyksYT1zLnBsdXMoTChvLHQsbCwxKSksSihhLmQpLnNsaWNlKDAsbCk9PT1KKHMuZCkuc2xpY2UoMCxsKSl7Zm9yKGk9cDtpLS07KXM9eShzLnRpbWVzKHMpLGwsMSk7aWYocj09bnVsbClpZih1PDMmJmx0KHMuZCxsLW4sZix1KSlkLnByZWNpc2lvbj1sKz0xMCx0PW89YT1uZXcgZCgxKSxjPTAsdSsrO2Vsc2UgcmV0dXJuIHkocyxkLnByZWNpc2lvbj1oLGYsdz0hMCk7ZWxzZSByZXR1cm4gZC5wcmVjaXNpb249aCxzfXM9YX19ZnVuY3Rpb24gSmUoZSxyKXt2YXIgdCxuLGksbyxzLGEsbCx1LGMscCxkLGY9MSxoPTEwLGc9ZSxTPWcuZCxQPWcuY29uc3RydWN0b3IsUj1QLnJvdW5kaW5nLGI9UC5wcmVjaXNpb247aWYoZy5zPDB8fCFTfHwhU1swXXx8IWcuZSYmU1swXT09MSYmUy5sZW5ndGg9PTEpcmV0dXJuIG5ldyBQKFMmJiFTWzBdPy0xLzA6Zy5zIT0xP05hTjpTPzA6Zyk7aWYocj09bnVsbD8odz0hMSxjPWIpOmM9cixQLnByZWNpc2lvbj1jKz1oLHQ9SihTKSxuPXQuY2hhckF0KDApLE1hdGguYWJzKG89Zy5lKTwxNWUxNCl7Zm9yKDtuPDcmJm4hPTF8fG49PTEmJnQuY2hhckF0KDEpPjM7KWc9Zy50aW1lcyhlKSx0PUooZy5kKSxuPXQuY2hhckF0KDApLGYrKztvPWcuZSxuPjE/KGc9bmV3IFAoXCIwLlwiK3QpLG8rKyk6Zz1uZXcgUChuK1wiLlwiK3Quc2xpY2UoMSkpfWVsc2UgcmV0dXJuIHU9aG4oUCxjKzIsYikudGltZXMobytcIlwiKSxnPUplKG5ldyBQKG4rXCIuXCIrdC5zbGljZSgxKSksYy1oKS5wbHVzKHUpLFAucHJlY2lzaW9uPWIscj09bnVsbD95KGcsYixSLHc9ITApOmc7Zm9yKHA9ZyxsPXM9Zz1MKGcubWludXMoMSksZy5wbHVzKDEpLGMsMSksZD15KGcudGltZXMoZyksYywxKSxpPTM7Oyl7aWYocz15KHMudGltZXMoZCksYywxKSx1PWwucGx1cyhMKHMsbmV3IFAoaSksYywxKSksSih1LmQpLnNsaWNlKDAsYyk9PT1KKGwuZCkuc2xpY2UoMCxjKSlpZihsPWwudGltZXMoMiksbyE9PTAmJihsPWwucGx1cyhobihQLGMrMixiKS50aW1lcyhvK1wiXCIpKSksbD1MKGwsbmV3IFAoZiksYywxKSxyPT1udWxsKWlmKGx0KGwuZCxjLWgsUixhKSlQLnByZWNpc2lvbj1jKz1oLHU9cz1nPUwocC5taW51cygxKSxwLnBsdXMoMSksYywxKSxkPXkoZy50aW1lcyhnKSxjLDEpLGk9YT0xO2Vsc2UgcmV0dXJuIHkobCxQLnByZWNpc2lvbj1iLFIsdz0hMCk7ZWxzZSByZXR1cm4gUC5wcmVjaXNpb249YixsO2w9dSxpKz0yfX1mdW5jdGlvbiBLcyhlKXtyZXR1cm4gU3RyaW5nKGUucyplLnMvMCl9ZnVuY3Rpb24gbW4oZSxyKXt2YXIgdCxuLGk7Zm9yKCh0PXIuaW5kZXhPZihcIi5cIikpPi0xJiYocj1yLnJlcGxhY2UoXCIuXCIsXCJcIikpLChuPXIuc2VhcmNoKC9lL2kpKT4wPyh0PDAmJih0PW4pLHQrPStyLnNsaWNlKG4rMSkscj1yLnN1YnN0cmluZygwLG4pKTp0PDAmJih0PXIubGVuZ3RoKSxuPTA7ci5jaGFyQ29kZUF0KG4pPT09NDg7bisrKTtmb3IoaT1yLmxlbmd0aDtyLmNoYXJDb2RlQXQoaS0xKT09PTQ4Oy0taSk7aWYocj1yLnNsaWNlKG4saSkscil7aWYoaS09bixlLmU9dD10LW4tMSxlLmQ9W10sbj0odCsxKSVFLHQ8MCYmKG4rPUUpLG48aSl7Zm9yKG4mJmUuZC5wdXNoKCtyLnNsaWNlKDAsbikpLGktPUU7bjxpOyllLmQucHVzaCgrci5zbGljZShuLG4rPUUpKTtyPXIuc2xpY2Uobiksbj1FLXIubGVuZ3RofWVsc2Ugbi09aTtmb3IoO24tLTspcis9XCIwXCI7ZS5kLnB1c2goK3IpLHcmJihlLmU+ZS5jb25zdHJ1Y3Rvci5tYXhFPyhlLmQ9bnVsbCxlLmU9TmFOKTplLmU8ZS5jb25zdHJ1Y3Rvci5taW5FJiYoZS5lPTAsZS5kPVswXSkpfWVsc2UgZS5lPTAsZS5kPVswXTtyZXR1cm4gZX1mdW5jdGlvbiBDcChlLHIpe3ZhciB0LG4saSxvLHMsYSxsLHUsYztpZihyLmluZGV4T2YoXCJfXCIpPi0xKXtpZihyPXIucmVwbGFjZSgvKFxcZClfKD89XFxkKS9nLFwiJDFcIiksUXMudGVzdChyKSlyZXR1cm4gbW4oZSxyKX1lbHNlIGlmKHI9PT1cIkluZmluaXR5XCJ8fHI9PT1cIk5hTlwiKXJldHVybityfHwoZS5zPU5hTiksZS5lPU5hTixlLmQ9bnVsbCxlO2lmKFBwLnRlc3QocikpdD0xNixyPXIudG9Mb3dlckNhc2UoKTtlbHNlIGlmKHZwLnRlc3QocikpdD0yO2Vsc2UgaWYoVHAudGVzdChyKSl0PTg7ZWxzZSB0aHJvdyBFcnJvcihIZStyKTtmb3Iobz1yLnNlYXJjaCgvcC9pKSxvPjA/KGw9K3Iuc2xpY2UobysxKSxyPXIuc3Vic3RyaW5nKDIsbykpOnI9ci5zbGljZSgyKSxvPXIuaW5kZXhPZihcIi5cIikscz1vPj0wLG49ZS5jb25zdHJ1Y3RvcixzJiYocj1yLnJlcGxhY2UoXCIuXCIsXCJcIiksYT1yLmxlbmd0aCxvPWEtbyxpPUpzKG4sbmV3IG4odCksbyxvKjIpKSx1PWRuKHIsdCxmZSksYz11Lmxlbmd0aC0xLG89Yzt1W29dPT09MDstLW8pdS5wb3AoKTtyZXR1cm4gbzwwP25ldyBuKGUucyowKTooZS5lPWJuKHUsYyksZS5kPXUsdz0hMSxzJiYoZT1MKGUsaSxhKjQpKSxsJiYoZT1lLnRpbWVzKE1hdGguYWJzKGwpPDU0P1UoMixsKTphci5wb3coMixsKSkpLHc9ITAsZSl9ZnVuY3Rpb24gSXAoZSxyKXt2YXIgdCxuPXIuZC5sZW5ndGg7aWYobjwzKXJldHVybiByLmlzWmVybygpP3I6UHIoZSwyLHIscik7dD0xLjQqTWF0aC5zcXJ0KG4pLHQ9dD4xNj8xNjp0fDAscj1yLnRpbWVzKDEvRW4oNSx0KSkscj1QcihlLDIscixyKTtmb3IodmFyIGksbz1uZXcgZSg1KSxzPW5ldyBlKDE2KSxhPW5ldyBlKDIwKTt0LS07KWk9ci50aW1lcyhyKSxyPXIudGltZXMoby5wbHVzKGkudGltZXMocy50aW1lcyhpKS5taW51cyhhKSkpKTtyZXR1cm4gcn1mdW5jdGlvbiBQcihlLHIsdCxuLGkpe3ZhciBvLHMsYSxsLHU9MSxjPWUucHJlY2lzaW9uLHA9TWF0aC5jZWlsKGMvRSk7Zm9yKHc9ITEsbD10LnRpbWVzKHQpLGE9bmV3IGUobik7Oyl7aWYocz1MKGEudGltZXMobCksbmV3IGUocisrKnIrKyksYywxKSxhPWk/bi5wbHVzKHMpOm4ubWludXMocyksbj1MKHMudGltZXMobCksbmV3IGUocisrKnIrKyksYywxKSxzPWEucGx1cyhuKSxzLmRbcF0hPT12b2lkIDApe2ZvcihvPXA7cy5kW29dPT09YS5kW29dJiZvLS07KTtpZihvPT0tMSlicmVha31vPWEsYT1uLG49cyxzPW8sdSsrfXJldHVybiB3PSEwLHMuZC5sZW5ndGg9cCsxLHN9ZnVuY3Rpb24gRW4oZSxyKXtmb3IodmFyIHQ9ZTstLXI7KXQqPWU7cmV0dXJuIHR9ZnVuY3Rpb24gWXMoZSxyKXt2YXIgdCxuPXIuczwwLGk9d2UoZSxlLnByZWNpc2lvbiwxKSxvPWkudGltZXMoLjUpO2lmKHI9ci5hYnMoKSxyLmx0ZShvKSlyZXR1cm4gRmU9bj80OjEscjtpZih0PXIuZGl2VG9JbnQoaSksdC5pc1plcm8oKSlGZT1uPzM6MjtlbHNle2lmKHI9ci5taW51cyh0LnRpbWVzKGkpKSxyLmx0ZShvKSlyZXR1cm4gRmU9JHModCk/bj8yOjM6bj80OjEscjtGZT0kcyh0KT9uPzE6NDpuPzM6Mn1yZXR1cm4gci5taW51cyhpKS5hYnMoKX1mdW5jdGlvbiBKaShlLHIsdCxuKXt2YXIgaSxvLHMsYSxsLHUsYyxwLGQsZj1lLmNvbnN0cnVjdG9yLGg9dCE9PXZvaWQgMDtpZihoPyhpZSh0LDEsS2UpLG49PT12b2lkIDA/bj1mLnJvdW5kaW5nOmllKG4sMCw4KSk6KHQ9Zi5wcmVjaXNpb24sbj1mLnJvdW5kaW5nKSwhZS5pc0Zpbml0ZSgpKWM9S3MoZSk7ZWxzZXtmb3IoYz14ZShlKSxzPWMuaW5kZXhPZihcIi5cIiksaD8oaT0yLHI9PTE2P3Q9dCo0LTM6cj09OCYmKHQ9dCozLTIpKTppPXIscz49MCYmKGM9Yy5yZXBsYWNlKFwiLlwiLFwiXCIpLGQ9bmV3IGYoMSksZC5lPWMubGVuZ3RoLXMsZC5kPWRuKHhlKGQpLDEwLGkpLGQuZT1kLmQubGVuZ3RoKSxwPWRuKGMsMTAsaSksbz1sPXAubGVuZ3RoO3BbLS1sXT09MDspcC5wb3AoKTtpZighcFswXSljPWg/XCIwcCswXCI6XCIwXCI7ZWxzZXtpZihzPDA/by0tOihlPW5ldyBmKGUpLGUuZD1wLGUuZT1vLGU9TChlLGQsdCxuLDAsaSkscD1lLmQsbz1lLmUsdT1Wcykscz1wW3RdLGE9aS8yLHU9dXx8cFt0KzFdIT09dm9pZCAwLHU9bjw0PyhzIT09dm9pZCAwfHx1KSYmKG49PT0wfHxuPT09KGUuczwwPzM6MikpOnM+YXx8cz09PWEmJihuPT09NHx8dXx8bj09PTYmJnBbdC0xXSYxfHxuPT09KGUuczwwPzg6NykpLHAubGVuZ3RoPXQsdSlmb3IoOysrcFstLXRdPmktMTspcFt0XT0wLHR8fCgrK28scC51bnNoaWZ0KDEpKTtmb3IobD1wLmxlbmd0aDshcFtsLTFdOy0tbCk7Zm9yKHM9MCxjPVwiXCI7czxsO3MrKyljKz1VaS5jaGFyQXQocFtzXSk7aWYoaCl7aWYobD4xKWlmKHI9PTE2fHxyPT04KXtmb3Iocz1yPT0xNj80OjMsLS1sO2wlcztsKyspYys9XCIwXCI7Zm9yKHA9ZG4oYyxpLHIpLGw9cC5sZW5ndGg7IXBbbC0xXTstLWwpO2ZvcihzPTEsYz1cIjEuXCI7czxsO3MrKyljKz1VaS5jaGFyQXQocFtzXSl9ZWxzZSBjPWMuY2hhckF0KDApK1wiLlwiK2Muc2xpY2UoMSk7Yz1jKyhvPDA/XCJwXCI6XCJwK1wiKStvfWVsc2UgaWYobzwwKXtmb3IoOysrbzspYz1cIjBcIitjO2M9XCIwLlwiK2N9ZWxzZSBpZigrK28+bClmb3Ioby09bDtvLS07KWMrPVwiMFwiO2Vsc2UgbzxsJiYoYz1jLnNsaWNlKDAsbykrXCIuXCIrYy5zbGljZShvKSl9Yz0ocj09MTY/XCIweFwiOnI9PTI/XCIwYlwiOnI9PTg/XCIwb1wiOlwiXCIpK2N9cmV0dXJuIGUuczwwP1wiLVwiK2M6Y31mdW5jdGlvbiBxcyhlLHIpe2lmKGUubGVuZ3RoPnIpcmV0dXJuIGUubGVuZ3RoPXIsITB9ZnVuY3Rpb24ga3AoZSl7cmV0dXJuIG5ldyB0aGlzKGUpLmFicygpfWZ1bmN0aW9uIERwKGUpe3JldHVybiBuZXcgdGhpcyhlKS5hY29zKCl9ZnVuY3Rpb24gT3AoZSl7cmV0dXJuIG5ldyB0aGlzKGUpLmFjb3NoKCl9ZnVuY3Rpb24gX3AoZSxyKXtyZXR1cm4gbmV3IHRoaXMoZSkucGx1cyhyKX1mdW5jdGlvbiBOcChlKXtyZXR1cm4gbmV3IHRoaXMoZSkuYXNpbigpfWZ1bmN0aW9uIExwKGUpe3JldHVybiBuZXcgdGhpcyhlKS5hc2luaCgpfWZ1bmN0aW9uIEZwKGUpe3JldHVybiBuZXcgdGhpcyhlKS5hdGFuKCl9ZnVuY3Rpb24gTXAoZSl7cmV0dXJuIG5ldyB0aGlzKGUpLmF0YW5oKCl9ZnVuY3Rpb24gJHAoZSxyKXtlPW5ldyB0aGlzKGUpLHI9bmV3IHRoaXMocik7dmFyIHQsbj10aGlzLnByZWNpc2lvbixpPXRoaXMucm91bmRpbmcsbz1uKzQ7cmV0dXJuIWUuc3x8IXIucz90PW5ldyB0aGlzKE5hTik6IWUuZCYmIXIuZD8odD13ZSh0aGlzLG8sMSkudGltZXMoci5zPjA/LjI1Oi43NSksdC5zPWUucyk6IXIuZHx8ZS5pc1plcm8oKT8odD1yLnM8MD93ZSh0aGlzLG4saSk6bmV3IHRoaXMoMCksdC5zPWUucyk6IWUuZHx8ci5pc1plcm8oKT8odD13ZSh0aGlzLG8sMSkudGltZXMoLjUpLHQucz1lLnMpOnIuczwwPyh0aGlzLnByZWNpc2lvbj1vLHRoaXMucm91bmRpbmc9MSx0PXRoaXMuYXRhbihMKGUscixvLDEpKSxyPXdlKHRoaXMsbywxKSx0aGlzLnByZWNpc2lvbj1uLHRoaXMucm91bmRpbmc9aSx0PWUuczwwP3QubWludXMocik6dC5wbHVzKHIpKTp0PXRoaXMuYXRhbihMKGUscixvLDEpKSx0fWZ1bmN0aW9uIHFwKGUpe3JldHVybiBuZXcgdGhpcyhlKS5jYnJ0KCl9ZnVuY3Rpb24ganAoZSl7cmV0dXJuIHkoZT1uZXcgdGhpcyhlKSxlLmUrMSwyKX1mdW5jdGlvbiBWcChlLHIsdCl7cmV0dXJuIG5ldyB0aGlzKGUpLmNsYW1wKHIsdCl9ZnVuY3Rpb24gQnAoZSl7aWYoIWV8fHR5cGVvZiBlIT1cIm9iamVjdFwiKXRocm93IEVycm9yKHluK1wiT2JqZWN0IGV4cGVjdGVkXCIpO3ZhciByLHQsbixpPWUuZGVmYXVsdHM9PT0hMCxvPVtcInByZWNpc2lvblwiLDEsS2UsXCJyb3VuZGluZ1wiLDAsOCxcInRvRXhwTmVnXCIsLXZyLDAsXCJ0b0V4cFBvc1wiLDAsdnIsXCJtYXhFXCIsMCx2cixcIm1pbkVcIiwtdnIsMCxcIm1vZHVsb1wiLDAsOV07Zm9yKHI9MDtyPG8ubGVuZ3RoO3IrPTMpaWYodD1vW3JdLGkmJih0aGlzW3RdPUdpW3RdKSwobj1lW3RdKSE9PXZvaWQgMClpZihYKG4pPT09biYmbj49b1tyKzFdJiZuPD1vW3IrMl0pdGhpc1t0XT1uO2Vsc2UgdGhyb3cgRXJyb3IoSGUrdCtcIjogXCIrbik7aWYodD1cImNyeXB0b1wiLGkmJih0aGlzW3RdPUdpW3RdKSwobj1lW3RdKSE9PXZvaWQgMClpZihuPT09ITB8fG49PT0hMXx8bj09PTB8fG49PT0xKWlmKG4paWYodHlwZW9mIGNyeXB0bzxcInVcIiYmY3J5cHRvJiYoY3J5cHRvLmdldFJhbmRvbVZhbHVlc3x8Y3J5cHRvLnJhbmRvbUJ5dGVzKSl0aGlzW3RdPSEwO2Vsc2UgdGhyb3cgRXJyb3IoVXMpO2Vsc2UgdGhpc1t0XT0hMTtlbHNlIHRocm93IEVycm9yKEhlK3QrXCI6IFwiK24pO3JldHVybiB0aGlzfWZ1bmN0aW9uIFVwKGUpe3JldHVybiBuZXcgdGhpcyhlKS5jb3MoKX1mdW5jdGlvbiBHcChlKXtyZXR1cm4gbmV3IHRoaXMoZSkuY29zaCgpfWZ1bmN0aW9uIHpzKGUpe3ZhciByLHQsbjtmdW5jdGlvbiBpKG8pe3ZhciBzLGEsbCx1PXRoaXM7aWYoISh1IGluc3RhbmNlb2YgaSkpcmV0dXJuIG5ldyBpKG8pO2lmKHUuY29uc3RydWN0b3I9aSxqcyhvKSl7dS5zPW8ucyx3PyFvLmR8fG8uZT5pLm1heEU/KHUuZT1OYU4sdS5kPW51bGwpOm8uZTxpLm1pbkU/KHUuZT0wLHUuZD1bMF0pOih1LmU9by5lLHUuZD1vLmQuc2xpY2UoKSk6KHUuZT1vLmUsdS5kPW8uZD9vLmQuc2xpY2UoKTpvLmQpO3JldHVybn1pZihsPXR5cGVvZiBvLGw9PT1cIm51bWJlclwiKXtpZihvPT09MCl7dS5zPTEvbzwwPy0xOjEsdS5lPTAsdS5kPVswXTtyZXR1cm59aWYobzwwPyhvPS1vLHUucz0tMSk6dS5zPTEsbz09PX5+byYmbzwxZTcpe2ZvcihzPTAsYT1vO2E+PTEwO2EvPTEwKXMrKzt3P3M+aS5tYXhFPyh1LmU9TmFOLHUuZD1udWxsKTpzPGkubWluRT8odS5lPTAsdS5kPVswXSk6KHUuZT1zLHUuZD1bb10pOih1LmU9cyx1LmQ9W29dKTtyZXR1cm59aWYobyowIT09MCl7b3x8KHUucz1OYU4pLHUuZT1OYU4sdS5kPW51bGw7cmV0dXJufXJldHVybiBtbih1LG8udG9TdHJpbmcoKSl9aWYobD09PVwic3RyaW5nXCIpcmV0dXJuKGE9by5jaGFyQ29kZUF0KDApKT09PTQ1PyhvPW8uc2xpY2UoMSksdS5zPS0xKTooYT09PTQzJiYobz1vLnNsaWNlKDEpKSx1LnM9MSksUXMudGVzdChvKT9tbih1LG8pOkNwKHUsbyk7aWYobD09PVwiYmlnaW50XCIpcmV0dXJuIG88MD8obz0tbyx1LnM9LTEpOnUucz0xLG1uKHUsby50b1N0cmluZygpKTt0aHJvdyBFcnJvcihIZStvKX1pZihpLnByb3RvdHlwZT1tLGkuUk9VTkRfVVA9MCxpLlJPVU5EX0RPV049MSxpLlJPVU5EX0NFSUw9MixpLlJPVU5EX0ZMT09SPTMsaS5ST1VORF9IQUxGX1VQPTQsaS5ST1VORF9IQUxGX0RPV049NSxpLlJPVU5EX0hBTEZfRVZFTj02LGkuUk9VTkRfSEFMRl9DRUlMPTcsaS5ST1VORF9IQUxGX0ZMT09SPTgsaS5FVUNMSUQ9OSxpLmNvbmZpZz1pLnNldD1CcCxpLmNsb25lPXpzLGkuaXNEZWNpbWFsPWpzLGkuYWJzPWtwLGkuYWNvcz1EcCxpLmFjb3NoPU9wLGkuYWRkPV9wLGkuYXNpbj1OcCxpLmFzaW5oPUxwLGkuYXRhbj1GcCxpLmF0YW5oPU1wLGkuYXRhbjI9JHAsaS5jYnJ0PXFwLGkuY2VpbD1qcCxpLmNsYW1wPVZwLGkuY29zPVVwLGkuY29zaD1HcCxpLmRpdj1RcCxpLmV4cD1XcCxpLmZsb29yPUpwLGkuaHlwb3Q9SHAsaS5sbj1LcCxpLmxvZz1ZcCxpLmxvZzEwPVpwLGkubG9nMj16cCxpLm1heD1YcCxpLm1pbj1lZCxpLm1vZD1yZCxpLm11bD10ZCxpLnBvdz1uZCxpLnJhbmRvbT1pZCxpLnJvdW5kPW9kLGkuc2lnbj1zZCxpLnNpbj1hZCxpLnNpbmg9bGQsaS5zcXJ0PXVkLGkuc3ViPWNkLGkuc3VtPXBkLGkudGFuPWRkLGkudGFuaD1tZCxpLnRydW5jPWZkLGU9PT12b2lkIDAmJihlPXt9KSxlJiZlLmRlZmF1bHRzIT09ITApZm9yKG49W1wicHJlY2lzaW9uXCIsXCJyb3VuZGluZ1wiLFwidG9FeHBOZWdcIixcInRvRXhwUG9zXCIsXCJtYXhFXCIsXCJtaW5FXCIsXCJtb2R1bG9cIixcImNyeXB0b1wiXSxyPTA7cjxuLmxlbmd0aDspZS5oYXNPd25Qcm9wZXJ0eSh0PW5bcisrXSl8fChlW3RdPXRoaXNbdF0pO3JldHVybiBpLmNvbmZpZyhlKSxpfWZ1bmN0aW9uIFFwKGUscil7cmV0dXJuIG5ldyB0aGlzKGUpLmRpdihyKX1mdW5jdGlvbiBXcChlKXtyZXR1cm4gbmV3IHRoaXMoZSkuZXhwKCl9ZnVuY3Rpb24gSnAoZSl7cmV0dXJuIHkoZT1uZXcgdGhpcyhlKSxlLmUrMSwzKX1mdW5jdGlvbiBIcCgpe3ZhciBlLHIsdD1uZXcgdGhpcygwKTtmb3Iodz0hMSxlPTA7ZTxhcmd1bWVudHMubGVuZ3RoOylpZihyPW5ldyB0aGlzKGFyZ3VtZW50c1tlKytdKSxyLmQpdC5kJiYodD10LnBsdXMoci50aW1lcyhyKSkpO2Vsc2V7aWYoci5zKXJldHVybiB3PSEwLG5ldyB0aGlzKDEvMCk7dD1yfXJldHVybiB3PSEwLHQuc3FydCgpfWZ1bmN0aW9uIGpzKGUpe3JldHVybiBlIGluc3RhbmNlb2YgYXJ8fGUmJmUudG9TdHJpbmdUYWc9PT1Hc3x8ITF9ZnVuY3Rpb24gS3AoZSl7cmV0dXJuIG5ldyB0aGlzKGUpLmxuKCl9ZnVuY3Rpb24gWXAoZSxyKXtyZXR1cm4gbmV3IHRoaXMoZSkubG9nKHIpfWZ1bmN0aW9uIHpwKGUpe3JldHVybiBuZXcgdGhpcyhlKS5sb2coMil9ZnVuY3Rpb24gWnAoZSl7cmV0dXJuIG5ldyB0aGlzKGUpLmxvZygxMCl9ZnVuY3Rpb24gWHAoKXtyZXR1cm4gSHModGhpcyxhcmd1bWVudHMsLTEpfWZ1bmN0aW9uIGVkKCl7cmV0dXJuIEhzKHRoaXMsYXJndW1lbnRzLDEpfWZ1bmN0aW9uIHJkKGUscil7cmV0dXJuIG5ldyB0aGlzKGUpLm1vZChyKX1mdW5jdGlvbiB0ZChlLHIpe3JldHVybiBuZXcgdGhpcyhlKS5tdWwocil9ZnVuY3Rpb24gbmQoZSxyKXtyZXR1cm4gbmV3IHRoaXMoZSkucG93KHIpfWZ1bmN0aW9uIGlkKGUpe3ZhciByLHQsbixpLG89MCxzPW5ldyB0aGlzKDEpLGE9W107aWYoZT09PXZvaWQgMD9lPXRoaXMucHJlY2lzaW9uOmllKGUsMSxLZSksbj1NYXRoLmNlaWwoZS9FKSx0aGlzLmNyeXB0bylpZihjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKWZvcihyPWNyeXB0by5nZXRSYW5kb21WYWx1ZXMobmV3IFVpbnQzMkFycmF5KG4pKTtvPG47KWk9cltvXSxpPj00MjllNz9yW29dPWNyeXB0by5nZXRSYW5kb21WYWx1ZXMobmV3IFVpbnQzMkFycmF5KDEpKVswXTphW28rK109aSUxZTc7ZWxzZSBpZihjcnlwdG8ucmFuZG9tQnl0ZXMpe2ZvcihyPWNyeXB0by5yYW5kb21CeXRlcyhuKj00KTtvPG47KWk9cltvXSsocltvKzFdPDw4KSsocltvKzJdPDwxNikrKChyW28rM10mMTI3KTw8MjQpLGk+PTIxNGU3P2NyeXB0by5yYW5kb21CeXRlcyg0KS5jb3B5KHIsbyk6KGEucHVzaChpJTFlNyksbys9NCk7bz1uLzR9ZWxzZSB0aHJvdyBFcnJvcihVcyk7ZWxzZSBmb3IoO288bjspYVtvKytdPU1hdGgucmFuZG9tKCkqMWU3fDA7Zm9yKG49YVstLW9dLGUlPUUsbiYmZSYmKGk9VSgxMCxFLWUpLGFbb109KG4vaXwwKSppKTthW29dPT09MDtvLS0pYS5wb3AoKTtpZihvPDApdD0wLGE9WzBdO2Vsc2V7Zm9yKHQ9LTE7YVswXT09PTA7dC09RSlhLnNoaWZ0KCk7Zm9yKG49MSxpPWFbMF07aT49MTA7aS89MTApbisrO248RSYmKHQtPUUtbil9cmV0dXJuIHMuZT10LHMuZD1hLHN9ZnVuY3Rpb24gb2QoZSl7cmV0dXJuIHkoZT1uZXcgdGhpcyhlKSxlLmUrMSx0aGlzLnJvdW5kaW5nKX1mdW5jdGlvbiBzZChlKXtyZXR1cm4gZT1uZXcgdGhpcyhlKSxlLmQ/ZS5kWzBdP2UuczowKmUuczplLnN8fE5hTn1mdW5jdGlvbiBhZChlKXtyZXR1cm4gbmV3IHRoaXMoZSkuc2luKCl9ZnVuY3Rpb24gbGQoZSl7cmV0dXJuIG5ldyB0aGlzKGUpLnNpbmgoKX1mdW5jdGlvbiB1ZChlKXtyZXR1cm4gbmV3IHRoaXMoZSkuc3FydCgpfWZ1bmN0aW9uIGNkKGUscil7cmV0dXJuIG5ldyB0aGlzKGUpLnN1YihyKX1mdW5jdGlvbiBwZCgpe3ZhciBlPTAscj1hcmd1bWVudHMsdD1uZXcgdGhpcyhyW2VdKTtmb3Iodz0hMTt0LnMmJisrZTxyLmxlbmd0aDspdD10LnBsdXMocltlXSk7cmV0dXJuIHc9ITAseSh0LHRoaXMucHJlY2lzaW9uLHRoaXMucm91bmRpbmcpfWZ1bmN0aW9uIGRkKGUpe3JldHVybiBuZXcgdGhpcyhlKS50YW4oKX1mdW5jdGlvbiBtZChlKXtyZXR1cm4gbmV3IHRoaXMoZSkudGFuaCgpfWZ1bmN0aW9uIGZkKGUpe3JldHVybiB5KGU9bmV3IHRoaXMoZSksZS5lKzEsMSl9bVtTeW1ib2wuZm9yKFwibm9kZWpzLnV0aWwuaW5zcGVjdC5jdXN0b21cIildPW0udG9TdHJpbmc7bVtTeW1ib2wudG9TdHJpbmdUYWddPVwiRGVjaW1hbFwiO3ZhciBhcj1tLmNvbnN0cnVjdG9yPXpzKEdpKTtmbj1uZXcgYXIoZm4pO2duPW5ldyBhcihnbik7dmFyIHZlPWFyO2Z1bmN0aW9uIFRyKGUpe3JldHVybiBlPT09bnVsbD9lOkFycmF5LmlzQXJyYXkoZSk/ZS5tYXAoVHIpOnR5cGVvZiBlPT1cIm9iamVjdFwiP2dkKGUpP2hkKGUpOmUuY29uc3RydWN0b3IhPT1udWxsJiZlLmNvbnN0cnVjdG9yLm5hbWUhPT1cIk9iamVjdFwiP2U6eHIoZSxUcik6ZX1mdW5jdGlvbiBnZChlKXtyZXR1cm4gZSE9PW51bGwmJnR5cGVvZiBlPT1cIm9iamVjdFwiJiZ0eXBlb2YgZS4kdHlwZT09XCJzdHJpbmdcIn1mdW5jdGlvbiBoZCh7JHR5cGU6ZSx2YWx1ZTpyfSl7c3dpdGNoKGUpe2Nhc2VcIkJpZ0ludFwiOnJldHVybiBCaWdJbnQocik7Y2FzZVwiQnl0ZXNcIjp7bGV0e2J1ZmZlcjp0LGJ5dGVPZmZzZXQ6bixieXRlTGVuZ3RoOml9PUJ1ZmZlci5mcm9tKHIsXCJiYXNlNjRcIik7cmV0dXJuIG5ldyBVaW50OEFycmF5KHQsbixpKX1jYXNlXCJEYXRlVGltZVwiOnJldHVybiBuZXcgRGF0ZShyKTtjYXNlXCJEZWNpbWFsXCI6cmV0dXJuIG5ldyB2ZShyKTtjYXNlXCJKc29uXCI6cmV0dXJuIEpTT04ucGFyc2Uocik7ZGVmYXVsdDpOZShyLFwiVW5rbm93biB0YWdnZWQgdmFsdWVcIil9fXZhciBQZT1jbGFzc3tfbWFwPW5ldyBNYXA7Z2V0KHIpe3JldHVybiB0aGlzLl9tYXAuZ2V0KHIpPy52YWx1ZX1zZXQocix0KXt0aGlzLl9tYXAuc2V0KHIse3ZhbHVlOnR9KX1nZXRPckNyZWF0ZShyLHQpe2xldCBuPXRoaXMuX21hcC5nZXQocik7aWYobilyZXR1cm4gbi52YWx1ZTtsZXQgaT10KCk7cmV0dXJuIHRoaXMuc2V0KHIsaSksaX19O2Z1bmN0aW9uIFllKGUpe3JldHVybiBlLnN1YnN0cmluZygwLDEpLnRvTG93ZXJDYXNlKCkrZS5zdWJzdHJpbmcoMSl9ZnVuY3Rpb24gWnMoZSxyKXtsZXQgdD17fTtmb3IobGV0IG4gb2YgZSl7bGV0IGk9bltyXTt0W2ldPW59cmV0dXJuIHR9ZnVuY3Rpb24gdXQoZSl7bGV0IHI7cmV0dXJue2dldCgpe3JldHVybiByfHwocj17dmFsdWU6ZSgpfSksci52YWx1ZX19fWZ1bmN0aW9uIFhzKGUpe3JldHVybnttb2RlbHM6SGkoZS5tb2RlbHMpLGVudW1zOkhpKGUuZW51bXMpLHR5cGVzOkhpKGUudHlwZXMpfX1mdW5jdGlvbiBIaShlKXtsZXQgcj17fTtmb3IobGV0e25hbWU6dCwuLi5ufW9mIGUpclt0XT1uO3JldHVybiByfWZ1bmN0aW9uIFNyKGUpe3JldHVybiBlIGluc3RhbmNlb2YgRGF0ZXx8T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUpPT09XCJbb2JqZWN0IERhdGVdXCJ9ZnVuY3Rpb24gd24oZSl7cmV0dXJuIGUudG9TdHJpbmcoKSE9PVwiSW52YWxpZCBEYXRlXCJ9ZnVuY3Rpb24gUnIoZSl7cmV0dXJuIGFyLmlzRGVjaW1hbChlKT8hMDplIT09bnVsbCYmdHlwZW9mIGU9PVwib2JqZWN0XCImJnR5cGVvZiBlLnM9PVwibnVtYmVyXCImJnR5cGVvZiBlLmU9PVwibnVtYmVyXCImJnR5cGVvZiBlLnRvRml4ZWQ9PVwiZnVuY3Rpb25cIiYmQXJyYXkuaXNBcnJheShlLmQpfXZhciBjdD17fTt0cihjdCx7TW9kZWxBY3Rpb246KCk9PkFyLGRhdGFtb2RlbEVudW1Ub1NjaGVtYUVudW06KCk9PnlkfSk7ZnVuY3Rpb24geWQoZSl7cmV0dXJue25hbWU6ZS5uYW1lLHZhbHVlczplLnZhbHVlcy5tYXAocj0+ci5uYW1lKX19dmFyIEFyPShiPT4oYi5maW5kVW5pcXVlPVwiZmluZFVuaXF1ZVwiLGIuZmluZFVuaXF1ZU9yVGhyb3c9XCJmaW5kVW5pcXVlT3JUaHJvd1wiLGIuZmluZEZpcnN0PVwiZmluZEZpcnN0XCIsYi5maW5kRmlyc3RPclRocm93PVwiZmluZEZpcnN0T3JUaHJvd1wiLGIuZmluZE1hbnk9XCJmaW5kTWFueVwiLGIuY3JlYXRlPVwiY3JlYXRlXCIsYi5jcmVhdGVNYW55PVwiY3JlYXRlTWFueVwiLGIuY3JlYXRlTWFueUFuZFJldHVybj1cImNyZWF0ZU1hbnlBbmRSZXR1cm5cIixiLnVwZGF0ZT1cInVwZGF0ZVwiLGIudXBkYXRlTWFueT1cInVwZGF0ZU1hbnlcIixiLnVwZGF0ZU1hbnlBbmRSZXR1cm49XCJ1cGRhdGVNYW55QW5kUmV0dXJuXCIsYi51cHNlcnQ9XCJ1cHNlcnRcIixiLmRlbGV0ZT1cImRlbGV0ZVwiLGIuZGVsZXRlTWFueT1cImRlbGV0ZU1hbnlcIixiLmdyb3VwQnk9XCJncm91cEJ5XCIsYi5jb3VudD1cImNvdW50XCIsYi5hZ2dyZWdhdGU9XCJhZ2dyZWdhdGVcIixiLmZpbmRSYXc9XCJmaW5kUmF3XCIsYi5hZ2dyZWdhdGVSYXc9XCJhZ2dyZWdhdGVSYXdcIixiKSkoQXJ8fHt9KTt2YXIgaWE9QyhEaSgpKTt2YXIgbmE9QyhyZXF1aXJlKFwibm9kZTpmc1wiKSk7dmFyIGVhPXtrZXl3b3JkOkRlLGVudGl0eTpEZSx2YWx1ZTplPT5XKG5yKGUpKSxwdW5jdHVhdGlvbjpucixkaXJlY3RpdmU6RGUsZnVuY3Rpb246RGUsdmFyaWFibGU6ZT0+VyhucihlKSksc3RyaW5nOmU9PlcocWUoZSkpLGJvb2xlYW46a2UsbnVtYmVyOkRlLGNvbW1lbnQ6S3J9O3ZhciBiZD1lPT5lLHhuPXt9LEVkPTAsdj17bWFudWFsOnhuLlByaXNtJiZ4bi5QcmlzbS5tYW51YWwsZGlzYWJsZVdvcmtlck1lc3NhZ2VIYW5kbGVyOnhuLlByaXNtJiZ4bi5QcmlzbS5kaXNhYmxlV29ya2VyTWVzc2FnZUhhbmRsZXIsdXRpbDp7ZW5jb2RlOmZ1bmN0aW9uKGUpe2lmKGUgaW5zdGFuY2VvZiBnZSl7bGV0IHI9ZTtyZXR1cm4gbmV3IGdlKHIudHlwZSx2LnV0aWwuZW5jb2RlKHIuY29udGVudCksci5hbGlhcyl9ZWxzZSByZXR1cm4gQXJyYXkuaXNBcnJheShlKT9lLm1hcCh2LnV0aWwuZW5jb2RlKTplLnJlcGxhY2UoLyYvZyxcIiZhbXA7XCIpLnJlcGxhY2UoLzwvZyxcIiZsdDtcIikucmVwbGFjZSgvXFx1MDBhMC9nLFwiIFwiKX0sdHlwZTpmdW5jdGlvbihlKXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUpLnNsaWNlKDgsLTEpfSxvYmpJZDpmdW5jdGlvbihlKXtyZXR1cm4gZS5fX2lkfHxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9faWRcIix7dmFsdWU6KytFZH0pLGUuX19pZH0sY2xvbmU6ZnVuY3Rpb24gZShyLHQpe2xldCBuLGksbz12LnV0aWwudHlwZShyKTtzd2l0Y2godD10fHx7fSxvKXtjYXNlXCJPYmplY3RcIjppZihpPXYudXRpbC5vYmpJZChyKSx0W2ldKXJldHVybiB0W2ldO249e30sdFtpXT1uO2ZvcihsZXQgcyBpbiByKXIuaGFzT3duUHJvcGVydHkocykmJihuW3NdPWUocltzXSx0KSk7cmV0dXJuIG47Y2FzZVwiQXJyYXlcIjpyZXR1cm4gaT12LnV0aWwub2JqSWQociksdFtpXT90W2ldOihuPVtdLHRbaV09bixyLmZvckVhY2goZnVuY3Rpb24ocyxhKXtuW2FdPWUocyx0KX0pLG4pO2RlZmF1bHQ6cmV0dXJuIHJ9fX0sbGFuZ3VhZ2VzOntleHRlbmQ6ZnVuY3Rpb24oZSxyKXtsZXQgdD12LnV0aWwuY2xvbmUodi5sYW5ndWFnZXNbZV0pO2ZvcihsZXQgbiBpbiByKXRbbl09cltuXTtyZXR1cm4gdH0saW5zZXJ0QmVmb3JlOmZ1bmN0aW9uKGUscix0LG4pe249bnx8di5sYW5ndWFnZXM7bGV0IGk9bltlXSxvPXt9O2ZvcihsZXQgYSBpbiBpKWlmKGkuaGFzT3duUHJvcGVydHkoYSkpe2lmKGE9PXIpZm9yKGxldCBsIGluIHQpdC5oYXNPd25Qcm9wZXJ0eShsKSYmKG9bbF09dFtsXSk7dC5oYXNPd25Qcm9wZXJ0eShhKXx8KG9bYV09aVthXSl9bGV0IHM9bltlXTtyZXR1cm4gbltlXT1vLHYubGFuZ3VhZ2VzLkRGUyh2Lmxhbmd1YWdlcyxmdW5jdGlvbihhLGwpe2w9PT1zJiZhIT1lJiYodGhpc1thXT1vKX0pLG99LERGUzpmdW5jdGlvbiBlKHIsdCxuLGkpe2k9aXx8e307bGV0IG89di51dGlsLm9iaklkO2ZvcihsZXQgcyBpbiByKWlmKHIuaGFzT3duUHJvcGVydHkocykpe3QuY2FsbChyLHMscltzXSxufHxzKTtsZXQgYT1yW3NdLGw9di51dGlsLnR5cGUoYSk7bD09PVwiT2JqZWN0XCImJiFpW28oYSldPyhpW28oYSldPSEwLGUoYSx0LG51bGwsaSkpOmw9PT1cIkFycmF5XCImJiFpW28oYSldJiYoaVtvKGEpXT0hMCxlKGEsdCxzLGkpKX19fSxwbHVnaW5zOnt9LGhpZ2hsaWdodDpmdW5jdGlvbihlLHIsdCl7bGV0IG49e2NvZGU6ZSxncmFtbWFyOnIsbGFuZ3VhZ2U6dH07cmV0dXJuIHYuaG9va3MucnVuKFwiYmVmb3JlLXRva2VuaXplXCIsbiksbi50b2tlbnM9di50b2tlbml6ZShuLmNvZGUsbi5ncmFtbWFyKSx2Lmhvb2tzLnJ1bihcImFmdGVyLXRva2VuaXplXCIsbiksZ2Uuc3RyaW5naWZ5KHYudXRpbC5lbmNvZGUobi50b2tlbnMpLG4ubGFuZ3VhZ2UpfSxtYXRjaEdyYW1tYXI6ZnVuY3Rpb24oZSxyLHQsbixpLG8scyl7Zm9yKGxldCBnIGluIHQpe2lmKCF0Lmhhc093blByb3BlcnR5KGcpfHwhdFtnXSljb250aW51ZTtpZihnPT1zKXJldHVybjtsZXQgUz10W2ddO1M9di51dGlsLnR5cGUoUyk9PT1cIkFycmF5XCI/UzpbU107Zm9yKGxldCBQPTA7UDxTLmxlbmd0aDsrK1Ape2xldCBSPVNbUF0sYj1SLmluc2lkZSxEPSEhUi5sb29rYmVoaW5kLG1lPSEhUi5ncmVlZHksYWU9MCxIcj1SLmFsaWFzO2lmKG1lJiYhUi5wYXR0ZXJuLmdsb2JhbCl7bGV0IFY9Ui5wYXR0ZXJuLnRvU3RyaW5nKCkubWF0Y2goL1tpbXV5XSokLylbMF07Ui5wYXR0ZXJuPVJlZ0V4cChSLnBhdHRlcm4uc291cmNlLFYrXCJnXCIpfVI9Ui5wYXR0ZXJufHxSO2ZvcihsZXQgVj1uLHRlPWk7VjxyLmxlbmd0aDt0ZSs9cltWXS5sZW5ndGgsKytWKXtsZXQgQ2U9cltWXTtpZihyLmxlbmd0aD5lLmxlbmd0aClyZXR1cm47aWYoQ2UgaW5zdGFuY2VvZiBnZSljb250aW51ZTtpZihtZSYmViE9ci5sZW5ndGgtMSl7Ui5sYXN0SW5kZXg9dGU7dmFyIHA9Ui5leGVjKGUpO2lmKCFwKWJyZWFrO3ZhciBjPXAuaW5kZXgrKEQ/cFsxXS5sZW5ndGg6MCksZD1wLmluZGV4K3BbMF0ubGVuZ3RoLGE9VixsPXRlO2ZvcihsZXQgXz1yLmxlbmd0aDthPF8mJihsPGR8fCFyW2FdLnR5cGUmJiFyW2EtMV0uZ3JlZWR5KTsrK2EpbCs9clthXS5sZW5ndGgsYz49bCYmKCsrVix0ZT1sKTtpZihyW1ZdaW5zdGFuY2VvZiBnZSljb250aW51ZTt1PWEtVixDZT1lLnNsaWNlKHRlLGwpLHAuaW5kZXgtPXRlfWVsc2V7Ui5sYXN0SW5kZXg9MDt2YXIgcD1SLmV4ZWMoQ2UpLHU9MX1pZighcCl7aWYobylicmVhaztjb250aW51ZX1EJiYoYWU9cFsxXT9wWzFdLmxlbmd0aDowKTt2YXIgYz1wLmluZGV4K2FlLHA9cFswXS5zbGljZShhZSksZD1jK3AubGVuZ3RoLGY9Q2Uuc2xpY2UoMCxjKSxoPUNlLnNsaWNlKGQpO2xldCBIPVtWLHVdO2YmJigrK1YsdGUrPWYubGVuZ3RoLEgucHVzaChmKSk7bGV0IGZyPW5ldyBnZShnLGI/di50b2tlbml6ZShwLGIpOnAsSHIscCxtZSk7aWYoSC5wdXNoKGZyKSxoJiZILnB1c2goaCksQXJyYXkucHJvdG90eXBlLnNwbGljZS5hcHBseShyLEgpLHUhPTEmJnYubWF0Y2hHcmFtbWFyKGUscix0LFYsdGUsITAsZyksbylicmVha319fX0sdG9rZW5pemU6ZnVuY3Rpb24oZSxyKXtsZXQgdD1bZV0sbj1yLnJlc3Q7aWYobil7Zm9yKGxldCBpIGluIG4pcltpXT1uW2ldO2RlbGV0ZSByLnJlc3R9cmV0dXJuIHYubWF0Y2hHcmFtbWFyKGUsdCxyLDAsMCwhMSksdH0saG9va3M6e2FsbDp7fSxhZGQ6ZnVuY3Rpb24oZSxyKXtsZXQgdD12Lmhvb2tzLmFsbDt0W2VdPXRbZV18fFtdLHRbZV0ucHVzaChyKX0scnVuOmZ1bmN0aW9uKGUscil7bGV0IHQ9di5ob29rcy5hbGxbZV07aWYoISghdHx8IXQubGVuZ3RoKSlmb3IodmFyIG49MCxpO2k9dFtuKytdOylpKHIpfX0sVG9rZW46Z2V9O3YubGFuZ3VhZ2VzLmNsaWtlPXtjb21tZW50Olt7cGF0dGVybjovKF58W15cXFxcXSlcXC9cXCpbXFxzXFxTXSo/KD86XFwqXFwvfCQpLyxsb29rYmVoaW5kOiEwfSx7cGF0dGVybjovKF58W15cXFxcOl0pXFwvXFwvLiovLGxvb2tiZWhpbmQ6ITAsZ3JlZWR5OiEwfV0sc3RyaW5nOntwYXR0ZXJuOi8oW1wiJ10pKD86XFxcXCg/OlxcclxcbnxbXFxzXFxTXSl8KD8hXFwxKVteXFxcXFxcclxcbl0pKlxcMS8sZ3JlZWR5OiEwfSxcImNsYXNzLW5hbWVcIjp7cGF0dGVybjovKCg/OlxcYig/OmNsYXNzfGludGVyZmFjZXxleHRlbmRzfGltcGxlbWVudHN8dHJhaXR8aW5zdGFuY2VvZnxuZXcpXFxzKyl8KD86Y2F0Y2hcXHMrXFwoKSlbXFx3LlxcXFxdKy9pLGxvb2tiZWhpbmQ6ITAsaW5zaWRlOntwdW5jdHVhdGlvbjovWy5cXFxcXS99fSxrZXl3b3JkOi9cXGIoPzppZnxlbHNlfHdoaWxlfGRvfGZvcnxyZXR1cm58aW58aW5zdGFuY2VvZnxmdW5jdGlvbnxuZXd8dHJ5fHRocm93fGNhdGNofGZpbmFsbHl8bnVsbHxicmVha3xjb250aW51ZSlcXGIvLGJvb2xlYW46L1xcYig/OnRydWV8ZmFsc2UpXFxiLyxmdW5jdGlvbjovXFx3Kyg/PVxcKCkvLG51bWJlcjovXFxiMHhbXFxkYS1mXStcXGJ8KD86XFxiXFxkK1xcLj9cXGQqfFxcQlxcLlxcZCspKD86ZVsrLV0/XFxkKyk/L2ksb3BlcmF0b3I6Ly0tP3xcXCtcXCs/fCE9Pz0/fDw9P3w+PT98PT0/PT98JiY/fFxcfFxcfD98XFw/fFxcKnxcXC98fnxcXF58JS8scHVuY3R1YXRpb246L1t7fVtcXF07KCksLjpdL307di5sYW5ndWFnZXMuamF2YXNjcmlwdD12Lmxhbmd1YWdlcy5leHRlbmQoXCJjbGlrZVwiLHtcImNsYXNzLW5hbWVcIjpbdi5sYW5ndWFnZXMuY2xpa2VbXCJjbGFzcy1uYW1lXCJdLHtwYXR0ZXJuOi8oXnxbXiRcXHdcXHhBMC1cXHVGRkZGXSlbXyRBLVpcXHhBMC1cXHVGRkZGXVskXFx3XFx4QTAtXFx1RkZGRl0qKD89XFwuKD86cHJvdG90eXBlfGNvbnN0cnVjdG9yKSkvLGxvb2tiZWhpbmQ6ITB9XSxrZXl3b3JkOlt7cGF0dGVybjovKCg/Ol58fSlcXHMqKSg/OmNhdGNofGZpbmFsbHkpXFxiLyxsb29rYmVoaW5kOiEwfSx7cGF0dGVybjovKF58W14uXSlcXGIoPzphc3xhc3luYyg/PVxccyooPzpmdW5jdGlvblxcYnxcXCh8WyRcXHdcXHhBMC1cXHVGRkZGXXwkKSl8YXdhaXR8YnJlYWt8Y2FzZXxjbGFzc3xjb25zdHxjb250aW51ZXxkZWJ1Z2dlcnxkZWZhdWx0fGRlbGV0ZXxkb3xlbHNlfGVudW18ZXhwb3J0fGV4dGVuZHN8Zm9yfGZyb218ZnVuY3Rpb258Z2V0fGlmfGltcGxlbWVudHN8aW1wb3J0fGlufGluc3RhbmNlb2Z8aW50ZXJmYWNlfGxldHxuZXd8bnVsbHxvZnxwYWNrYWdlfHByaXZhdGV8cHJvdGVjdGVkfHB1YmxpY3xyZXR1cm58c2V0fHN0YXRpY3xzdXBlcnxzd2l0Y2h8dGhpc3x0aHJvd3x0cnl8dHlwZW9mfHVuZGVmaW5lZHx2YXJ8dm9pZHx3aGlsZXx3aXRofHlpZWxkKVxcYi8sbG9va2JlaGluZDohMH1dLG51bWJlcjovXFxiKD86KD86MFt4WF0oPzpbXFxkQS1GYS1mXSg/Ol9bXFxkQS1GYS1mXSk/KSt8MFtiQl0oPzpbMDFdKD86X1swMV0pPykrfDBbb09dKD86WzAtN10oPzpfWzAtN10pPykrKW4/fCg/OlxcZCg/Ol9cXGQpPykrbnxOYU58SW5maW5pdHkpXFxifCg/OlxcYig/OlxcZCg/Ol9cXGQpPykrXFwuPyg/OlxcZCg/Ol9cXGQpPykqfFxcQlxcLig/OlxcZCg/Ol9cXGQpPykrKSg/OltFZV1bKy1dPyg/OlxcZCg/Ol9cXGQpPykrKT8vLGZ1bmN0aW9uOi9bXyRhLXpBLVpcXHhBMC1cXHVGRkZGXVskXFx3XFx4QTAtXFx1RkZGRl0qKD89XFxzKig/OlxcLlxccyooPzphcHBseXxiaW5kfGNhbGwpXFxzKik/XFwoKS8sb3BlcmF0b3I6Ly1bLT1dP3xcXCtbKz1dP3whPT89P3w8PD89P3w+Pj8+Pz0/fD0oPzo9PT98Pik/fCZbJj1dP3xcXHxbfD1dP3xcXCpcXCo/PT98XFwvPT98fnxcXF49P3wlPT98XFw/fFxcLnszfS99KTt2Lmxhbmd1YWdlcy5qYXZhc2NyaXB0W1wiY2xhc3MtbmFtZVwiXVswXS5wYXR0ZXJuPS8oXFxiKD86Y2xhc3N8aW50ZXJmYWNlfGV4dGVuZHN8aW1wbGVtZW50c3xpbnN0YW5jZW9mfG5ldylcXHMrKVtcXHcuXFxcXF0rLzt2Lmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoXCJqYXZhc2NyaXB0XCIsXCJrZXl3b3JkXCIse3JlZ2V4OntwYXR0ZXJuOi8oKD86XnxbXiRcXHdcXHhBMC1cXHVGRkZGLlwiJ1xcXSlcXHNdKVxccyopXFwvKFxcWyg/OlteXFxdXFxcXFxcclxcbl18XFxcXC4pKl18XFxcXC58W14vXFxcXFxcW1xcclxcbl0pK1xcL1tnaW15dXNdezAsNn0oPz1cXHMqKCR8W1xcclxcbiwuO30pXFxdXSkpLyxsb29rYmVoaW5kOiEwLGdyZWVkeTohMH0sXCJmdW5jdGlvbi12YXJpYWJsZVwiOntwYXR0ZXJuOi9bXyRhLXpBLVpcXHhBMC1cXHVGRkZGXVskXFx3XFx4QTAtXFx1RkZGRl0qKD89XFxzKls9Ol1cXHMqKD86YXN5bmNcXHMqKT8oPzpcXGJmdW5jdGlvblxcYnwoPzpcXCgoPzpbXigpXXxcXChbXigpXSpcXCkpKlxcKXxbXyRhLXpBLVpcXHhBMC1cXHVGRkZGXVskXFx3XFx4QTAtXFx1RkZGRl0qKVxccyo9PikpLyxhbGlhczpcImZ1bmN0aW9uXCJ9LHBhcmFtZXRlcjpbe3BhdHRlcm46LyhmdW5jdGlvbig/OlxccytbXyRBLVphLXpcXHhBMC1cXHVGRkZGXVskXFx3XFx4QTAtXFx1RkZGRl0qKT9cXHMqXFwoXFxzKikoPyFcXHMpKD86W14oKV18XFwoW14oKV0qXFwpKSs/KD89XFxzKlxcKSkvLGxvb2tiZWhpbmQ6ITAsaW5zaWRlOnYubGFuZ3VhZ2VzLmphdmFzY3JpcHR9LHtwYXR0ZXJuOi9bXyRhLXpcXHhBMC1cXHVGRkZGXVskXFx3XFx4QTAtXFx1RkZGRl0qKD89XFxzKj0+KS9pLGluc2lkZTp2Lmxhbmd1YWdlcy5qYXZhc2NyaXB0fSx7cGF0dGVybjovKFxcKFxccyopKD8hXFxzKSg/OlteKCldfFxcKFteKCldKlxcKSkrPyg/PVxccypcXClcXHMqPT4pLyxsb29rYmVoaW5kOiEwLGluc2lkZTp2Lmxhbmd1YWdlcy5qYXZhc2NyaXB0fSx7cGF0dGVybjovKCg/OlxcYnxcXHN8XikoPyEoPzphc3xhc3luY3xhd2FpdHxicmVha3xjYXNlfGNhdGNofGNsYXNzfGNvbnN0fGNvbnRpbnVlfGRlYnVnZ2VyfGRlZmF1bHR8ZGVsZXRlfGRvfGVsc2V8ZW51bXxleHBvcnR8ZXh0ZW5kc3xmaW5hbGx5fGZvcnxmcm9tfGZ1bmN0aW9ufGdldHxpZnxpbXBsZW1lbnRzfGltcG9ydHxpbnxpbnN0YW5jZW9mfGludGVyZmFjZXxsZXR8bmV3fG51bGx8b2Z8cGFja2FnZXxwcml2YXRlfHByb3RlY3RlZHxwdWJsaWN8cmV0dXJufHNldHxzdGF0aWN8c3VwZXJ8c3dpdGNofHRoaXN8dGhyb3d8dHJ5fHR5cGVvZnx1bmRlZmluZWR8dmFyfHZvaWR8d2hpbGV8d2l0aHx5aWVsZCkoPyFbJFxcd1xceEEwLVxcdUZGRkZdKSkoPzpbXyRBLVphLXpcXHhBMC1cXHVGRkZGXVskXFx3XFx4QTAtXFx1RkZGRl0qXFxzKilcXChcXHMqKSg/IVxccykoPzpbXigpXXxcXChbXigpXSpcXCkpKz8oPz1cXHMqXFwpXFxzKlxceykvLGxvb2tiZWhpbmQ6ITAsaW5zaWRlOnYubGFuZ3VhZ2VzLmphdmFzY3JpcHR9XSxjb25zdGFudDovXFxiW0EtWl0oPzpbQS1aX118XFxkeD8pKlxcYi99KTt2Lmxhbmd1YWdlcy5tYXJrdXAmJnYubGFuZ3VhZ2VzLm1hcmt1cC50YWcuYWRkSW5saW5lZChcInNjcmlwdFwiLFwiamF2YXNjcmlwdFwiKTt2Lmxhbmd1YWdlcy5qcz12Lmxhbmd1YWdlcy5qYXZhc2NyaXB0O3YubGFuZ3VhZ2VzLnR5cGVzY3JpcHQ9di5sYW5ndWFnZXMuZXh0ZW5kKFwiamF2YXNjcmlwdFwiLHtrZXl3b3JkOi9cXGIoPzphYnN0cmFjdHxhc3xhc3luY3xhd2FpdHxicmVha3xjYXNlfGNhdGNofGNsYXNzfGNvbnN0fGNvbnN0cnVjdG9yfGNvbnRpbnVlfGRlYnVnZ2VyfGRlY2xhcmV8ZGVmYXVsdHxkZWxldGV8ZG98ZWxzZXxlbnVtfGV4cG9ydHxleHRlbmRzfGZpbmFsbHl8Zm9yfGZyb218ZnVuY3Rpb258Z2V0fGlmfGltcGxlbWVudHN8aW1wb3J0fGlufGluc3RhbmNlb2Z8aW50ZXJmYWNlfGlzfGtleW9mfGxldHxtb2R1bGV8bmFtZXNwYWNlfG5ld3xudWxsfG9mfHBhY2thZ2V8cHJpdmF0ZXxwcm90ZWN0ZWR8cHVibGljfHJlYWRvbmx5fHJldHVybnxyZXF1aXJlfHNldHxzdGF0aWN8c3VwZXJ8c3dpdGNofHRoaXN8dGhyb3d8dHJ5fHR5cGV8dHlwZW9mfHZhcnx2b2lkfHdoaWxlfHdpdGh8eWllbGQpXFxiLyxidWlsdGluOi9cXGIoPzpzdHJpbmd8RnVuY3Rpb258YW55fG51bWJlcnxib29sZWFufEFycmF5fHN5bWJvbHxjb25zb2xlfFByb21pc2V8dW5rbm93bnxuZXZlcilcXGIvfSk7di5sYW5ndWFnZXMudHM9di5sYW5ndWFnZXMudHlwZXNjcmlwdDtmdW5jdGlvbiBnZShlLHIsdCxuLGkpe3RoaXMudHlwZT1lLHRoaXMuY29udGVudD1yLHRoaXMuYWxpYXM9dCx0aGlzLmxlbmd0aD0obnx8XCJcIikubGVuZ3RofDAsdGhpcy5ncmVlZHk9ISFpfWdlLnN0cmluZ2lmeT1mdW5jdGlvbihlLHIpe3JldHVybiB0eXBlb2YgZT09XCJzdHJpbmdcIj9lOkFycmF5LmlzQXJyYXkoZSk/ZS5tYXAoZnVuY3Rpb24odCl7cmV0dXJuIGdlLnN0cmluZ2lmeSh0LHIpfSkuam9pbihcIlwiKTp3ZChlLnR5cGUpKGUuY29udGVudCl9O2Z1bmN0aW9uIHdkKGUpe3JldHVybiBlYVtlXXx8YmR9ZnVuY3Rpb24gcmEoZSl7cmV0dXJuIHhkKGUsdi5sYW5ndWFnZXMuamF2YXNjcmlwdCl9ZnVuY3Rpb24geGQoZSxyKXtyZXR1cm4gdi50b2tlbml6ZShlLHIpLm1hcChuPT5nZS5zdHJpbmdpZnkobikpLmpvaW4oXCJcIil9ZnVuY3Rpb24gdGEoZSl7cmV0dXJuIElpKGUpfXZhciB2bj1jbGFzcyBle2ZpcnN0TGluZU51bWJlcjtsaW5lcztzdGF0aWMgcmVhZChyKXtsZXQgdDt0cnl7dD1uYS5kZWZhdWx0LnJlYWRGaWxlU3luYyhyLFwidXRmLThcIil9Y2F0Y2h7cmV0dXJuIG51bGx9cmV0dXJuIGUuZnJvbUNvbnRlbnQodCl9c3RhdGljIGZyb21Db250ZW50KHIpe2xldCB0PXIuc3BsaXQoL1xccj9cXG4vKTtyZXR1cm4gbmV3IGUoMSx0KX1jb25zdHJ1Y3RvcihyLHQpe3RoaXMuZmlyc3RMaW5lTnVtYmVyPXIsdGhpcy5saW5lcz10fWdldCBsYXN0TGluZU51bWJlcigpe3JldHVybiB0aGlzLmZpcnN0TGluZU51bWJlcit0aGlzLmxpbmVzLmxlbmd0aC0xfW1hcExpbmVBdChyLHQpe2lmKHI8dGhpcy5maXJzdExpbmVOdW1iZXJ8fHI+dGhpcy5saW5lcy5sZW5ndGgrdGhpcy5maXJzdExpbmVOdW1iZXIpcmV0dXJuIHRoaXM7bGV0IG49ci10aGlzLmZpcnN0TGluZU51bWJlcixpPVsuLi50aGlzLmxpbmVzXTtyZXR1cm4gaVtuXT10KGlbbl0pLG5ldyBlKHRoaXMuZmlyc3RMaW5lTnVtYmVyLGkpfW1hcExpbmVzKHIpe3JldHVybiBuZXcgZSh0aGlzLmZpcnN0TGluZU51bWJlcix0aGlzLmxpbmVzLm1hcCgodCxuKT0+cih0LHRoaXMuZmlyc3RMaW5lTnVtYmVyK24pKSl9bGluZUF0KHIpe3JldHVybiB0aGlzLmxpbmVzW3ItdGhpcy5maXJzdExpbmVOdW1iZXJdfXByZXBlbmRTeW1ib2xBdChyLHQpe3JldHVybiB0aGlzLm1hcExpbmVzKChuLGkpPT5pPT09cj9gJHt0fSAke259YDpgICAke259YCl9c2xpY2Uocix0KXtsZXQgbj10aGlzLmxpbmVzLnNsaWNlKHItMSx0KS5qb2luKGBcbmApO3JldHVybiBuZXcgZShyLHRhKG4pLnNwbGl0KGBcbmApKX1oaWdobGlnaHQoKXtsZXQgcj1yYSh0aGlzLnRvU3RyaW5nKCkpO3JldHVybiBuZXcgZSh0aGlzLmZpcnN0TGluZU51bWJlcixyLnNwbGl0KGBcbmApKX10b1N0cmluZygpe3JldHVybiB0aGlzLmxpbmVzLmpvaW4oYFxuYCl9fTt2YXIgdmQ9e3JlZDpjZSxncmF5OktyLGRpbTpJZSxib2xkOlcsdW5kZXJsaW5lOlksaGlnaGxpZ2h0U291cmNlOmU9PmUuaGlnaGxpZ2h0KCl9LFBkPXtyZWQ6ZT0+ZSxncmF5OmU9PmUsZGltOmU9PmUsYm9sZDplPT5lLHVuZGVybGluZTplPT5lLGhpZ2hsaWdodFNvdXJjZTplPT5lfTtmdW5jdGlvbiBUZCh7bWVzc2FnZTplLG9yaWdpbmFsTWV0aG9kOnIsaXNQYW5pYzp0LGNhbGxBcmd1bWVudHM6bn0pe3JldHVybntmdW5jdGlvbk5hbWU6YHByaXNtYS4ke3J9KClgLG1lc3NhZ2U6ZSxpc1BhbmljOnQ/PyExLGNhbGxBcmd1bWVudHM6bn19ZnVuY3Rpb24gU2Qoe2NhbGxzaXRlOmUsbWVzc2FnZTpyLG9yaWdpbmFsTWV0aG9kOnQsaXNQYW5pYzpuLGNhbGxBcmd1bWVudHM6aX0sbyl7bGV0IHM9VGQoe21lc3NhZ2U6cixvcmlnaW5hbE1ldGhvZDp0LGlzUGFuaWM6bixjYWxsQXJndW1lbnRzOml9KTtpZighZXx8dHlwZW9mIHdpbmRvdzxcInVcInx8cHJvY2Vzcy5lbnYuTk9ERV9FTlY9PT1cInByb2R1Y3Rpb25cIilyZXR1cm4gcztsZXQgYT1lLmdldExvY2F0aW9uKCk7aWYoIWF8fCFhLmxpbmVOdW1iZXJ8fCFhLmNvbHVtbk51bWJlcilyZXR1cm4gcztsZXQgbD1NYXRoLm1heCgxLGEubGluZU51bWJlci0zKSx1PXZuLnJlYWQoYS5maWxlTmFtZSk/LnNsaWNlKGwsYS5saW5lTnVtYmVyKSxjPXU/LmxpbmVBdChhLmxpbmVOdW1iZXIpO2lmKHUmJmMpe2xldCBwPUFkKGMpLGQ9UmQoYyk7aWYoIWQpcmV0dXJuIHM7cy5mdW5jdGlvbk5hbWU9YCR7ZC5jb2RlfSlgLHMubG9jYXRpb249YSxufHwodT11Lm1hcExpbmVBdChhLmxpbmVOdW1iZXIsaD0+aC5zbGljZSgwLGQub3BlbmluZ0JyYWNlSW5kZXgpKSksdT1vLmhpZ2hsaWdodFNvdXJjZSh1KTtsZXQgZj1TdHJpbmcodS5sYXN0TGluZU51bWJlcikubGVuZ3RoO2lmKHMuY29udGV4dExpbmVzPXUubWFwTGluZXMoKGgsZyk9Pm8uZ3JheShTdHJpbmcoZykucGFkU3RhcnQoZikpK1wiIFwiK2gpLm1hcExpbmVzKGg9Pm8uZGltKGgpKS5wcmVwZW5kU3ltYm9sQXQoYS5saW5lTnVtYmVyLG8uYm9sZChvLnJlZChcIlxcdTIxOTJcIikpKSxpKXtsZXQgaD1wK2YrMTtoKz0yLHMuY2FsbEFyZ3VtZW50cz0oMCxpYS5kZWZhdWx0KShpLGgpLnNsaWNlKGgpfX1yZXR1cm4gc31mdW5jdGlvbiBSZChlKXtsZXQgcj1PYmplY3Qua2V5cyhBcikuam9pbihcInxcIiksbj1uZXcgUmVnRXhwKFN0cmluZy5yYXdgXFwuKCR7cn0pXFwoYCkuZXhlYyhlKTtpZihuKXtsZXQgaT1uLmluZGV4K25bMF0ubGVuZ3RoLG89ZS5sYXN0SW5kZXhPZihcIiBcIixuLmluZGV4KSsxO3JldHVybntjb2RlOmUuc2xpY2UobyxpKSxvcGVuaW5nQnJhY2VJbmRleDppfX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBBZChlKXtsZXQgcj0wO2ZvcihsZXQgdD0wO3Q8ZS5sZW5ndGg7dCsrKXtpZihlLmNoYXJBdCh0KSE9PVwiIFwiKXJldHVybiByO3IrK31yZXR1cm4gcn1mdW5jdGlvbiBDZCh7ZnVuY3Rpb25OYW1lOmUsbG9jYXRpb246cixtZXNzYWdlOnQsaXNQYW5pYzpuLGNvbnRleHRMaW5lczppLGNhbGxBcmd1bWVudHM6b30scyl7bGV0IGE9W1wiXCJdLGw9cj9cIiBpblwiOlwiOlwiO2lmKG4/KGEucHVzaChzLnJlZChgT29wcywgYW4gdW5rbm93biBlcnJvciBvY2N1cnJlZCEgVGhpcyBpcyAke3MuYm9sZChcIm9uIHVzXCIpfSwgeW91IGRpZCBub3RoaW5nIHdyb25nLmApKSxhLnB1c2gocy5yZWQoYEl0IG9jY3VycmVkIGluIHRoZSAke3MuYm9sZChgXFxgJHtlfVxcYGApfSBpbnZvY2F0aW9uJHtsfWApKSk6YS5wdXNoKHMucmVkKGBJbnZhbGlkICR7cy5ib2xkKGBcXGAke2V9XFxgYCl9IGludm9jYXRpb24ke2x9YCkpLHImJmEucHVzaChzLnVuZGVybGluZShJZChyKSkpLGkpe2EucHVzaChcIlwiKTtsZXQgdT1baS50b1N0cmluZygpXTtvJiYodS5wdXNoKG8pLHUucHVzaChzLmRpbShcIilcIikpKSxhLnB1c2godS5qb2luKFwiXCIpKSxvJiZhLnB1c2goXCJcIil9ZWxzZSBhLnB1c2goXCJcIiksbyYmYS5wdXNoKG8pLGEucHVzaChcIlwiKTtyZXR1cm4gYS5wdXNoKHQpLGEuam9pbihgXG5gKX1mdW5jdGlvbiBJZChlKXtsZXQgcj1bZS5maWxlTmFtZV07cmV0dXJuIGUubGluZU51bWJlciYmci5wdXNoKFN0cmluZyhlLmxpbmVOdW1iZXIpKSxlLmNvbHVtbk51bWJlciYmci5wdXNoKFN0cmluZyhlLmNvbHVtbk51bWJlcikpLHIuam9pbihcIjpcIil9ZnVuY3Rpb24gUG4oZSl7bGV0IHI9ZS5zaG93Q29sb3JzP3ZkOlBkLHQ7cmV0dXJuIHQ9U2QoZSxyKSxDZCh0LHIpfXZhciBtYT1DKEtpKCkpO2Z1bmN0aW9uIGxhKGUscix0KXtsZXQgbj11YShlKSxpPWtkKG4pLG89T2QoaSk7bz9UbihvLHIsdCk6ci5hZGRFcnJvck1lc3NhZ2UoKCk9PlwiVW5rbm93biBlcnJvclwiKX1mdW5jdGlvbiB1YShlKXtyZXR1cm4gZS5lcnJvcnMuZmxhdE1hcChyPT5yLmtpbmQ9PT1cIlVuaW9uXCI/dWEocik6W3JdKX1mdW5jdGlvbiBrZChlKXtsZXQgcj1uZXcgTWFwLHQ9W107Zm9yKGxldCBuIG9mIGUpe2lmKG4ua2luZCE9PVwiSW52YWxpZEFyZ3VtZW50VHlwZVwiKXt0LnB1c2gobik7Y29udGludWV9bGV0IGk9YCR7bi5zZWxlY3Rpb25QYXRoLmpvaW4oXCIuXCIpfToke24uYXJndW1lbnRQYXRoLmpvaW4oXCIuXCIpfWAsbz1yLmdldChpKTtvP3Iuc2V0KGksey4uLm4sYXJndW1lbnQ6ey4uLm4uYXJndW1lbnQsdHlwZU5hbWVzOkRkKG8uYXJndW1lbnQudHlwZU5hbWVzLG4uYXJndW1lbnQudHlwZU5hbWVzKX19KTpyLnNldChpLG4pfXJldHVybiB0LnB1c2goLi4uci52YWx1ZXMoKSksdH1mdW5jdGlvbiBEZChlLHIpe3JldHVyblsuLi5uZXcgU2V0KGUuY29uY2F0KHIpKV19ZnVuY3Rpb24gT2QoZSl7cmV0dXJuIEJpKGUsKHIsdCk9PntsZXQgbj1zYShyKSxpPXNhKHQpO3JldHVybiBuIT09aT9uLWk6YWEociktYWEodCl9KX1mdW5jdGlvbiBzYShlKXtsZXQgcj0wO3JldHVybiBBcnJheS5pc0FycmF5KGUuc2VsZWN0aW9uUGF0aCkmJihyKz1lLnNlbGVjdGlvblBhdGgubGVuZ3RoKSxBcnJheS5pc0FycmF5KGUuYXJndW1lbnRQYXRoKSYmKHIrPWUuYXJndW1lbnRQYXRoLmxlbmd0aCkscn1mdW5jdGlvbiBhYShlKXtzd2l0Y2goZS5raW5kKXtjYXNlXCJJbnZhbGlkQXJndW1lbnRWYWx1ZVwiOmNhc2VcIlZhbHVlVG9vTGFyZ2VcIjpyZXR1cm4gMjA7Y2FzZVwiSW52YWxpZEFyZ3VtZW50VHlwZVwiOnJldHVybiAxMDtjYXNlXCJSZXF1aXJlZEFyZ3VtZW50TWlzc2luZ1wiOnJldHVybi0xMDtkZWZhdWx0OnJldHVybiAwfX12YXIgdWU9Y2xhc3N7Y29uc3RydWN0b3Iocix0KXt0aGlzLm5hbWU9cjt0aGlzLnZhbHVlPXR9aXNSZXF1aXJlZD0hMTttYWtlUmVxdWlyZWQoKXtyZXR1cm4gdGhpcy5pc1JlcXVpcmVkPSEwLHRoaXN9d3JpdGUocil7bGV0e2NvbG9yczp7Z3JlZW46dH19PXIuY29udGV4dDtyLmFkZE1hcmdpblN5bWJvbCh0KHRoaXMuaXNSZXF1aXJlZD9cIitcIjpcIj9cIikpLHIud3JpdGUodCh0aGlzLm5hbWUpKSx0aGlzLmlzUmVxdWlyZWR8fHIud3JpdGUodChcIj9cIikpLHIud3JpdGUodChcIjogXCIpKSx0eXBlb2YgdGhpcy52YWx1ZT09XCJzdHJpbmdcIj9yLndyaXRlKHQodGhpcy52YWx1ZSkpOnIud3JpdGUodGhpcy52YWx1ZSl9fTtwYSgpO3ZhciBDcj1jbGFzc3tjb25zdHJ1Y3RvcihyPTAsdCl7dGhpcy5jb250ZXh0PXQ7dGhpcy5jdXJyZW50SW5kZW50PXJ9bGluZXM9W107Y3VycmVudExpbmU9XCJcIjtjdXJyZW50SW5kZW50PTA7bWFyZ2luU3ltYm9sO2FmdGVyTmV4dE5ld0xpbmVDYWxsYmFjazt3cml0ZShyKXtyZXR1cm4gdHlwZW9mIHI9PVwic3RyaW5nXCI/dGhpcy5jdXJyZW50TGluZSs9cjpyLndyaXRlKHRoaXMpLHRoaXN9d3JpdGVKb2luZWQocix0LG49KGksbyk9Pm8ud3JpdGUoaSkpe2xldCBpPXQubGVuZ3RoLTE7Zm9yKGxldCBvPTA7bzx0Lmxlbmd0aDtvKyspbih0W29dLHRoaXMpLG8hPT1pJiZ0aGlzLndyaXRlKHIpO3JldHVybiB0aGlzfXdyaXRlTGluZShyKXtyZXR1cm4gdGhpcy53cml0ZShyKS5uZXdMaW5lKCl9bmV3TGluZSgpe3RoaXMubGluZXMucHVzaCh0aGlzLmluZGVudGVkQ3VycmVudExpbmUoKSksdGhpcy5jdXJyZW50TGluZT1cIlwiLHRoaXMubWFyZ2luU3ltYm9sPXZvaWQgMDtsZXQgcj10aGlzLmFmdGVyTmV4dE5ld0xpbmVDYWxsYmFjaztyZXR1cm4gdGhpcy5hZnRlck5leHROZXdMaW5lQ2FsbGJhY2s9dm9pZCAwLHI/LigpLHRoaXN9d2l0aEluZGVudChyKXtyZXR1cm4gdGhpcy5pbmRlbnQoKSxyKHRoaXMpLHRoaXMudW5pbmRlbnQoKSx0aGlzfWFmdGVyTmV4dE5ld2xpbmUocil7cmV0dXJuIHRoaXMuYWZ0ZXJOZXh0TmV3TGluZUNhbGxiYWNrPXIsdGhpc31pbmRlbnQoKXtyZXR1cm4gdGhpcy5jdXJyZW50SW5kZW50KyssdGhpc311bmluZGVudCgpe3JldHVybiB0aGlzLmN1cnJlbnRJbmRlbnQ+MCYmdGhpcy5jdXJyZW50SW5kZW50LS0sdGhpc31hZGRNYXJnaW5TeW1ib2wocil7cmV0dXJuIHRoaXMubWFyZ2luU3ltYm9sPXIsdGhpc310b1N0cmluZygpe3JldHVybiB0aGlzLmxpbmVzLmNvbmNhdCh0aGlzLmluZGVudGVkQ3VycmVudExpbmUoKSkuam9pbihgXG5gKX1nZXRDdXJyZW50TGluZUxlbmd0aCgpe3JldHVybiB0aGlzLmN1cnJlbnRMaW5lLmxlbmd0aH1pbmRlbnRlZEN1cnJlbnRMaW5lKCl7bGV0IHI9dGhpcy5jdXJyZW50TGluZS5wYWRTdGFydCh0aGlzLmN1cnJlbnRMaW5lLmxlbmd0aCsyKnRoaXMuY3VycmVudEluZGVudCk7cmV0dXJuIHRoaXMubWFyZ2luU3ltYm9sP3RoaXMubWFyZ2luU3ltYm9sK3Iuc2xpY2UoMSk6cn19O2NhKCk7dmFyIFNuPWNsYXNze2NvbnN0cnVjdG9yKHIpe3RoaXMudmFsdWU9cn13cml0ZShyKXtyLndyaXRlKHRoaXMudmFsdWUpfW1hcmtBc0Vycm9yKCl7dGhpcy52YWx1ZS5tYXJrQXNFcnJvcigpfX07dmFyIFJuPWU9PmUsQW49e2JvbGQ6Um4scmVkOlJuLGdyZWVuOlJuLGRpbTpSbixlbmFibGVkOiExfSxkYT17Ym9sZDpXLHJlZDpjZSxncmVlbjpxZSxkaW06SWUsZW5hYmxlZDohMH0sSXI9e3dyaXRlKGUpe2Uud3JpdGVMaW5lKFwiLFwiKX19O3ZhciBUZT1jbGFzc3tjb25zdHJ1Y3RvcihyKXt0aGlzLmNvbnRlbnRzPXJ9aXNVbmRlcmxpbmVkPSExO2NvbG9yPXI9PnI7dW5kZXJsaW5lKCl7cmV0dXJuIHRoaXMuaXNVbmRlcmxpbmVkPSEwLHRoaXN9c2V0Q29sb3Iocil7cmV0dXJuIHRoaXMuY29sb3I9cix0aGlzfXdyaXRlKHIpe2xldCB0PXIuZ2V0Q3VycmVudExpbmVMZW5ndGgoKTtyLndyaXRlKHRoaXMuY29sb3IodGhpcy5jb250ZW50cykpLHRoaXMuaXNVbmRlcmxpbmVkJiZyLmFmdGVyTmV4dE5ld2xpbmUoKCk9PntyLndyaXRlKFwiIFwiLnJlcGVhdCh0KSkud3JpdGVMaW5lKHRoaXMuY29sb3IoXCJ+XCIucmVwZWF0KHRoaXMuY29udGVudHMubGVuZ3RoKSkpfSl9fTt2YXIgemU9Y2xhc3N7aGFzRXJyb3I9ITE7bWFya0FzRXJyb3IoKXtyZXR1cm4gdGhpcy5oYXNFcnJvcj0hMCx0aGlzfX07dmFyIGtyPWNsYXNzIGV4dGVuZHMgemV7aXRlbXM9W107YWRkSXRlbShyKXtyZXR1cm4gdGhpcy5pdGVtcy5wdXNoKG5ldyBTbihyKSksdGhpc31nZXRGaWVsZChyKXtyZXR1cm4gdGhpcy5pdGVtc1tyXX1nZXRQcmludFdpZHRoKCl7cmV0dXJuIHRoaXMuaXRlbXMubGVuZ3RoPT09MD8yOk1hdGgubWF4KC4uLnRoaXMuaXRlbXMubWFwKHQ9PnQudmFsdWUuZ2V0UHJpbnRXaWR0aCgpKSkrMn13cml0ZShyKXtpZih0aGlzLml0ZW1zLmxlbmd0aD09PTApe3RoaXMud3JpdGVFbXB0eShyKTtyZXR1cm59dGhpcy53cml0ZVdpdGhJdGVtcyhyKX13cml0ZUVtcHR5KHIpe2xldCB0PW5ldyBUZShcIltdXCIpO3RoaXMuaGFzRXJyb3ImJnQuc2V0Q29sb3Ioci5jb250ZXh0LmNvbG9ycy5yZWQpLnVuZGVybGluZSgpLHIud3JpdGUodCl9d3JpdGVXaXRoSXRlbXMocil7bGV0e2NvbG9yczp0fT1yLmNvbnRleHQ7ci53cml0ZUxpbmUoXCJbXCIpLndpdGhJbmRlbnQoKCk9PnIud3JpdGVKb2luZWQoSXIsdGhpcy5pdGVtcykubmV3TGluZSgpKS53cml0ZShcIl1cIiksdGhpcy5oYXNFcnJvciYmci5hZnRlck5leHROZXdsaW5lKCgpPT57ci53cml0ZUxpbmUodC5yZWQoXCJ+XCIucmVwZWF0KHRoaXMuZ2V0UHJpbnRXaWR0aCgpKSkpfSl9YXNPYmplY3QoKXt9fTt2YXIgRHI9Y2xhc3MgZSBleHRlbmRzIHple2ZpZWxkcz17fTtzdWdnZXN0aW9ucz1bXTthZGRGaWVsZChyKXt0aGlzLmZpZWxkc1tyLm5hbWVdPXJ9YWRkU3VnZ2VzdGlvbihyKXt0aGlzLnN1Z2dlc3Rpb25zLnB1c2gocil9Z2V0RmllbGQocil7cmV0dXJuIHRoaXMuZmllbGRzW3JdfWdldERlZXBGaWVsZChyKXtsZXRbdCwuLi5uXT1yLGk9dGhpcy5nZXRGaWVsZCh0KTtpZighaSlyZXR1cm47bGV0IG89aTtmb3IobGV0IHMgb2Ygbil7bGV0IGE7aWYoby52YWx1ZSBpbnN0YW5jZW9mIGU/YT1vLnZhbHVlLmdldEZpZWxkKHMpOm8udmFsdWUgaW5zdGFuY2VvZiBrciYmKGE9by52YWx1ZS5nZXRGaWVsZChOdW1iZXIocykpKSwhYSlyZXR1cm47bz1hfXJldHVybiBvfWdldERlZXBGaWVsZFZhbHVlKHIpe3JldHVybiByLmxlbmd0aD09PTA/dGhpczp0aGlzLmdldERlZXBGaWVsZChyKT8udmFsdWV9aGFzRmllbGQocil7cmV0dXJuISF0aGlzLmdldEZpZWxkKHIpfXJlbW92ZUFsbEZpZWxkcygpe3RoaXMuZmllbGRzPXt9fXJlbW92ZUZpZWxkKHIpe2RlbGV0ZSB0aGlzLmZpZWxkc1tyXX1nZXRGaWVsZHMoKXtyZXR1cm4gdGhpcy5maWVsZHN9aXNFbXB0eSgpe3JldHVybiBPYmplY3Qua2V5cyh0aGlzLmZpZWxkcykubGVuZ3RoPT09MH1nZXRGaWVsZFZhbHVlKHIpe3JldHVybiB0aGlzLmdldEZpZWxkKHIpPy52YWx1ZX1nZXREZWVwU3ViU2VsZWN0aW9uVmFsdWUocil7bGV0IHQ9dGhpcztmb3IobGV0IG4gb2Ygcil7aWYoISh0IGluc3RhbmNlb2YgZSkpcmV0dXJuO2xldCBpPXQuZ2V0U3ViU2VsZWN0aW9uVmFsdWUobik7aWYoIWkpcmV0dXJuO3Q9aX1yZXR1cm4gdH1nZXREZWVwU2VsZWN0aW9uUGFyZW50KHIpe2xldCB0PXRoaXMuZ2V0U2VsZWN0aW9uUGFyZW50KCk7aWYoIXQpcmV0dXJuO2xldCBuPXQ7Zm9yKGxldCBpIG9mIHIpe2xldCBvPW4udmFsdWUuZ2V0RmllbGRWYWx1ZShpKTtpZighb3x8IShvIGluc3RhbmNlb2YgZSkpcmV0dXJuO2xldCBzPW8uZ2V0U2VsZWN0aW9uUGFyZW50KCk7aWYoIXMpcmV0dXJuO249c31yZXR1cm4gbn1nZXRTZWxlY3Rpb25QYXJlbnQoKXtsZXQgcj10aGlzLmdldEZpZWxkKFwic2VsZWN0XCIpPy52YWx1ZS5hc09iamVjdCgpO2lmKHIpcmV0dXJue2tpbmQ6XCJzZWxlY3RcIix2YWx1ZTpyfTtsZXQgdD10aGlzLmdldEZpZWxkKFwiaW5jbHVkZVwiKT8udmFsdWUuYXNPYmplY3QoKTtpZih0KXJldHVybntraW5kOlwiaW5jbHVkZVwiLHZhbHVlOnR9fWdldFN1YlNlbGVjdGlvblZhbHVlKHIpe3JldHVybiB0aGlzLmdldFNlbGVjdGlvblBhcmVudCgpPy52YWx1ZS5maWVsZHNbcl0udmFsdWV9Z2V0UHJpbnRXaWR0aCgpe2xldCByPU9iamVjdC52YWx1ZXModGhpcy5maWVsZHMpO3JldHVybiByLmxlbmd0aD09MD8yOk1hdGgubWF4KC4uLnIubWFwKG49Pm4uZ2V0UHJpbnRXaWR0aCgpKSkrMn13cml0ZShyKXtsZXQgdD1PYmplY3QudmFsdWVzKHRoaXMuZmllbGRzKTtpZih0Lmxlbmd0aD09PTAmJnRoaXMuc3VnZ2VzdGlvbnMubGVuZ3RoPT09MCl7dGhpcy53cml0ZUVtcHR5KHIpO3JldHVybn10aGlzLndyaXRlV2l0aENvbnRlbnRzKHIsdCl9YXNPYmplY3QoKXtyZXR1cm4gdGhpc313cml0ZUVtcHR5KHIpe2xldCB0PW5ldyBUZShcInt9XCIpO3RoaXMuaGFzRXJyb3ImJnQuc2V0Q29sb3Ioci5jb250ZXh0LmNvbG9ycy5yZWQpLnVuZGVybGluZSgpLHIud3JpdGUodCl9d3JpdGVXaXRoQ29udGVudHMocix0KXtyLndyaXRlTGluZShcIntcIikud2l0aEluZGVudCgoKT0+e3Iud3JpdGVKb2luZWQoSXIsWy4uLnQsLi4udGhpcy5zdWdnZXN0aW9uc10pLm5ld0xpbmUoKX0pLHIud3JpdGUoXCJ9XCIpLHRoaXMuaGFzRXJyb3ImJnIuYWZ0ZXJOZXh0TmV3bGluZSgoKT0+e3Iud3JpdGVMaW5lKHIuY29udGV4dC5jb2xvcnMucmVkKFwiflwiLnJlcGVhdCh0aGlzLmdldFByaW50V2lkdGgoKSkpKX0pfX07dmFyIFE9Y2xhc3MgZXh0ZW5kcyB6ZXtjb25zdHJ1Y3Rvcih0KXtzdXBlcigpO3RoaXMudGV4dD10fWdldFByaW50V2lkdGgoKXtyZXR1cm4gdGhpcy50ZXh0Lmxlbmd0aH13cml0ZSh0KXtsZXQgbj1uZXcgVGUodGhpcy50ZXh0KTt0aGlzLmhhc0Vycm9yJiZuLnVuZGVybGluZSgpLnNldENvbG9yKHQuY29udGV4dC5jb2xvcnMucmVkKSx0LndyaXRlKG4pfWFzT2JqZWN0KCl7fX07dmFyIHB0PWNsYXNze2ZpZWxkcz1bXTthZGRGaWVsZChyLHQpe3JldHVybiB0aGlzLmZpZWxkcy5wdXNoKHt3cml0ZShuKXtsZXR7Z3JlZW46aSxkaW06b309bi5jb250ZXh0LmNvbG9ycztuLndyaXRlKGkobyhgJHtyfTogJHt0fWApKSkuYWRkTWFyZ2luU3ltYm9sKGkobyhcIitcIikpKX19KSx0aGlzfXdyaXRlKHIpe2xldHtjb2xvcnM6e2dyZWVuOnR9fT1yLmNvbnRleHQ7ci53cml0ZUxpbmUodChcIntcIikpLndpdGhJbmRlbnQoKCk9PntyLndyaXRlSm9pbmVkKElyLHRoaXMuZmllbGRzKS5uZXdMaW5lKCl9KS53cml0ZSh0KFwifVwiKSkuYWRkTWFyZ2luU3ltYm9sKHQoXCIrXCIpKX19O2Z1bmN0aW9uIFRuKGUscix0KXtzd2l0Y2goZS5raW5kKXtjYXNlXCJNdXR1YWxseUV4Y2x1c2l2ZUZpZWxkc1wiOl9kKGUscik7YnJlYWs7Y2FzZVwiSW5jbHVkZU9uU2NhbGFyXCI6TmQoZSxyKTticmVhaztjYXNlXCJFbXB0eVNlbGVjdGlvblwiOkxkKGUscix0KTticmVhaztjYXNlXCJVbmtub3duU2VsZWN0aW9uRmllbGRcIjpxZChlLHIpO2JyZWFrO2Nhc2VcIkludmFsaWRTZWxlY3Rpb25WYWx1ZVwiOmpkKGUscik7YnJlYWs7Y2FzZVwiVW5rbm93bkFyZ3VtZW50XCI6VmQoZSxyKTticmVhaztjYXNlXCJVbmtub3duSW5wdXRGaWVsZFwiOkJkKGUscik7YnJlYWs7Y2FzZVwiUmVxdWlyZWRBcmd1bWVudE1pc3NpbmdcIjpVZChlLHIpO2JyZWFrO2Nhc2VcIkludmFsaWRBcmd1bWVudFR5cGVcIjpHZChlLHIpO2JyZWFrO2Nhc2VcIkludmFsaWRBcmd1bWVudFZhbHVlXCI6UWQoZSxyKTticmVhaztjYXNlXCJWYWx1ZVRvb0xhcmdlXCI6V2QoZSxyKTticmVhaztjYXNlXCJTb21lRmllbGRzTWlzc2luZ1wiOkpkKGUscik7YnJlYWs7Y2FzZVwiVG9vTWFueUZpZWxkc0dpdmVuXCI6SGQoZSxyKTticmVhaztjYXNlXCJVbmlvblwiOmxhKGUscix0KTticmVhaztkZWZhdWx0OnRocm93IG5ldyBFcnJvcihcIm5vdCBpbXBsZW1lbnRlZDogXCIrZS5raW5kKX19ZnVuY3Rpb24gX2QoZSxyKXtsZXQgdD1yLmFyZ3VtZW50cy5nZXREZWVwU3ViU2VsZWN0aW9uVmFsdWUoZS5zZWxlY3Rpb25QYXRoKT8uYXNPYmplY3QoKTt0JiYodC5nZXRGaWVsZChlLmZpcnN0RmllbGQpPy5tYXJrQXNFcnJvcigpLHQuZ2V0RmllbGQoZS5zZWNvbmRGaWVsZCk/Lm1hcmtBc0Vycm9yKCkpLHIuYWRkRXJyb3JNZXNzYWdlKG49PmBQbGVhc2UgJHtuLmJvbGQoXCJlaXRoZXJcIil9IHVzZSAke24uZ3JlZW4oYFxcYCR7ZS5maXJzdEZpZWxkfVxcYGApfSBvciAke24uZ3JlZW4oYFxcYCR7ZS5zZWNvbmRGaWVsZH1cXGBgKX0sIGJ1dCAke24ucmVkKFwibm90IGJvdGhcIil9IGF0IHRoZSBzYW1lIHRpbWUuYCl9ZnVuY3Rpb24gTmQoZSxyKXtsZXRbdCxuXT1PcihlLnNlbGVjdGlvblBhdGgpLGk9ZS5vdXRwdXRUeXBlLG89ci5hcmd1bWVudHMuZ2V0RGVlcFNlbGVjdGlvblBhcmVudCh0KT8udmFsdWU7aWYobyYmKG8uZ2V0RmllbGQobik/Lm1hcmtBc0Vycm9yKCksaSkpZm9yKGxldCBzIG9mIGkuZmllbGRzKXMuaXNSZWxhdGlvbiYmby5hZGRTdWdnZXN0aW9uKG5ldyB1ZShzLm5hbWUsXCJ0cnVlXCIpKTtyLmFkZEVycm9yTWVzc2FnZShzPT57bGV0IGE9YEludmFsaWQgc2NhbGFyIGZpZWxkICR7cy5yZWQoYFxcYCR7bn1cXGBgKX0gZm9yICR7cy5ib2xkKFwiaW5jbHVkZVwiKX0gc3RhdGVtZW50YDtyZXR1cm4gaT9hKz1gIG9uIG1vZGVsICR7cy5ib2xkKGkubmFtZSl9LiAke2R0KHMpfWA6YSs9XCIuXCIsYSs9YFxuTm90ZSB0aGF0ICR7cy5ib2xkKFwiaW5jbHVkZVwiKX0gc3RhdGVtZW50cyBvbmx5IGFjY2VwdCByZWxhdGlvbiBmaWVsZHMuYCxhfSl9ZnVuY3Rpb24gTGQoZSxyLHQpe2xldCBuPXIuYXJndW1lbnRzLmdldERlZXBTdWJTZWxlY3Rpb25WYWx1ZShlLnNlbGVjdGlvblBhdGgpPy5hc09iamVjdCgpO2lmKG4pe2xldCBpPW4uZ2V0RmllbGQoXCJvbWl0XCIpPy52YWx1ZS5hc09iamVjdCgpO2lmKGkpe0ZkKGUscixpKTtyZXR1cm59aWYobi5oYXNGaWVsZChcInNlbGVjdFwiKSl7TWQoZSxyKTtyZXR1cm59fWlmKHQ/LltZZShlLm91dHB1dFR5cGUubmFtZSldKXskZChlLHIpO3JldHVybn1yLmFkZEVycm9yTWVzc2FnZSgoKT0+YFVua25vd24gZmllbGQgYXQgXCIke2Uuc2VsZWN0aW9uUGF0aC5qb2luKFwiLlwiKX0gc2VsZWN0aW9uXCJgKX1mdW5jdGlvbiBGZChlLHIsdCl7dC5yZW1vdmVBbGxGaWVsZHMoKTtmb3IobGV0IG4gb2YgZS5vdXRwdXRUeXBlLmZpZWxkcyl0LmFkZFN1Z2dlc3Rpb24obmV3IHVlKG4ubmFtZSxcImZhbHNlXCIpKTtyLmFkZEVycm9yTWVzc2FnZShuPT5gVGhlICR7bi5yZWQoXCJvbWl0XCIpfSBzdGF0ZW1lbnQgaW5jbHVkZXMgZXZlcnkgZmllbGQgb2YgdGhlIG1vZGVsICR7bi5ib2xkKGUub3V0cHV0VHlwZS5uYW1lKX0uIEF0IGxlYXN0IG9uZSBmaWVsZCBtdXN0IGJlIGluY2x1ZGVkIGluIHRoZSByZXN1bHRgKX1mdW5jdGlvbiBNZChlLHIpe2xldCB0PWUub3V0cHV0VHlwZSxuPXIuYXJndW1lbnRzLmdldERlZXBTZWxlY3Rpb25QYXJlbnQoZS5zZWxlY3Rpb25QYXRoKT8udmFsdWUsaT1uPy5pc0VtcHR5KCk/PyExO24mJihuLnJlbW92ZUFsbEZpZWxkcygpLGhhKG4sdCkpLHIuYWRkRXJyb3JNZXNzYWdlKG89Pmk/YFRoZSAke28ucmVkKFwiYHNlbGVjdGBcIil9IHN0YXRlbWVudCBmb3IgdHlwZSAke28uYm9sZCh0Lm5hbWUpfSBtdXN0IG5vdCBiZSBlbXB0eS4gJHtkdChvKX1gOmBUaGUgJHtvLnJlZChcImBzZWxlY3RgXCIpfSBzdGF0ZW1lbnQgZm9yIHR5cGUgJHtvLmJvbGQodC5uYW1lKX0gbmVlZHMgJHtvLmJvbGQoXCJhdCBsZWFzdCBvbmUgdHJ1dGh5IHZhbHVlXCIpfS5gKX1mdW5jdGlvbiAkZChlLHIpe2xldCB0PW5ldyBwdDtmb3IobGV0IGkgb2YgZS5vdXRwdXRUeXBlLmZpZWxkcylpLmlzUmVsYXRpb258fHQuYWRkRmllbGQoaS5uYW1lLFwiZmFsc2VcIik7bGV0IG49bmV3IHVlKFwib21pdFwiLHQpLm1ha2VSZXF1aXJlZCgpO2lmKGUuc2VsZWN0aW9uUGF0aC5sZW5ndGg9PT0wKXIuYXJndW1lbnRzLmFkZFN1Z2dlc3Rpb24obik7ZWxzZXtsZXRbaSxvXT1PcihlLnNlbGVjdGlvblBhdGgpLGE9ci5hcmd1bWVudHMuZ2V0RGVlcFNlbGVjdGlvblBhcmVudChpKT8udmFsdWUuYXNPYmplY3QoKT8uZ2V0RmllbGQobyk7aWYoYSl7bGV0IGw9YT8udmFsdWUuYXNPYmplY3QoKT8/bmV3IERyO2wuYWRkU3VnZ2VzdGlvbihuKSxhLnZhbHVlPWx9fXIuYWRkRXJyb3JNZXNzYWdlKGk9PmBUaGUgZ2xvYmFsICR7aS5yZWQoXCJvbWl0XCIpfSBjb25maWd1cmF0aW9uIGV4Y2x1ZGVzIGV2ZXJ5IGZpZWxkIG9mIHRoZSBtb2RlbCAke2kuYm9sZChlLm91dHB1dFR5cGUubmFtZSl9LiBBdCBsZWFzdCBvbmUgZmllbGQgbXVzdCBiZSBpbmNsdWRlZCBpbiB0aGUgcmVzdWx0YCl9ZnVuY3Rpb24gcWQoZSxyKXtsZXQgdD15YShlLnNlbGVjdGlvblBhdGgscik7aWYodC5wYXJlbnRLaW5kIT09XCJ1bmtub3duXCIpe3QuZmllbGQubWFya0FzRXJyb3IoKTtsZXQgbj10LnBhcmVudDtzd2l0Y2godC5wYXJlbnRLaW5kKXtjYXNlXCJzZWxlY3RcIjpoYShuLGUub3V0cHV0VHlwZSk7YnJlYWs7Y2FzZVwiaW5jbHVkZVwiOktkKG4sZS5vdXRwdXRUeXBlKTticmVhaztjYXNlXCJvbWl0XCI6WWQobixlLm91dHB1dFR5cGUpO2JyZWFrfX1yLmFkZEVycm9yTWVzc2FnZShuPT57bGV0IGk9W2BVbmtub3duIGZpZWxkICR7bi5yZWQoYFxcYCR7dC5maWVsZE5hbWV9XFxgYCl9YF07cmV0dXJuIHQucGFyZW50S2luZCE9PVwidW5rbm93blwiJiZpLnB1c2goYGZvciAke24uYm9sZCh0LnBhcmVudEtpbmQpfSBzdGF0ZW1lbnRgKSxpLnB1c2goYG9uIG1vZGVsICR7bi5ib2xkKGBcXGAke2Uub3V0cHV0VHlwZS5uYW1lfVxcYGApfS5gKSxpLnB1c2goZHQobikpLGkuam9pbihcIiBcIil9KX1mdW5jdGlvbiBqZChlLHIpe2xldCB0PXlhKGUuc2VsZWN0aW9uUGF0aCxyKTt0LnBhcmVudEtpbmQhPT1cInVua25vd25cIiYmdC5maWVsZC52YWx1ZS5tYXJrQXNFcnJvcigpLHIuYWRkRXJyb3JNZXNzYWdlKG49PmBJbnZhbGlkIHZhbHVlIGZvciBzZWxlY3Rpb24gZmllbGQgXFxgJHtuLnJlZCh0LmZpZWxkTmFtZSl9XFxgOiAke2UudW5kZXJseWluZ0Vycm9yfWApfWZ1bmN0aW9uIFZkKGUscil7bGV0IHQ9ZS5hcmd1bWVudFBhdGhbMF0sbj1yLmFyZ3VtZW50cy5nZXREZWVwU3ViU2VsZWN0aW9uVmFsdWUoZS5zZWxlY3Rpb25QYXRoKT8uYXNPYmplY3QoKTtuJiYobi5nZXRGaWVsZCh0KT8ubWFya0FzRXJyb3IoKSx6ZChuLGUuYXJndW1lbnRzKSksci5hZGRFcnJvck1lc3NhZ2UoaT0+ZmEoaSx0LGUuYXJndW1lbnRzLm1hcChvPT5vLm5hbWUpKSl9ZnVuY3Rpb24gQmQoZSxyKXtsZXRbdCxuXT1PcihlLmFyZ3VtZW50UGF0aCksaT1yLmFyZ3VtZW50cy5nZXREZWVwU3ViU2VsZWN0aW9uVmFsdWUoZS5zZWxlY3Rpb25QYXRoKT8uYXNPYmplY3QoKTtpZihpKXtpLmdldERlZXBGaWVsZChlLmFyZ3VtZW50UGF0aCk/Lm1hcmtBc0Vycm9yKCk7bGV0IG89aS5nZXREZWVwRmllbGRWYWx1ZSh0KT8uYXNPYmplY3QoKTtvJiZiYShvLGUuaW5wdXRUeXBlKX1yLmFkZEVycm9yTWVzc2FnZShvPT5mYShvLG4sZS5pbnB1dFR5cGUuZmllbGRzLm1hcChzPT5zLm5hbWUpKSl9ZnVuY3Rpb24gZmEoZSxyLHQpe2xldCBuPVtgVW5rbm93biBhcmd1bWVudCBcXGAke2UucmVkKHIpfVxcYC5gXSxpPVhkKHIsdCk7cmV0dXJuIGkmJm4ucHVzaChgRGlkIHlvdSBtZWFuIFxcYCR7ZS5ncmVlbihpKX1cXGA/YCksdC5sZW5ndGg+MCYmbi5wdXNoKGR0KGUpKSxuLmpvaW4oXCIgXCIpfWZ1bmN0aW9uIFVkKGUscil7bGV0IHQ7ci5hZGRFcnJvck1lc3NhZ2UobD0+dD8udmFsdWUgaW5zdGFuY2VvZiBRJiZ0LnZhbHVlLnRleHQ9PT1cIm51bGxcIj9gQXJndW1lbnQgXFxgJHtsLmdyZWVuKG8pfVxcYCBtdXN0IG5vdCBiZSAke2wucmVkKFwibnVsbFwiKX0uYDpgQXJndW1lbnQgXFxgJHtsLmdyZWVuKG8pfVxcYCBpcyBtaXNzaW5nLmApO2xldCBuPXIuYXJndW1lbnRzLmdldERlZXBTdWJTZWxlY3Rpb25WYWx1ZShlLnNlbGVjdGlvblBhdGgpPy5hc09iamVjdCgpO2lmKCFuKXJldHVybjtsZXRbaSxvXT1PcihlLmFyZ3VtZW50UGF0aCkscz1uZXcgcHQsYT1uLmdldERlZXBGaWVsZFZhbHVlKGkpPy5hc09iamVjdCgpO2lmKGEpe2lmKHQ9YS5nZXRGaWVsZChvKSx0JiZhLnJlbW92ZUZpZWxkKG8pLGUuaW5wdXRUeXBlcy5sZW5ndGg9PT0xJiZlLmlucHV0VHlwZXNbMF0ua2luZD09PVwib2JqZWN0XCIpe2ZvcihsZXQgbCBvZiBlLmlucHV0VHlwZXNbMF0uZmllbGRzKXMuYWRkRmllbGQobC5uYW1lLGwudHlwZU5hbWVzLmpvaW4oXCIgfCBcIikpO2EuYWRkU3VnZ2VzdGlvbihuZXcgdWUobyxzKS5tYWtlUmVxdWlyZWQoKSl9ZWxzZXtsZXQgbD1lLmlucHV0VHlwZXMubWFwKGdhKS5qb2luKFwiIHwgXCIpO2EuYWRkU3VnZ2VzdGlvbihuZXcgdWUobyxsKS5tYWtlUmVxdWlyZWQoKSl9aWYoZS5kZXBlbmRlbnRBcmd1bWVudFBhdGgpe24uZ2V0RGVlcEZpZWxkKGUuZGVwZW5kZW50QXJndW1lbnRQYXRoKT8ubWFya0FzRXJyb3IoKTtsZXRbLGxdPU9yKGUuZGVwZW5kZW50QXJndW1lbnRQYXRoKTtyLmFkZEVycm9yTWVzc2FnZSh1PT5gQXJndW1lbnQgXFxgJHt1LmdyZWVuKG8pfVxcYCBpcyByZXF1aXJlZCBiZWNhdXNlIGFyZ3VtZW50IFxcYCR7dS5ncmVlbihsKX1cXGAgd2FzIHByb3ZpZGVkLmApfX19ZnVuY3Rpb24gZ2EoZSl7cmV0dXJuIGUua2luZD09PVwibGlzdFwiP2Ake2dhKGUuZWxlbWVudFR5cGUpfVtdYDplLm5hbWV9ZnVuY3Rpb24gR2QoZSxyKXtsZXQgdD1lLmFyZ3VtZW50Lm5hbWUsbj1yLmFyZ3VtZW50cy5nZXREZWVwU3ViU2VsZWN0aW9uVmFsdWUoZS5zZWxlY3Rpb25QYXRoKT8uYXNPYmplY3QoKTtuJiZuLmdldERlZXBGaWVsZFZhbHVlKGUuYXJndW1lbnRQYXRoKT8ubWFya0FzRXJyb3IoKSxyLmFkZEVycm9yTWVzc2FnZShpPT57bGV0IG89Q24oXCJvclwiLGUuYXJndW1lbnQudHlwZU5hbWVzLm1hcChzPT5pLmdyZWVuKHMpKSk7cmV0dXJuYEFyZ3VtZW50IFxcYCR7aS5ib2xkKHQpfVxcYDogSW52YWxpZCB2YWx1ZSBwcm92aWRlZC4gRXhwZWN0ZWQgJHtvfSwgcHJvdmlkZWQgJHtpLnJlZChlLmluZmVycmVkVHlwZSl9LmB9KX1mdW5jdGlvbiBRZChlLHIpe2xldCB0PWUuYXJndW1lbnQubmFtZSxuPXIuYXJndW1lbnRzLmdldERlZXBTdWJTZWxlY3Rpb25WYWx1ZShlLnNlbGVjdGlvblBhdGgpPy5hc09iamVjdCgpO24mJm4uZ2V0RGVlcEZpZWxkVmFsdWUoZS5hcmd1bWVudFBhdGgpPy5tYXJrQXNFcnJvcigpLHIuYWRkRXJyb3JNZXNzYWdlKGk9PntsZXQgbz1bYEludmFsaWQgdmFsdWUgZm9yIGFyZ3VtZW50IFxcYCR7aS5ib2xkKHQpfVxcYGBdO2lmKGUudW5kZXJseWluZ0Vycm9yJiZvLnB1c2goYDogJHtlLnVuZGVybHlpbmdFcnJvcn1gKSxvLnB1c2goXCIuXCIpLGUuYXJndW1lbnQudHlwZU5hbWVzLmxlbmd0aD4wKXtsZXQgcz1DbihcIm9yXCIsZS5hcmd1bWVudC50eXBlTmFtZXMubWFwKGE9PmkuZ3JlZW4oYSkpKTtvLnB1c2goYCBFeHBlY3RlZCAke3N9LmApfXJldHVybiBvLmpvaW4oXCJcIil9KX1mdW5jdGlvbiBXZChlLHIpe2xldCB0PWUuYXJndW1lbnQubmFtZSxuPXIuYXJndW1lbnRzLmdldERlZXBTdWJTZWxlY3Rpb25WYWx1ZShlLnNlbGVjdGlvblBhdGgpPy5hc09iamVjdCgpLGk7aWYobil7bGV0IHM9bi5nZXREZWVwRmllbGQoZS5hcmd1bWVudFBhdGgpPy52YWx1ZTtzPy5tYXJrQXNFcnJvcigpLHMgaW5zdGFuY2VvZiBRJiYoaT1zLnRleHQpfXIuYWRkRXJyb3JNZXNzYWdlKG89PntsZXQgcz1bXCJVbmFibGUgdG8gZml0IHZhbHVlXCJdO3JldHVybiBpJiZzLnB1c2goby5yZWQoaSkpLHMucHVzaChgaW50byBhIDY0LWJpdCBzaWduZWQgaW50ZWdlciBmb3IgZmllbGQgXFxgJHtvLmJvbGQodCl9XFxgYCkscy5qb2luKFwiIFwiKX0pfWZ1bmN0aW9uIEpkKGUscil7bGV0IHQ9ZS5hcmd1bWVudFBhdGhbZS5hcmd1bWVudFBhdGgubGVuZ3RoLTFdLG49ci5hcmd1bWVudHMuZ2V0RGVlcFN1YlNlbGVjdGlvblZhbHVlKGUuc2VsZWN0aW9uUGF0aCk/LmFzT2JqZWN0KCk7aWYobil7bGV0IGk9bi5nZXREZWVwRmllbGRWYWx1ZShlLmFyZ3VtZW50UGF0aCk/LmFzT2JqZWN0KCk7aSYmYmEoaSxlLmlucHV0VHlwZSl9ci5hZGRFcnJvck1lc3NhZ2UoaT0+e2xldCBvPVtgQXJndW1lbnQgXFxgJHtpLmJvbGQodCl9XFxgIG9mIHR5cGUgJHtpLmJvbGQoZS5pbnB1dFR5cGUubmFtZSl9IG5lZWRzYF07cmV0dXJuIGUuY29uc3RyYWludHMubWluRmllbGRDb3VudD09PTE/ZS5jb25zdHJhaW50cy5yZXF1aXJlZEZpZWxkcz9vLnB1c2goYCR7aS5ncmVlbihcImF0IGxlYXN0IG9uZSBvZlwiKX0gJHtDbihcIm9yXCIsZS5jb25zdHJhaW50cy5yZXF1aXJlZEZpZWxkcy5tYXAocz0+YFxcYCR7aS5ib2xkKHMpfVxcYGApKX0gYXJndW1lbnRzLmApOm8ucHVzaChgJHtpLmdyZWVuKFwiYXQgbGVhc3Qgb25lXCIpfSBhcmd1bWVudC5gKTpvLnB1c2goYCR7aS5ncmVlbihgYXQgbGVhc3QgJHtlLmNvbnN0cmFpbnRzLm1pbkZpZWxkQ291bnR9YCl9IGFyZ3VtZW50cy5gKSxvLnB1c2goZHQoaSkpLG8uam9pbihcIiBcIil9KX1mdW5jdGlvbiBIZChlLHIpe2xldCB0PWUuYXJndW1lbnRQYXRoW2UuYXJndW1lbnRQYXRoLmxlbmd0aC0xXSxuPXIuYXJndW1lbnRzLmdldERlZXBTdWJTZWxlY3Rpb25WYWx1ZShlLnNlbGVjdGlvblBhdGgpPy5hc09iamVjdCgpLGk9W107aWYobil7bGV0IG89bi5nZXREZWVwRmllbGRWYWx1ZShlLmFyZ3VtZW50UGF0aCk/LmFzT2JqZWN0KCk7byYmKG8ubWFya0FzRXJyb3IoKSxpPU9iamVjdC5rZXlzKG8uZ2V0RmllbGRzKCkpKX1yLmFkZEVycm9yTWVzc2FnZShvPT57bGV0IHM9W2BBcmd1bWVudCBcXGAke28uYm9sZCh0KX1cXGAgb2YgdHlwZSAke28uYm9sZChlLmlucHV0VHlwZS5uYW1lKX0gbmVlZHNgXTtyZXR1cm4gZS5jb25zdHJhaW50cy5taW5GaWVsZENvdW50PT09MSYmZS5jb25zdHJhaW50cy5tYXhGaWVsZENvdW50PT0xP3MucHVzaChgJHtvLmdyZWVuKFwiZXhhY3RseSBvbmVcIil9IGFyZ3VtZW50LGApOmUuY29uc3RyYWludHMubWF4RmllbGRDb3VudD09MT9zLnB1c2goYCR7by5ncmVlbihcImF0IG1vc3Qgb25lXCIpfSBhcmd1bWVudCxgKTpzLnB1c2goYCR7by5ncmVlbihgYXQgbW9zdCAke2UuY29uc3RyYWludHMubWF4RmllbGRDb3VudH1gKX0gYXJndW1lbnRzLGApLHMucHVzaChgYnV0IHlvdSBwcm92aWRlZCAke0NuKFwiYW5kXCIsaS5tYXAoYT0+by5yZWQoYSkpKX0uIFBsZWFzZSBjaG9vc2VgKSxlLmNvbnN0cmFpbnRzLm1heEZpZWxkQ291bnQ9PT0xP3MucHVzaChcIm9uZS5cIik6cy5wdXNoKGAke2UuY29uc3RyYWludHMubWF4RmllbGRDb3VudH0uYCkscy5qb2luKFwiIFwiKX0pfWZ1bmN0aW9uIGhhKGUscil7Zm9yKGxldCB0IG9mIHIuZmllbGRzKWUuaGFzRmllbGQodC5uYW1lKXx8ZS5hZGRTdWdnZXN0aW9uKG5ldyB1ZSh0Lm5hbWUsXCJ0cnVlXCIpKX1mdW5jdGlvbiBLZChlLHIpe2ZvcihsZXQgdCBvZiByLmZpZWxkcyl0LmlzUmVsYXRpb24mJiFlLmhhc0ZpZWxkKHQubmFtZSkmJmUuYWRkU3VnZ2VzdGlvbihuZXcgdWUodC5uYW1lLFwidHJ1ZVwiKSl9ZnVuY3Rpb24gWWQoZSxyKXtmb3IobGV0IHQgb2Ygci5maWVsZHMpIWUuaGFzRmllbGQodC5uYW1lKSYmIXQuaXNSZWxhdGlvbiYmZS5hZGRTdWdnZXN0aW9uKG5ldyB1ZSh0Lm5hbWUsXCJ0cnVlXCIpKX1mdW5jdGlvbiB6ZChlLHIpe2ZvcihsZXQgdCBvZiByKWUuaGFzRmllbGQodC5uYW1lKXx8ZS5hZGRTdWdnZXN0aW9uKG5ldyB1ZSh0Lm5hbWUsdC50eXBlTmFtZXMuam9pbihcIiB8IFwiKSkpfWZ1bmN0aW9uIHlhKGUscil7bGV0W3Qsbl09T3IoZSksaT1yLmFyZ3VtZW50cy5nZXREZWVwU3ViU2VsZWN0aW9uVmFsdWUodCk/LmFzT2JqZWN0KCk7aWYoIWkpcmV0dXJue3BhcmVudEtpbmQ6XCJ1bmtub3duXCIsZmllbGROYW1lOm59O2xldCBvPWkuZ2V0RmllbGRWYWx1ZShcInNlbGVjdFwiKT8uYXNPYmplY3QoKSxzPWkuZ2V0RmllbGRWYWx1ZShcImluY2x1ZGVcIik/LmFzT2JqZWN0KCksYT1pLmdldEZpZWxkVmFsdWUoXCJvbWl0XCIpPy5hc09iamVjdCgpLGw9bz8uZ2V0RmllbGQobik7cmV0dXJuIG8mJmw/e3BhcmVudEtpbmQ6XCJzZWxlY3RcIixwYXJlbnQ6byxmaWVsZDpsLGZpZWxkTmFtZTpufToobD1zPy5nZXRGaWVsZChuKSxzJiZsP3twYXJlbnRLaW5kOlwiaW5jbHVkZVwiLGZpZWxkOmwscGFyZW50OnMsZmllbGROYW1lOm59OihsPWE/LmdldEZpZWxkKG4pLGEmJmw/e3BhcmVudEtpbmQ6XCJvbWl0XCIsZmllbGQ6bCxwYXJlbnQ6YSxmaWVsZE5hbWU6bn06e3BhcmVudEtpbmQ6XCJ1bmtub3duXCIsZmllbGROYW1lOm59KSl9ZnVuY3Rpb24gYmEoZSxyKXtpZihyLmtpbmQ9PT1cIm9iamVjdFwiKWZvcihsZXQgdCBvZiByLmZpZWxkcyllLmhhc0ZpZWxkKHQubmFtZSl8fGUuYWRkU3VnZ2VzdGlvbihuZXcgdWUodC5uYW1lLHQudHlwZU5hbWVzLmpvaW4oXCIgfCBcIikpKX1mdW5jdGlvbiBPcihlKXtsZXQgcj1bLi4uZV0sdD1yLnBvcCgpO2lmKCF0KXRocm93IG5ldyBFcnJvcihcInVuZXhwZWN0ZWQgZW1wdHkgcGF0aFwiKTtyZXR1cm5bcix0XX1mdW5jdGlvbiBkdCh7Z3JlZW46ZSxlbmFibGVkOnJ9KXtyZXR1cm5cIkF2YWlsYWJsZSBvcHRpb25zIGFyZSBcIisocj9gbGlzdGVkIGluICR7ZShcImdyZWVuXCIpfWA6XCJtYXJrZWQgd2l0aCA/XCIpK1wiLlwifWZ1bmN0aW9uIENuKGUscil7aWYoci5sZW5ndGg9PT0xKXJldHVybiByWzBdO2xldCB0PVsuLi5yXSxuPXQucG9wKCk7cmV0dXJuYCR7dC5qb2luKFwiLCBcIil9ICR7ZX0gJHtufWB9dmFyIFpkPTM7ZnVuY3Rpb24gWGQoZSxyKXtsZXQgdD0xLzAsbjtmb3IobGV0IGkgb2Ygcil7bGV0IG89KDAsbWEuZGVmYXVsdCkoZSxpKTtvPlpkfHxvPHQmJih0PW8sbj1pKX1yZXR1cm4gbn12YXIgbXQ9Y2xhc3N7bW9kZWxOYW1lO25hbWU7dHlwZU5hbWU7aXNMaXN0O2lzRW51bTtjb25zdHJ1Y3RvcihyLHQsbixpLG8pe3RoaXMubW9kZWxOYW1lPXIsdGhpcy5uYW1lPXQsdGhpcy50eXBlTmFtZT1uLHRoaXMuaXNMaXN0PWksdGhpcy5pc0VudW09b31fdG9HcmFwaFFMSW5wdXRUeXBlKCl7bGV0IHI9dGhpcy5pc0xpc3Q/XCJMaXN0XCI6XCJcIix0PXRoaXMuaXNFbnVtP1wiRW51bVwiOlwiXCI7cmV0dXJuYCR7cn0ke3R9JHt0aGlzLnR5cGVOYW1lfUZpZWxkUmVmSW5wdXQ8JHt0aGlzLm1vZGVsTmFtZX0+YH19O2Z1bmN0aW9uIF9yKGUpe3JldHVybiBlIGluc3RhbmNlb2YgbXR9dmFyIEluPVN5bWJvbCgpLHppPW5ldyBXZWFrTWFwLE1lPWNsYXNze2NvbnN0cnVjdG9yKHIpe3I9PT1Jbj96aS5zZXQodGhpcyxgUHJpc21hLiR7dGhpcy5fZ2V0TmFtZSgpfWApOnppLnNldCh0aGlzLGBuZXcgUHJpc21hLiR7dGhpcy5fZ2V0TmFtZXNwYWNlKCl9LiR7dGhpcy5fZ2V0TmFtZSgpfSgpYCl9X2dldE5hbWUoKXtyZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci5uYW1lfXRvU3RyaW5nKCl7cmV0dXJuIHppLmdldCh0aGlzKX19LGZ0PWNsYXNzIGV4dGVuZHMgTWV7X2dldE5hbWVzcGFjZSgpe3JldHVyblwiTnVsbFR5cGVzXCJ9fSxndD1jbGFzcyBleHRlbmRzIGZ0eyNlfTtaaShndCxcIkRiTnVsbFwiKTt2YXIgaHQ9Y2xhc3MgZXh0ZW5kcyBmdHsjZX07WmkoaHQsXCJKc29uTnVsbFwiKTt2YXIgeXQ9Y2xhc3MgZXh0ZW5kcyBmdHsjZX07WmkoeXQsXCJBbnlOdWxsXCIpO3ZhciBrbj17Y2xhc3Nlczp7RGJOdWxsOmd0LEpzb25OdWxsOmh0LEFueU51bGw6eXR9LGluc3RhbmNlczp7RGJOdWxsOm5ldyBndChJbiksSnNvbk51bGw6bmV3IGh0KEluKSxBbnlOdWxsOm5ldyB5dChJbil9fTtmdW5jdGlvbiBaaShlLHIpe09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwibmFtZVwiLHt2YWx1ZTpyLGNvbmZpZ3VyYWJsZTohMH0pfXZhciBFYT1cIjogXCIsRG49Y2xhc3N7Y29uc3RydWN0b3Iocix0KXt0aGlzLm5hbWU9cjt0aGlzLnZhbHVlPXR9aGFzRXJyb3I9ITE7bWFya0FzRXJyb3IoKXt0aGlzLmhhc0Vycm9yPSEwfWdldFByaW50V2lkdGgoKXtyZXR1cm4gdGhpcy5uYW1lLmxlbmd0aCt0aGlzLnZhbHVlLmdldFByaW50V2lkdGgoKStFYS5sZW5ndGh9d3JpdGUocil7bGV0IHQ9bmV3IFRlKHRoaXMubmFtZSk7dGhpcy5oYXNFcnJvciYmdC51bmRlcmxpbmUoKS5zZXRDb2xvcihyLmNvbnRleHQuY29sb3JzLnJlZCksci53cml0ZSh0KS53cml0ZShFYSkud3JpdGUodGhpcy52YWx1ZSl9fTt2YXIgWGk9Y2xhc3N7YXJndW1lbnRzO2Vycm9yTWVzc2FnZXM9W107Y29uc3RydWN0b3Iocil7dGhpcy5hcmd1bWVudHM9cn13cml0ZShyKXtyLndyaXRlKHRoaXMuYXJndW1lbnRzKX1hZGRFcnJvck1lc3NhZ2Uocil7dGhpcy5lcnJvck1lc3NhZ2VzLnB1c2gocil9cmVuZGVyQWxsTWVzc2FnZXMocil7cmV0dXJuIHRoaXMuZXJyb3JNZXNzYWdlcy5tYXAodD0+dChyKSkuam9pbihgXG5gKX19O2Z1bmN0aW9uIE5yKGUpe3JldHVybiBuZXcgWGkod2EoZSkpfWZ1bmN0aW9uIHdhKGUpe2xldCByPW5ldyBEcjtmb3IobGV0W3Qsbl1vZiBPYmplY3QuZW50cmllcyhlKSl7bGV0IGk9bmV3IERuKHQseGEobikpO3IuYWRkRmllbGQoaSl9cmV0dXJuIHJ9ZnVuY3Rpb24geGEoZSl7aWYodHlwZW9mIGU9PVwic3RyaW5nXCIpcmV0dXJuIG5ldyBRKEpTT04uc3RyaW5naWZ5KGUpKTtpZih0eXBlb2YgZT09XCJudW1iZXJcInx8dHlwZW9mIGU9PVwiYm9vbGVhblwiKXJldHVybiBuZXcgUShTdHJpbmcoZSkpO2lmKHR5cGVvZiBlPT1cImJpZ2ludFwiKXJldHVybiBuZXcgUShgJHtlfW5gKTtpZihlPT09bnVsbClyZXR1cm4gbmV3IFEoXCJudWxsXCIpO2lmKGU9PT12b2lkIDApcmV0dXJuIG5ldyBRKFwidW5kZWZpbmVkXCIpO2lmKFJyKGUpKXJldHVybiBuZXcgUShgbmV3IFByaXNtYS5EZWNpbWFsKFwiJHtlLnRvRml4ZWQoKX1cIilgKTtpZihlIGluc3RhbmNlb2YgVWludDhBcnJheSlyZXR1cm4gQnVmZmVyLmlzQnVmZmVyKGUpP25ldyBRKGBCdWZmZXIuYWxsb2MoJHtlLmJ5dGVMZW5ndGh9KWApOm5ldyBRKGBuZXcgVWludDhBcnJheSgke2UuYnl0ZUxlbmd0aH0pYCk7aWYoZSBpbnN0YW5jZW9mIERhdGUpe2xldCByPXduKGUpP2UudG9JU09TdHJpbmcoKTpcIkludmFsaWQgRGF0ZVwiO3JldHVybiBuZXcgUShgbmV3IERhdGUoXCIke3J9XCIpYCl9cmV0dXJuIGUgaW5zdGFuY2VvZiBNZT9uZXcgUShgUHJpc21hLiR7ZS5fZ2V0TmFtZSgpfWApOl9yKGUpP25ldyBRKGBwcmlzbWEuJHtZZShlLm1vZGVsTmFtZSl9LiRmaWVsZHMuJHtlLm5hbWV9YCk6QXJyYXkuaXNBcnJheShlKT9lbShlKTp0eXBlb2YgZT09XCJvYmplY3RcIj93YShlKTpuZXcgUShPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSkpfWZ1bmN0aW9uIGVtKGUpe2xldCByPW5ldyBrcjtmb3IobGV0IHQgb2YgZSlyLmFkZEl0ZW0oeGEodCkpO3JldHVybiByfWZ1bmN0aW9uIE9uKGUscil7bGV0IHQ9cj09PVwicHJldHR5XCI/ZGE6QW4sbj1lLnJlbmRlckFsbE1lc3NhZ2VzKHQpLGk9bmV3IENyKDAse2NvbG9yczp0fSkud3JpdGUoZSkudG9TdHJpbmcoKTtyZXR1cm57bWVzc2FnZTpuLGFyZ3M6aX19ZnVuY3Rpb24gX24oe2FyZ3M6ZSxlcnJvcnM6cixlcnJvckZvcm1hdDp0LGNhbGxzaXRlOm4sb3JpZ2luYWxNZXRob2Q6aSxjbGllbnRWZXJzaW9uOm8sZ2xvYmFsT21pdDpzfSl7bGV0IGE9TnIoZSk7Zm9yKGxldCBwIG9mIHIpVG4ocCxhLHMpO2xldHttZXNzYWdlOmwsYXJnczp1fT1PbihhLHQpLGM9UG4oe21lc3NhZ2U6bCxjYWxsc2l0ZTpuLG9yaWdpbmFsTWV0aG9kOmksc2hvd0NvbG9yczp0PT09XCJwcmV0dHlcIixjYWxsQXJndW1lbnRzOnV9KTt0aHJvdyBuZXcgWihjLHtjbGllbnRWZXJzaW9uOm99KX1mdW5jdGlvbiBTZShlKXtyZXR1cm4gZS5yZXBsYWNlKC9eLi8scj0+ci50b0xvd2VyQ2FzZSgpKX1mdW5jdGlvbiBQYShlLHIsdCl7bGV0IG49U2UodCk7cmV0dXJuIXIucmVzdWx0fHwhKHIucmVzdWx0LiRhbGxNb2RlbHN8fHIucmVzdWx0W25dKT9lOnJtKHsuLi5lLC4uLnZhKHIubmFtZSxlLHIucmVzdWx0LiRhbGxNb2RlbHMpLC4uLnZhKHIubmFtZSxlLHIucmVzdWx0W25dKX0pfWZ1bmN0aW9uIHJtKGUpe2xldCByPW5ldyBQZSx0PShuLGkpPT5yLmdldE9yQ3JlYXRlKG4sKCk9PmkuaGFzKG4pP1tuXTooaS5hZGQobiksZVtuXT9lW25dLm5lZWRzLmZsYXRNYXAobz0+dChvLGkpKTpbbl0pKTtyZXR1cm4geHIoZSxuPT4oey4uLm4sbmVlZHM6dChuLm5hbWUsbmV3IFNldCl9KSl9ZnVuY3Rpb24gdmEoZSxyLHQpe3JldHVybiB0P3hyKHQsKHtuZWVkczpuLGNvbXB1dGU6aX0sbyk9Pih7bmFtZTpvLG5lZWRzOm4/T2JqZWN0LmtleXMobikuZmlsdGVyKHM9Pm5bc10pOltdLGNvbXB1dGU6dG0ocixvLGkpfSkpOnt9fWZ1bmN0aW9uIHRtKGUscix0KXtsZXQgbj1lPy5bcl0/LmNvbXB1dGU7cmV0dXJuIG4/aT0+dCh7Li4uaSxbcl06bihpKX0pOnR9ZnVuY3Rpb24gVGEoZSxyKXtpZighcilyZXR1cm4gZTtsZXQgdD17Li4uZX07Zm9yKGxldCBuIG9mIE9iamVjdC52YWx1ZXMocikpaWYoZVtuLm5hbWVdKWZvcihsZXQgaSBvZiBuLm5lZWRzKXRbaV09ITA7cmV0dXJuIHR9ZnVuY3Rpb24gU2EoZSxyKXtpZighcilyZXR1cm4gZTtsZXQgdD17Li4uZX07Zm9yKGxldCBuIG9mIE9iamVjdC52YWx1ZXMocikpaWYoIWVbbi5uYW1lXSlmb3IobGV0IGkgb2Ygbi5uZWVkcylkZWxldGUgdFtpXTtyZXR1cm4gdH12YXIgTm49Y2xhc3N7Y29uc3RydWN0b3Iocix0KXt0aGlzLmV4dGVuc2lvbj1yO3RoaXMucHJldmlvdXM9dH1jb21wdXRlZEZpZWxkc0NhY2hlPW5ldyBQZTttb2RlbEV4dGVuc2lvbnNDYWNoZT1uZXcgUGU7cXVlcnlDYWxsYmFja3NDYWNoZT1uZXcgUGU7Y2xpZW50RXh0ZW5zaW9ucz11dCgoKT0+dGhpcy5leHRlbnNpb24uY2xpZW50P3suLi50aGlzLnByZXZpb3VzPy5nZXRBbGxDbGllbnRFeHRlbnNpb25zKCksLi4udGhpcy5leHRlbnNpb24uY2xpZW50fTp0aGlzLnByZXZpb3VzPy5nZXRBbGxDbGllbnRFeHRlbnNpb25zKCkpO2JhdGNoQ2FsbGJhY2tzPXV0KCgpPT57bGV0IHI9dGhpcy5wcmV2aW91cz8uZ2V0QWxsQmF0Y2hRdWVyeUNhbGxiYWNrcygpPz9bXSx0PXRoaXMuZXh0ZW5zaW9uLnF1ZXJ5Py4kX19pbnRlcm5hbEJhdGNoO3JldHVybiB0P3IuY29uY2F0KHQpOnJ9KTtnZXRBbGxDb21wdXRlZEZpZWxkcyhyKXtyZXR1cm4gdGhpcy5jb21wdXRlZEZpZWxkc0NhY2hlLmdldE9yQ3JlYXRlKHIsKCk9PlBhKHRoaXMucHJldmlvdXM/LmdldEFsbENvbXB1dGVkRmllbGRzKHIpLHRoaXMuZXh0ZW5zaW9uLHIpKX1nZXRBbGxDbGllbnRFeHRlbnNpb25zKCl7cmV0dXJuIHRoaXMuY2xpZW50RXh0ZW5zaW9ucy5nZXQoKX1nZXRBbGxNb2RlbEV4dGVuc2lvbnMocil7cmV0dXJuIHRoaXMubW9kZWxFeHRlbnNpb25zQ2FjaGUuZ2V0T3JDcmVhdGUociwoKT0+e2xldCB0PVNlKHIpO3JldHVybiF0aGlzLmV4dGVuc2lvbi5tb2RlbHx8ISh0aGlzLmV4dGVuc2lvbi5tb2RlbFt0XXx8dGhpcy5leHRlbnNpb24ubW9kZWwuJGFsbE1vZGVscyk/dGhpcy5wcmV2aW91cz8uZ2V0QWxsTW9kZWxFeHRlbnNpb25zKHIpOnsuLi50aGlzLnByZXZpb3VzPy5nZXRBbGxNb2RlbEV4dGVuc2lvbnMociksLi4udGhpcy5leHRlbnNpb24ubW9kZWwuJGFsbE1vZGVscywuLi50aGlzLmV4dGVuc2lvbi5tb2RlbFt0XX19KX1nZXRBbGxRdWVyeUNhbGxiYWNrcyhyLHQpe3JldHVybiB0aGlzLnF1ZXJ5Q2FsbGJhY2tzQ2FjaGUuZ2V0T3JDcmVhdGUoYCR7cn06JHt0fWAsKCk9PntsZXQgbj10aGlzLnByZXZpb3VzPy5nZXRBbGxRdWVyeUNhbGxiYWNrcyhyLHQpPz9bXSxpPVtdLG89dGhpcy5leHRlbnNpb24ucXVlcnk7cmV0dXJuIW98fCEob1tyXXx8by4kYWxsTW9kZWxzfHxvW3RdfHxvLiRhbGxPcGVyYXRpb25zKT9uOihvW3JdIT09dm9pZCAwJiYob1tyXVt0XSE9PXZvaWQgMCYmaS5wdXNoKG9bcl1bdF0pLG9bcl0uJGFsbE9wZXJhdGlvbnMhPT12b2lkIDAmJmkucHVzaChvW3JdLiRhbGxPcGVyYXRpb25zKSksciE9PVwiJG5vbmVcIiYmby4kYWxsTW9kZWxzIT09dm9pZCAwJiYoby4kYWxsTW9kZWxzW3RdIT09dm9pZCAwJiZpLnB1c2goby4kYWxsTW9kZWxzW3RdKSxvLiRhbGxNb2RlbHMuJGFsbE9wZXJhdGlvbnMhPT12b2lkIDAmJmkucHVzaChvLiRhbGxNb2RlbHMuJGFsbE9wZXJhdGlvbnMpKSxvW3RdIT09dm9pZCAwJiZpLnB1c2gob1t0XSksby4kYWxsT3BlcmF0aW9ucyE9PXZvaWQgMCYmaS5wdXNoKG8uJGFsbE9wZXJhdGlvbnMpLG4uY29uY2F0KGkpKX0pfWdldEFsbEJhdGNoUXVlcnlDYWxsYmFja3MoKXtyZXR1cm4gdGhpcy5iYXRjaENhbGxiYWNrcy5nZXQoKX19LExyPWNsYXNzIGV7Y29uc3RydWN0b3Iocil7dGhpcy5oZWFkPXJ9c3RhdGljIGVtcHR5KCl7cmV0dXJuIG5ldyBlfXN0YXRpYyBzaW5nbGUocil7cmV0dXJuIG5ldyBlKG5ldyBObihyKSl9aXNFbXB0eSgpe3JldHVybiB0aGlzLmhlYWQ9PT12b2lkIDB9YXBwZW5kKHIpe3JldHVybiBuZXcgZShuZXcgTm4ocix0aGlzLmhlYWQpKX1nZXRBbGxDb21wdXRlZEZpZWxkcyhyKXtyZXR1cm4gdGhpcy5oZWFkPy5nZXRBbGxDb21wdXRlZEZpZWxkcyhyKX1nZXRBbGxDbGllbnRFeHRlbnNpb25zKCl7cmV0dXJuIHRoaXMuaGVhZD8uZ2V0QWxsQ2xpZW50RXh0ZW5zaW9ucygpfWdldEFsbE1vZGVsRXh0ZW5zaW9ucyhyKXtyZXR1cm4gdGhpcy5oZWFkPy5nZXRBbGxNb2RlbEV4dGVuc2lvbnMocil9Z2V0QWxsUXVlcnlDYWxsYmFja3Mocix0KXtyZXR1cm4gdGhpcy5oZWFkPy5nZXRBbGxRdWVyeUNhbGxiYWNrcyhyLHQpPz9bXX1nZXRBbGxCYXRjaFF1ZXJ5Q2FsbGJhY2tzKCl7cmV0dXJuIHRoaXMuaGVhZD8uZ2V0QWxsQmF0Y2hRdWVyeUNhbGxiYWNrcygpPz9bXX19O3ZhciBMbj1jbGFzc3tjb25zdHJ1Y3RvcihyKXt0aGlzLm5hbWU9cn19O2Z1bmN0aW9uIFJhKGUpe3JldHVybiBlIGluc3RhbmNlb2YgTG59ZnVuY3Rpb24gQWEoZSl7cmV0dXJuIG5ldyBMbihlKX12YXIgQ2E9U3ltYm9sKCksYnQ9Y2xhc3N7Y29uc3RydWN0b3Iocil7aWYociE9PUNhKXRocm93IG5ldyBFcnJvcihcIlNraXAgaW5zdGFuY2UgY2FuIG5vdCBiZSBjb25zdHJ1Y3RlZCBkaXJlY3RseVwiKX1pZlVuZGVmaW5lZChyKXtyZXR1cm4gcj09PXZvaWQgMD9GbjpyfX0sRm49bmV3IGJ0KENhKTtmdW5jdGlvbiBSZShlKXtyZXR1cm4gZSBpbnN0YW5jZW9mIGJ0fXZhciBubT17ZmluZFVuaXF1ZTpcImZpbmRVbmlxdWVcIixmaW5kVW5pcXVlT3JUaHJvdzpcImZpbmRVbmlxdWVPclRocm93XCIsZmluZEZpcnN0OlwiZmluZEZpcnN0XCIsZmluZEZpcnN0T3JUaHJvdzpcImZpbmRGaXJzdE9yVGhyb3dcIixmaW5kTWFueTpcImZpbmRNYW55XCIsY291bnQ6XCJhZ2dyZWdhdGVcIixjcmVhdGU6XCJjcmVhdGVPbmVcIixjcmVhdGVNYW55OlwiY3JlYXRlTWFueVwiLGNyZWF0ZU1hbnlBbmRSZXR1cm46XCJjcmVhdGVNYW55QW5kUmV0dXJuXCIsdXBkYXRlOlwidXBkYXRlT25lXCIsdXBkYXRlTWFueTpcInVwZGF0ZU1hbnlcIix1cGRhdGVNYW55QW5kUmV0dXJuOlwidXBkYXRlTWFueUFuZFJldHVyblwiLHVwc2VydDpcInVwc2VydE9uZVwiLGRlbGV0ZTpcImRlbGV0ZU9uZVwiLGRlbGV0ZU1hbnk6XCJkZWxldGVNYW55XCIsZXhlY3V0ZVJhdzpcImV4ZWN1dGVSYXdcIixxdWVyeVJhdzpcInF1ZXJ5UmF3XCIsYWdncmVnYXRlOlwiYWdncmVnYXRlXCIsZ3JvdXBCeTpcImdyb3VwQnlcIixydW5Db21tYW5kUmF3OlwicnVuQ29tbWFuZFJhd1wiLGZpbmRSYXc6XCJmaW5kUmF3XCIsYWdncmVnYXRlUmF3OlwiYWdncmVnYXRlUmF3XCJ9LElhPVwiZXhwbGljaXRseSBgdW5kZWZpbmVkYCB2YWx1ZXMgYXJlIG5vdCBhbGxvd2VkXCI7ZnVuY3Rpb24gTW4oe21vZGVsTmFtZTplLGFjdGlvbjpyLGFyZ3M6dCxydW50aW1lRGF0YU1vZGVsOm4sZXh0ZW5zaW9uczppPUxyLmVtcHR5KCksY2FsbHNpdGU6byxjbGllbnRNZXRob2Q6cyxlcnJvckZvcm1hdDphLGNsaWVudFZlcnNpb246bCxwcmV2aWV3RmVhdHVyZXM6dSxnbG9iYWxPbWl0OmN9KXtsZXQgcD1uZXcgZW8oe3J1bnRpbWVEYXRhTW9kZWw6bixtb2RlbE5hbWU6ZSxhY3Rpb246cixyb290QXJnczp0LGNhbGxzaXRlOm8sZXh0ZW5zaW9uczppLHNlbGVjdGlvblBhdGg6W10sYXJndW1lbnRQYXRoOltdLG9yaWdpbmFsTWV0aG9kOnMsZXJyb3JGb3JtYXQ6YSxjbGllbnRWZXJzaW9uOmwscHJldmlld0ZlYXR1cmVzOnUsZ2xvYmFsT21pdDpjfSk7cmV0dXJue21vZGVsTmFtZTplLGFjdGlvbjpubVtyXSxxdWVyeTpFdCh0LHApfX1mdW5jdGlvbiBFdCh7c2VsZWN0OmUsaW5jbHVkZTpyLC4uLnR9PXt9LG4pe2xldCBpPXQub21pdDtyZXR1cm4gZGVsZXRlIHQub21pdCx7YXJndW1lbnRzOkRhKHQsbiksc2VsZWN0aW9uOmltKGUscixpLG4pfX1mdW5jdGlvbiBpbShlLHIsdCxuKXtyZXR1cm4gZT8ocj9uLnRocm93VmFsaWRhdGlvbkVycm9yKHtraW5kOlwiTXV0dWFsbHlFeGNsdXNpdmVGaWVsZHNcIixmaXJzdEZpZWxkOlwiaW5jbHVkZVwiLHNlY29uZEZpZWxkOlwic2VsZWN0XCIsc2VsZWN0aW9uUGF0aDpuLmdldFNlbGVjdGlvblBhdGgoKX0pOnQmJm4udGhyb3dWYWxpZGF0aW9uRXJyb3Ioe2tpbmQ6XCJNdXR1YWxseUV4Y2x1c2l2ZUZpZWxkc1wiLGZpcnN0RmllbGQ6XCJvbWl0XCIsc2Vjb25kRmllbGQ6XCJzZWxlY3RcIixzZWxlY3Rpb25QYXRoOm4uZ2V0U2VsZWN0aW9uUGF0aCgpfSksbG0oZSxuKSk6b20obixyLHQpfWZ1bmN0aW9uIG9tKGUscix0KXtsZXQgbj17fTtyZXR1cm4gZS5tb2RlbE9yVHlwZSYmIWUuaXNSYXdBY3Rpb24oKSYmKG4uJGNvbXBvc2l0ZXM9ITAsbi4kc2NhbGFycz0hMCksciYmc20obixyLGUpLGFtKG4sdCxlKSxufWZ1bmN0aW9uIHNtKGUscix0KXtmb3IobGV0W24saV1vZiBPYmplY3QuZW50cmllcyhyKSl7aWYoUmUoaSkpY29udGludWU7bGV0IG89dC5uZXN0U2VsZWN0aW9uKG4pO2lmKHJvKGksbyksaT09PSExfHxpPT09dm9pZCAwKXtlW25dPSExO2NvbnRpbnVlfWxldCBzPXQuZmluZEZpZWxkKG4pO2lmKHMmJnMua2luZCE9PVwib2JqZWN0XCImJnQudGhyb3dWYWxpZGF0aW9uRXJyb3Ioe2tpbmQ6XCJJbmNsdWRlT25TY2FsYXJcIixzZWxlY3Rpb25QYXRoOnQuZ2V0U2VsZWN0aW9uUGF0aCgpLmNvbmNhdChuKSxvdXRwdXRUeXBlOnQuZ2V0T3V0cHV0VHlwZURlc2NyaXB0aW9uKCl9KSxzKXtlW25dPUV0KGk9PT0hMD97fTppLG8pO2NvbnRpbnVlfWlmKGk9PT0hMCl7ZVtuXT0hMDtjb250aW51ZX1lW25dPUV0KGksbyl9fWZ1bmN0aW9uIGFtKGUscix0KXtsZXQgbj10LmdldENvbXB1dGVkRmllbGRzKCksaT17Li4udC5nZXRHbG9iYWxPbWl0KCksLi4ucn0sbz1TYShpLG4pO2ZvcihsZXRbcyxhXW9mIE9iamVjdC5lbnRyaWVzKG8pKXtpZihSZShhKSljb250aW51ZTtybyhhLHQubmVzdFNlbGVjdGlvbihzKSk7bGV0IGw9dC5maW5kRmllbGQocyk7bj8uW3NdJiYhbHx8KGVbc109IWEpfX1mdW5jdGlvbiBsbShlLHIpe2xldCB0PXt9LG49ci5nZXRDb21wdXRlZEZpZWxkcygpLGk9VGEoZSxuKTtmb3IobGV0W28sc11vZiBPYmplY3QuZW50cmllcyhpKSl7aWYoUmUocykpY29udGludWU7bGV0IGE9ci5uZXN0U2VsZWN0aW9uKG8pO3JvKHMsYSk7bGV0IGw9ci5maW5kRmllbGQobyk7aWYoIShuPy5bb10mJiFsKSl7aWYocz09PSExfHxzPT09dm9pZCAwfHxSZShzKSl7dFtvXT0hMTtjb250aW51ZX1pZihzPT09ITApe2w/LmtpbmQ9PT1cIm9iamVjdFwiP3Rbb109RXQoe30sYSk6dFtvXT0hMDtjb250aW51ZX10W29dPUV0KHMsYSl9fXJldHVybiB0fWZ1bmN0aW9uIGthKGUscil7aWYoZT09PW51bGwpcmV0dXJuIG51bGw7aWYodHlwZW9mIGU9PVwic3RyaW5nXCJ8fHR5cGVvZiBlPT1cIm51bWJlclwifHx0eXBlb2YgZT09XCJib29sZWFuXCIpcmV0dXJuIGU7aWYodHlwZW9mIGU9PVwiYmlnaW50XCIpcmV0dXJueyR0eXBlOlwiQmlnSW50XCIsdmFsdWU6U3RyaW5nKGUpfTtpZihTcihlKSl7aWYod24oZSkpcmV0dXJueyR0eXBlOlwiRGF0ZVRpbWVcIix2YWx1ZTplLnRvSVNPU3RyaW5nKCl9O3IudGhyb3dWYWxpZGF0aW9uRXJyb3Ioe2tpbmQ6XCJJbnZhbGlkQXJndW1lbnRWYWx1ZVwiLHNlbGVjdGlvblBhdGg6ci5nZXRTZWxlY3Rpb25QYXRoKCksYXJndW1lbnRQYXRoOnIuZ2V0QXJndW1lbnRQYXRoKCksYXJndW1lbnQ6e25hbWU6ci5nZXRBcmd1bWVudE5hbWUoKSx0eXBlTmFtZXM6W1wiRGF0ZVwiXX0sdW5kZXJseWluZ0Vycm9yOlwiUHJvdmlkZWQgRGF0ZSBvYmplY3QgaXMgaW52YWxpZFwifSl9aWYoUmEoZSkpcmV0dXJueyR0eXBlOlwiUGFyYW1cIix2YWx1ZTplLm5hbWV9O2lmKF9yKGUpKXJldHVybnskdHlwZTpcIkZpZWxkUmVmXCIsdmFsdWU6e19yZWY6ZS5uYW1lLF9jb250YWluZXI6ZS5tb2RlbE5hbWV9fTtpZihBcnJheS5pc0FycmF5KGUpKXJldHVybiB1bShlLHIpO2lmKEFycmF5QnVmZmVyLmlzVmlldyhlKSl7bGV0e2J1ZmZlcjp0LGJ5dGVPZmZzZXQ6bixieXRlTGVuZ3RoOml9PWU7cmV0dXJueyR0eXBlOlwiQnl0ZXNcIix2YWx1ZTpCdWZmZXIuZnJvbSh0LG4saSkudG9TdHJpbmcoXCJiYXNlNjRcIil9fWlmKGNtKGUpKXJldHVybiBlLnZhbHVlcztpZihScihlKSlyZXR1cm57JHR5cGU6XCJEZWNpbWFsXCIsdmFsdWU6ZS50b0ZpeGVkKCl9O2lmKGUgaW5zdGFuY2VvZiBNZSl7aWYoZSE9PWtuLmluc3RhbmNlc1tlLl9nZXROYW1lKCldKXRocm93IG5ldyBFcnJvcihcIkludmFsaWQgT2JqZWN0RW51bVZhbHVlXCIpO3JldHVybnskdHlwZTpcIkVudW1cIix2YWx1ZTplLl9nZXROYW1lKCl9fWlmKHBtKGUpKXJldHVybiBlLnRvSlNPTigpO2lmKHR5cGVvZiBlPT1cIm9iamVjdFwiKXJldHVybiBEYShlLHIpO3IudGhyb3dWYWxpZGF0aW9uRXJyb3Ioe2tpbmQ6XCJJbnZhbGlkQXJndW1lbnRWYWx1ZVwiLHNlbGVjdGlvblBhdGg6ci5nZXRTZWxlY3Rpb25QYXRoKCksYXJndW1lbnRQYXRoOnIuZ2V0QXJndW1lbnRQYXRoKCksYXJndW1lbnQ6e25hbWU6ci5nZXRBcmd1bWVudE5hbWUoKSx0eXBlTmFtZXM6W119LHVuZGVybHlpbmdFcnJvcjpgV2UgY291bGQgbm90IHNlcmlhbGl6ZSAke09iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKX0gdmFsdWUuIFNlcmlhbGl6ZSB0aGUgb2JqZWN0IHRvIEpTT04gb3IgaW1wbGVtZW50IGEgXCIudG9KU09OKClcIiBtZXRob2Qgb24gaXRgfSl9ZnVuY3Rpb24gRGEoZSxyKXtpZihlLiR0eXBlKXJldHVybnskdHlwZTpcIlJhd1wiLHZhbHVlOmV9O2xldCB0PXt9O2ZvcihsZXQgbiBpbiBlKXtsZXQgaT1lW25dLG89ci5uZXN0QXJndW1lbnQobik7UmUoaSl8fChpIT09dm9pZCAwP3Rbbl09a2EoaSxvKTpyLmlzUHJldmlld0ZlYXR1cmVPbihcInN0cmljdFVuZGVmaW5lZENoZWNrc1wiKSYmci50aHJvd1ZhbGlkYXRpb25FcnJvcih7a2luZDpcIkludmFsaWRBcmd1bWVudFZhbHVlXCIsYXJndW1lbnRQYXRoOm8uZ2V0QXJndW1lbnRQYXRoKCksc2VsZWN0aW9uUGF0aDpyLmdldFNlbGVjdGlvblBhdGgoKSxhcmd1bWVudDp7bmFtZTpyLmdldEFyZ3VtZW50TmFtZSgpLHR5cGVOYW1lczpbXX0sdW5kZXJseWluZ0Vycm9yOklhfSkpfXJldHVybiB0fWZ1bmN0aW9uIHVtKGUscil7bGV0IHQ9W107Zm9yKGxldCBuPTA7bjxlLmxlbmd0aDtuKyspe2xldCBpPXIubmVzdEFyZ3VtZW50KFN0cmluZyhuKSksbz1lW25dO2lmKG89PT12b2lkIDB8fFJlKG8pKXtsZXQgcz1vPT09dm9pZCAwP1widW5kZWZpbmVkXCI6XCJQcmlzbWEuc2tpcFwiO3IudGhyb3dWYWxpZGF0aW9uRXJyb3Ioe2tpbmQ6XCJJbnZhbGlkQXJndW1lbnRWYWx1ZVwiLHNlbGVjdGlvblBhdGg6aS5nZXRTZWxlY3Rpb25QYXRoKCksYXJndW1lbnRQYXRoOmkuZ2V0QXJndW1lbnRQYXRoKCksYXJndW1lbnQ6e25hbWU6YCR7ci5nZXRBcmd1bWVudE5hbWUoKX1bJHtufV1gLHR5cGVOYW1lczpbXX0sdW5kZXJseWluZ0Vycm9yOmBDYW4gbm90IHVzZSBcXGAke3N9XFxgIHZhbHVlIHdpdGhpbiBhcnJheS4gVXNlIFxcYG51bGxcXGAgb3IgZmlsdGVyIG91dCBcXGAke3N9XFxgIHZhbHVlc2B9KX10LnB1c2goa2EobyxpKSl9cmV0dXJuIHR9ZnVuY3Rpb24gY20oZSl7cmV0dXJuIHR5cGVvZiBlPT1cIm9iamVjdFwiJiZlIT09bnVsbCYmZS5fX3ByaXNtYVJhd1BhcmFtZXRlcnNfXz09PSEwfWZ1bmN0aW9uIHBtKGUpe3JldHVybiB0eXBlb2YgZT09XCJvYmplY3RcIiYmZSE9PW51bGwmJnR5cGVvZiBlLnRvSlNPTj09XCJmdW5jdGlvblwifWZ1bmN0aW9uIHJvKGUscil7ZT09PXZvaWQgMCYmci5pc1ByZXZpZXdGZWF0dXJlT24oXCJzdHJpY3RVbmRlZmluZWRDaGVja3NcIikmJnIudGhyb3dWYWxpZGF0aW9uRXJyb3Ioe2tpbmQ6XCJJbnZhbGlkU2VsZWN0aW9uVmFsdWVcIixzZWxlY3Rpb25QYXRoOnIuZ2V0U2VsZWN0aW9uUGF0aCgpLHVuZGVybHlpbmdFcnJvcjpJYX0pfXZhciBlbz1jbGFzcyBle2NvbnN0cnVjdG9yKHIpe3RoaXMucGFyYW1zPXI7dGhpcy5wYXJhbXMubW9kZWxOYW1lJiYodGhpcy5tb2RlbE9yVHlwZT10aGlzLnBhcmFtcy5ydW50aW1lRGF0YU1vZGVsLm1vZGVsc1t0aGlzLnBhcmFtcy5tb2RlbE5hbWVdPz90aGlzLnBhcmFtcy5ydW50aW1lRGF0YU1vZGVsLnR5cGVzW3RoaXMucGFyYW1zLm1vZGVsTmFtZV0pfW1vZGVsT3JUeXBlO3Rocm93VmFsaWRhdGlvbkVycm9yKHIpe19uKHtlcnJvcnM6W3JdLG9yaWdpbmFsTWV0aG9kOnRoaXMucGFyYW1zLm9yaWdpbmFsTWV0aG9kLGFyZ3M6dGhpcy5wYXJhbXMucm9vdEFyZ3M/P3t9LGNhbGxzaXRlOnRoaXMucGFyYW1zLmNhbGxzaXRlLGVycm9yRm9ybWF0OnRoaXMucGFyYW1zLmVycm9yRm9ybWF0LGNsaWVudFZlcnNpb246dGhpcy5wYXJhbXMuY2xpZW50VmVyc2lvbixnbG9iYWxPbWl0OnRoaXMucGFyYW1zLmdsb2JhbE9taXR9KX1nZXRTZWxlY3Rpb25QYXRoKCl7cmV0dXJuIHRoaXMucGFyYW1zLnNlbGVjdGlvblBhdGh9Z2V0QXJndW1lbnRQYXRoKCl7cmV0dXJuIHRoaXMucGFyYW1zLmFyZ3VtZW50UGF0aH1nZXRBcmd1bWVudE5hbWUoKXtyZXR1cm4gdGhpcy5wYXJhbXMuYXJndW1lbnRQYXRoW3RoaXMucGFyYW1zLmFyZ3VtZW50UGF0aC5sZW5ndGgtMV19Z2V0T3V0cHV0VHlwZURlc2NyaXB0aW9uKCl7aWYoISghdGhpcy5wYXJhbXMubW9kZWxOYW1lfHwhdGhpcy5tb2RlbE9yVHlwZSkpcmV0dXJue25hbWU6dGhpcy5wYXJhbXMubW9kZWxOYW1lLGZpZWxkczp0aGlzLm1vZGVsT3JUeXBlLmZpZWxkcy5tYXAocj0+KHtuYW1lOnIubmFtZSx0eXBlTmFtZTpcImJvb2xlYW5cIixpc1JlbGF0aW9uOnIua2luZD09PVwib2JqZWN0XCJ9KSl9fWlzUmF3QWN0aW9uKCl7cmV0dXJuW1wiZXhlY3V0ZVJhd1wiLFwicXVlcnlSYXdcIixcInJ1bkNvbW1hbmRSYXdcIixcImZpbmRSYXdcIixcImFnZ3JlZ2F0ZVJhd1wiXS5pbmNsdWRlcyh0aGlzLnBhcmFtcy5hY3Rpb24pfWlzUHJldmlld0ZlYXR1cmVPbihyKXtyZXR1cm4gdGhpcy5wYXJhbXMucHJldmlld0ZlYXR1cmVzLmluY2x1ZGVzKHIpfWdldENvbXB1dGVkRmllbGRzKCl7aWYodGhpcy5wYXJhbXMubW9kZWxOYW1lKXJldHVybiB0aGlzLnBhcmFtcy5leHRlbnNpb25zLmdldEFsbENvbXB1dGVkRmllbGRzKHRoaXMucGFyYW1zLm1vZGVsTmFtZSl9ZmluZEZpZWxkKHIpe3JldHVybiB0aGlzLm1vZGVsT3JUeXBlPy5maWVsZHMuZmluZCh0PT50Lm5hbWU9PT1yKX1uZXN0U2VsZWN0aW9uKHIpe2xldCB0PXRoaXMuZmluZEZpZWxkKHIpLG49dD8ua2luZD09PVwib2JqZWN0XCI/dC50eXBlOnZvaWQgMDtyZXR1cm4gbmV3IGUoey4uLnRoaXMucGFyYW1zLG1vZGVsTmFtZTpuLHNlbGVjdGlvblBhdGg6dGhpcy5wYXJhbXMuc2VsZWN0aW9uUGF0aC5jb25jYXQocil9KX1nZXRHbG9iYWxPbWl0KCl7cmV0dXJuIHRoaXMucGFyYW1zLm1vZGVsTmFtZSYmdGhpcy5zaG91bGRBcHBseUdsb2JhbE9taXQoKT90aGlzLnBhcmFtcy5nbG9iYWxPbWl0Py5bWWUodGhpcy5wYXJhbXMubW9kZWxOYW1lKV0/P3t9Ont9fXNob3VsZEFwcGx5R2xvYmFsT21pdCgpe3N3aXRjaCh0aGlzLnBhcmFtcy5hY3Rpb24pe2Nhc2VcImZpbmRGaXJzdFwiOmNhc2VcImZpbmRGaXJzdE9yVGhyb3dcIjpjYXNlXCJmaW5kVW5pcXVlT3JUaHJvd1wiOmNhc2VcImZpbmRNYW55XCI6Y2FzZVwidXBzZXJ0XCI6Y2FzZVwiZmluZFVuaXF1ZVwiOmNhc2VcImNyZWF0ZU1hbnlBbmRSZXR1cm5cIjpjYXNlXCJjcmVhdGVcIjpjYXNlXCJ1cGRhdGVcIjpjYXNlXCJ1cGRhdGVNYW55QW5kUmV0dXJuXCI6Y2FzZVwiZGVsZXRlXCI6cmV0dXJuITA7Y2FzZVwiZXhlY3V0ZVJhd1wiOmNhc2VcImFnZ3JlZ2F0ZVJhd1wiOmNhc2VcInJ1bkNvbW1hbmRSYXdcIjpjYXNlXCJmaW5kUmF3XCI6Y2FzZVwiY3JlYXRlTWFueVwiOmNhc2VcImRlbGV0ZU1hbnlcIjpjYXNlXCJncm91cEJ5XCI6Y2FzZVwidXBkYXRlTWFueVwiOmNhc2VcImNvdW50XCI6Y2FzZVwiYWdncmVnYXRlXCI6Y2FzZVwicXVlcnlSYXdcIjpyZXR1cm4hMTtkZWZhdWx0Ok5lKHRoaXMucGFyYW1zLmFjdGlvbixcIlVua25vd24gYWN0aW9uXCIpfX1uZXN0QXJndW1lbnQocil7cmV0dXJuIG5ldyBlKHsuLi50aGlzLnBhcmFtcyxhcmd1bWVudFBhdGg6dGhpcy5wYXJhbXMuYXJndW1lbnRQYXRoLmNvbmNhdChyKX0pfX07ZnVuY3Rpb24gT2EoZSl7aWYoIWUuX2hhc1ByZXZpZXdGbGFnKFwibWV0cmljc1wiKSl0aHJvdyBuZXcgWihcImBtZXRyaWNzYCBwcmV2aWV3IGZlYXR1cmUgbXVzdCBiZSBlbmFibGVkIGluIG9yZGVyIHRvIGFjY2VzcyBtZXRyaWNzIEFQSVwiLHtjbGllbnRWZXJzaW9uOmUuX2NsaWVudFZlcnNpb259KX12YXIgRnI9Y2xhc3N7X2NsaWVudDtjb25zdHJ1Y3RvcihyKXt0aGlzLl9jbGllbnQ9cn1wcm9tZXRoZXVzKHIpe3JldHVybiBPYSh0aGlzLl9jbGllbnQpLHRoaXMuX2NsaWVudC5fZW5naW5lLm1ldHJpY3Moe2Zvcm1hdDpcInByb21ldGhldXNcIiwuLi5yfSl9anNvbihyKXtyZXR1cm4gT2EodGhpcy5fY2xpZW50KSx0aGlzLl9jbGllbnQuX2VuZ2luZS5tZXRyaWNzKHtmb3JtYXQ6XCJqc29uXCIsLi4ucn0pfX07ZnVuY3Rpb24gX2EoZSxyKXtsZXQgdD11dCgoKT0+ZG0ocikpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiZG1tZlwiLHtnZXQ6KCk9PnQuZ2V0KCl9KX1mdW5jdGlvbiBkbShlKXtyZXR1cm57ZGF0YW1vZGVsOnttb2RlbHM6dG8oZS5tb2RlbHMpLGVudW1zOnRvKGUuZW51bXMpLHR5cGVzOnRvKGUudHlwZXMpfX19ZnVuY3Rpb24gdG8oZSl7cmV0dXJuIE9iamVjdC5lbnRyaWVzKGUpLm1hcCgoW3IsdF0pPT4oe25hbWU6ciwuLi50fSkpfXZhciBubz1uZXcgV2Vha01hcCwkbj1cIiQkUHJpc21hVHlwZWRTcWxcIix3dD1jbGFzc3tjb25zdHJ1Y3RvcihyLHQpe25vLnNldCh0aGlzLHtzcWw6cix2YWx1ZXM6dH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCRuLHt2YWx1ZTokbn0pfWdldCBzcWwoKXtyZXR1cm4gbm8uZ2V0KHRoaXMpLnNxbH1nZXQgdmFsdWVzKCl7cmV0dXJuIG5vLmdldCh0aGlzKS52YWx1ZXN9fTtmdW5jdGlvbiBOYShlKXtyZXR1cm4oLi4ucik9Pm5ldyB3dChlLHIpfWZ1bmN0aW9uIHFuKGUpe3JldHVybiBlIT1udWxsJiZlWyRuXT09PSRufXZhciBmdT1DKFNpKCkpO3ZhciBndT1yZXF1aXJlKFwibm9kZTphc3luY19ob29rc1wiKSxodT1yZXF1aXJlKFwibm9kZTpldmVudHNcIikseXU9QyhyZXF1aXJlKFwibm9kZTpmc1wiKSksdGk9QyhyZXF1aXJlKFwibm9kZTpwYXRoXCIpKTt2YXIgb2U9Y2xhc3MgZXtjb25zdHJ1Y3RvcihyLHQpe2lmKHIubGVuZ3RoLTEhPT10Lmxlbmd0aCl0aHJvdyByLmxlbmd0aD09PTA/bmV3IFR5cGVFcnJvcihcIkV4cGVjdGVkIGF0IGxlYXN0IDEgc3RyaW5nXCIpOm5ldyBUeXBlRXJyb3IoYEV4cGVjdGVkICR7ci5sZW5ndGh9IHN0cmluZ3MgdG8gaGF2ZSAke3IubGVuZ3RoLTF9IHZhbHVlc2ApO2xldCBuPXQucmVkdWNlKChzLGEpPT5zKyhhIGluc3RhbmNlb2YgZT9hLnZhbHVlcy5sZW5ndGg6MSksMCk7dGhpcy52YWx1ZXM9bmV3IEFycmF5KG4pLHRoaXMuc3RyaW5ncz1uZXcgQXJyYXkobisxKSx0aGlzLnN0cmluZ3NbMF09clswXTtsZXQgaT0wLG89MDtmb3IoO2k8dC5sZW5ndGg7KXtsZXQgcz10W2krK10sYT1yW2ldO2lmKHMgaW5zdGFuY2VvZiBlKXt0aGlzLnN0cmluZ3Nbb10rPXMuc3RyaW5nc1swXTtsZXQgbD0wO2Zvcig7bDxzLnZhbHVlcy5sZW5ndGg7KXRoaXMudmFsdWVzW28rK109cy52YWx1ZXNbbCsrXSx0aGlzLnN0cmluZ3Nbb109cy5zdHJpbmdzW2xdO3RoaXMuc3RyaW5nc1tvXSs9YX1lbHNlIHRoaXMudmFsdWVzW28rK109cyx0aGlzLnN0cmluZ3Nbb109YX19Z2V0IHNxbCgpe2xldCByPXRoaXMuc3RyaW5ncy5sZW5ndGgsdD0xLG49dGhpcy5zdHJpbmdzWzBdO2Zvcig7dDxyOyluKz1gPyR7dGhpcy5zdHJpbmdzW3QrK119YDtyZXR1cm4gbn1nZXQgc3RhdGVtZW50KCl7bGV0IHI9dGhpcy5zdHJpbmdzLmxlbmd0aCx0PTEsbj10aGlzLnN0cmluZ3NbMF07Zm9yKDt0PHI7KW4rPWA6JHt0fSR7dGhpcy5zdHJpbmdzW3QrK119YDtyZXR1cm4gbn1nZXQgdGV4dCgpe2xldCByPXRoaXMuc3RyaW5ncy5sZW5ndGgsdD0xLG49dGhpcy5zdHJpbmdzWzBdO2Zvcig7dDxyOyluKz1gJCR7dH0ke3RoaXMuc3RyaW5nc1t0KytdfWA7cmV0dXJuIG59aW5zcGVjdCgpe3JldHVybntzcWw6dGhpcy5zcWwsc3RhdGVtZW50OnRoaXMuc3RhdGVtZW50LHRleHQ6dGhpcy50ZXh0LHZhbHVlczp0aGlzLnZhbHVlc319fTtmdW5jdGlvbiBMYShlLHI9XCIsXCIsdD1cIlwiLG49XCJcIil7aWYoZS5sZW5ndGg9PT0wKXRocm93IG5ldyBUeXBlRXJyb3IoXCJFeHBlY3RlZCBgam9pbihbXSlgIHRvIGJlIGNhbGxlZCB3aXRoIGFuIGFycmF5IG9mIG11bHRpcGxlIGVsZW1lbnRzLCBidXQgZ290IGFuIGVtcHR5IGFycmF5XCIpO3JldHVybiBuZXcgb2UoW3QsLi4uQXJyYXkoZS5sZW5ndGgtMSkuZmlsbChyKSxuXSxlKX1mdW5jdGlvbiBpbyhlKXtyZXR1cm4gbmV3IG9lKFtlXSxbXSl9dmFyIEZhPWlvKFwiXCIpO2Z1bmN0aW9uIG9vKGUsLi4ucil7cmV0dXJuIG5ldyBvZShlLHIpfWZ1bmN0aW9uIHh0KGUpe3JldHVybntnZXRLZXlzKCl7cmV0dXJuIE9iamVjdC5rZXlzKGUpfSxnZXRQcm9wZXJ0eVZhbHVlKHIpe3JldHVybiBlW3JdfX19ZnVuY3Rpb24gcmUoZSxyKXtyZXR1cm57Z2V0S2V5cygpe3JldHVybltlXX0sZ2V0UHJvcGVydHlWYWx1ZSgpe3JldHVybiByKCl9fX1mdW5jdGlvbiBscihlKXtsZXQgcj1uZXcgUGU7cmV0dXJue2dldEtleXMoKXtyZXR1cm4gZS5nZXRLZXlzKCl9LGdldFByb3BlcnR5VmFsdWUodCl7cmV0dXJuIHIuZ2V0T3JDcmVhdGUodCwoKT0+ZS5nZXRQcm9wZXJ0eVZhbHVlKHQpKX0sZ2V0UHJvcGVydHlEZXNjcmlwdG9yKHQpe3JldHVybiBlLmdldFByb3BlcnR5RGVzY3JpcHRvcj8uKHQpfX19dmFyIGpuPXtlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMCx3cml0YWJsZTohMH07ZnVuY3Rpb24gVm4oZSl7bGV0IHI9bmV3IFNldChlKTtyZXR1cm57Z2V0UHJvdG90eXBlT2Y6KCk9Pk9iamVjdC5wcm90b3R5cGUsZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOigpPT5qbixoYXM6KHQsbik9PnIuaGFzKG4pLHNldDoodCxuLGkpPT5yLmFkZChuKSYmUmVmbGVjdC5zZXQodCxuLGkpLG93bktleXM6KCk9PlsuLi5yXX19dmFyIE1hPVN5bWJvbC5mb3IoXCJub2RlanMudXRpbC5pbnNwZWN0LmN1c3RvbVwiKTtmdW5jdGlvbiBoZShlLHIpe2xldCB0PW1tKHIpLG49bmV3IFNldCxpPW5ldyBQcm94eShlLHtnZXQobyxzKXtpZihuLmhhcyhzKSlyZXR1cm4gb1tzXTtsZXQgYT10LmdldChzKTtyZXR1cm4gYT9hLmdldFByb3BlcnR5VmFsdWUocyk6b1tzXX0saGFzKG8scyl7aWYobi5oYXMocykpcmV0dXJuITA7bGV0IGE9dC5nZXQocyk7cmV0dXJuIGE/YS5oYXM/LihzKT8/ITA6UmVmbGVjdC5oYXMobyxzKX0sb3duS2V5cyhvKXtsZXQgcz0kYShSZWZsZWN0Lm93bktleXMobyksdCksYT0kYShBcnJheS5mcm9tKHQua2V5cygpKSx0KTtyZXR1cm5bLi4ubmV3IFNldChbLi4ucywuLi5hLC4uLm5dKV19LHNldChvLHMsYSl7cmV0dXJuIHQuZ2V0KHMpPy5nZXRQcm9wZXJ0eURlc2NyaXB0b3I/LihzKT8ud3JpdGFibGU9PT0hMT8hMToobi5hZGQocyksUmVmbGVjdC5zZXQobyxzLGEpKX0sZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG8scyl7bGV0IGE9UmVmbGVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobyxzKTtpZihhJiYhYS5jb25maWd1cmFibGUpcmV0dXJuIGE7bGV0IGw9dC5nZXQocyk7cmV0dXJuIGw/bC5nZXRQcm9wZXJ0eURlc2NyaXB0b3I/ey4uLmpuLC4uLmw/LmdldFByb3BlcnR5RGVzY3JpcHRvcihzKX06am46YX0sZGVmaW5lUHJvcGVydHkobyxzLGEpe3JldHVybiBuLmFkZChzKSxSZWZsZWN0LmRlZmluZVByb3BlcnR5KG8scyxhKX0sZ2V0UHJvdG90eXBlT2Y6KCk9Pk9iamVjdC5wcm90b3R5cGV9KTtyZXR1cm4gaVtNYV09ZnVuY3Rpb24oKXtsZXQgbz17Li4udGhpc307cmV0dXJuIGRlbGV0ZSBvW01hXSxvfSxpfWZ1bmN0aW9uIG1tKGUpe2xldCByPW5ldyBNYXA7Zm9yKGxldCB0IG9mIGUpe2xldCBuPXQuZ2V0S2V5cygpO2ZvcihsZXQgaSBvZiBuKXIuc2V0KGksdCl9cmV0dXJuIHJ9ZnVuY3Rpb24gJGEoZSxyKXtyZXR1cm4gZS5maWx0ZXIodD0+ci5nZXQodCk/Lmhhcz8uKHQpPz8hMCl9ZnVuY3Rpb24gTXIoZSl7cmV0dXJue2dldEtleXMoKXtyZXR1cm4gZX0saGFzKCl7cmV0dXJuITF9LGdldFByb3BlcnR5VmFsdWUoKXt9fX1mdW5jdGlvbiAkcihlLHIpe3JldHVybntiYXRjaDplLHRyYW5zYWN0aW9uOnI/LmtpbmQ9PT1cImJhdGNoXCI/e2lzb2xhdGlvbkxldmVsOnIub3B0aW9ucy5pc29sYXRpb25MZXZlbH06dm9pZCAwfX1mdW5jdGlvbiBxYShlKXtpZihlPT09dm9pZCAwKXJldHVyblwiXCI7bGV0IHI9TnIoZSk7cmV0dXJuIG5ldyBDcigwLHtjb2xvcnM6QW59KS53cml0ZShyKS50b1N0cmluZygpfXZhciBmbT1cIlAyMDM3XCI7ZnVuY3Rpb24gcXIoe2Vycm9yOmUsdXNlcl9mYWNpbmdfZXJyb3I6cn0sdCxuKXtyZXR1cm4gci5lcnJvcl9jb2RlP25ldyB6KGdtKHIsbikse2NvZGU6ci5lcnJvcl9jb2RlLGNsaWVudFZlcnNpb246dCxtZXRhOnIubWV0YSxiYXRjaFJlcXVlc3RJZHg6ci5iYXRjaF9yZXF1ZXN0X2lkeH0pOm5ldyBqKGUse2NsaWVudFZlcnNpb246dCxiYXRjaFJlcXVlc3RJZHg6ci5iYXRjaF9yZXF1ZXN0X2lkeH0pfWZ1bmN0aW9uIGdtKGUscil7bGV0IHQ9ZS5tZXNzYWdlO3JldHVybihyPT09XCJwb3N0Z3Jlc3FsXCJ8fHI9PT1cInBvc3RncmVzXCJ8fHI9PT1cIm15c3FsXCIpJiZlLmVycm9yX2NvZGU9PT1mbSYmKHQrPWBcblByaXNtYSBBY2NlbGVyYXRlIGhhcyBidWlsdC1pbiBjb25uZWN0aW9uIHBvb2xpbmcgdG8gcHJldmVudCBzdWNoIGVycm9yczogaHR0cHM6Ly9wcmlzLmx5L2NsaWVudC9lcnJvci1hY2NlbGVyYXRlYCksdH12YXIgdnQ9XCI8dW5rbm93bj5cIjtmdW5jdGlvbiBqYShlKXt2YXIgcj1lLnNwbGl0KGBcbmApO3JldHVybiByLnJlZHVjZShmdW5jdGlvbih0LG4pe3ZhciBpPWJtKG4pfHx3bShuKXx8UG0obil8fEFtKG4pfHxTbShuKTtyZXR1cm4gaSYmdC5wdXNoKGkpLHR9LFtdKX12YXIgaG09L15cXHMqYXQgKC4qPykgP1xcKCgoPzpmaWxlfGh0dHBzP3xibG9ifGNocm9tZS1leHRlbnNpb258bmF0aXZlfGV2YWx8d2VicGFja3xyc2N8PGFub255bW91cz58XFwvfFthLXpdOlxcXFx8XFxcXFxcXFwpLio/KSg/OjooXFxkKykpPyg/OjooXFxkKykpP1xcKT9cXHMqJC9pLHltPS9cXCgoXFxTKikoPzo6KFxcZCspKSg/OjooXFxkKykpXFwpLztmdW5jdGlvbiBibShlKXt2YXIgcj1obS5leGVjKGUpO2lmKCFyKXJldHVybiBudWxsO3ZhciB0PXJbMl0mJnJbMl0uaW5kZXhPZihcIm5hdGl2ZVwiKT09PTAsbj1yWzJdJiZyWzJdLmluZGV4T2YoXCJldmFsXCIpPT09MCxpPXltLmV4ZWMoclsyXSk7cmV0dXJuIG4mJmkhPW51bGwmJihyWzJdPWlbMV0sclszXT1pWzJdLHJbNF09aVszXSkse2ZpbGU6dD9udWxsOnJbMl0sbWV0aG9kTmFtZTpyWzFdfHx2dCxhcmd1bWVudHM6dD9bclsyXV06W10sbGluZU51bWJlcjpyWzNdPytyWzNdOm51bGwsY29sdW1uOnJbNF0/K3JbNF06bnVsbH19dmFyIEVtPS9eXFxzKmF0ICg/OigoPzpcXFtvYmplY3Qgb2JqZWN0XFxdKT8uKykgKT9cXCg/KCg/OmZpbGV8bXMtYXBweHxodHRwcz98d2VicGFja3xyc2N8YmxvYik6Lio/KTooXFxkKykoPzo6KFxcZCspKT9cXCk/XFxzKiQvaTtmdW5jdGlvbiB3bShlKXt2YXIgcj1FbS5leGVjKGUpO3JldHVybiByP3tmaWxlOnJbMl0sbWV0aG9kTmFtZTpyWzFdfHx2dCxhcmd1bWVudHM6W10sbGluZU51bWJlcjorclszXSxjb2x1bW46cls0XT8rcls0XTpudWxsfTpudWxsfXZhciB4bT0vXlxccyooLio/KSg/OlxcKCguKj8pXFwpKT8oPzpefEApKCg/OmZpbGV8aHR0cHM/fGJsb2J8Y2hyb21lfHdlYnBhY2t8cnNjfHJlc291cmNlfFxcW25hdGl2ZSkuKj98W15AXSpidW5kbGUpKD86OihcXGQrKSk/KD86OihcXGQrKSk/XFxzKiQvaSx2bT0vKFxcUyspIGxpbmUgKFxcZCspKD86ID4gZXZhbCBsaW5lIFxcZCspKiA+IGV2YWwvaTtmdW5jdGlvbiBQbShlKXt2YXIgcj14bS5leGVjKGUpO2lmKCFyKXJldHVybiBudWxsO3ZhciB0PXJbM10mJnJbM10uaW5kZXhPZihcIiA+IGV2YWxcIik+LTEsbj12bS5leGVjKHJbM10pO3JldHVybiB0JiZuIT1udWxsJiYoclszXT1uWzFdLHJbNF09blsyXSxyWzVdPW51bGwpLHtmaWxlOnJbM10sbWV0aG9kTmFtZTpyWzFdfHx2dCxhcmd1bWVudHM6clsyXT9yWzJdLnNwbGl0KFwiLFwiKTpbXSxsaW5lTnVtYmVyOnJbNF0/K3JbNF06bnVsbCxjb2x1bW46cls1XT8rcls1XTpudWxsfX12YXIgVG09L15cXHMqKD86KFteQF0qKSg/OlxcKCguKj8pXFwpKT9AKT8oXFxTLio/KTooXFxkKykoPzo6KFxcZCspKT9cXHMqJC9pO2Z1bmN0aW9uIFNtKGUpe3ZhciByPVRtLmV4ZWMoZSk7cmV0dXJuIHI/e2ZpbGU6clszXSxtZXRob2ROYW1lOnJbMV18fHZ0LGFyZ3VtZW50czpbXSxsaW5lTnVtYmVyOityWzRdLGNvbHVtbjpyWzVdPytyWzVdOm51bGx9Om51bGx9dmFyIFJtPS9eXFxzKmF0ICg/OigoPzpcXFtvYmplY3Qgb2JqZWN0XFxdKT9bXlxcXFwvXSsoPzogXFxbYXMgXFxTK1xcXSk/KSApP1xcKD8oLio/KTooXFxkKykoPzo6KFxcZCspKT9cXCk/XFxzKiQvaTtmdW5jdGlvbiBBbShlKXt2YXIgcj1SbS5leGVjKGUpO3JldHVybiByP3tmaWxlOnJbMl0sbWV0aG9kTmFtZTpyWzFdfHx2dCxhcmd1bWVudHM6W10sbGluZU51bWJlcjorclszXSxjb2x1bW46cls0XT8rcls0XTpudWxsfTpudWxsfXZhciBzbz1jbGFzc3tnZXRMb2NhdGlvbigpe3JldHVybiBudWxsfX0sYW89Y2xhc3N7X2Vycm9yO2NvbnN0cnVjdG9yKCl7dGhpcy5fZXJyb3I9bmV3IEVycm9yfWdldExvY2F0aW9uKCl7bGV0IHI9dGhpcy5fZXJyb3Iuc3RhY2s7aWYoIXIpcmV0dXJuIG51bGw7bGV0IG49amEocikuZmluZChpPT57aWYoIWkuZmlsZSlyZXR1cm4hMTtsZXQgbz1GaShpLmZpbGUpO3JldHVybiBvIT09XCI8YW5vbnltb3VzPlwiJiYhby5pbmNsdWRlcyhcIkBwcmlzbWFcIikmJiFvLmluY2x1ZGVzKFwiL3BhY2thZ2VzL2NsaWVudC9zcmMvcnVudGltZS9cIikmJiFvLmVuZHNXaXRoKFwiL3J1bnRpbWUvYmluYXJ5LmpzXCIpJiYhby5lbmRzV2l0aChcIi9ydW50aW1lL2xpYnJhcnkuanNcIikmJiFvLmVuZHNXaXRoKFwiL3J1bnRpbWUvZWRnZS5qc1wiKSYmIW8uZW5kc1dpdGgoXCIvcnVudGltZS9lZGdlLWVzbS5qc1wiKSYmIW8uc3RhcnRzV2l0aChcImludGVybmFsL1wiKSYmIWkubWV0aG9kTmFtZS5pbmNsdWRlcyhcIm5ldyBcIikmJiFpLm1ldGhvZE5hbWUuaW5jbHVkZXMoXCJnZXRDYWxsU2l0ZVwiKSYmIWkubWV0aG9kTmFtZS5pbmNsdWRlcyhcIlByb3h5LlwiKSYmaS5tZXRob2ROYW1lLnNwbGl0KFwiLlwiKS5sZW5ndGg8NH0pO3JldHVybiFufHwhbi5maWxlP251bGw6e2ZpbGVOYW1lOm4uZmlsZSxsaW5lTnVtYmVyOm4ubGluZU51bWJlcixjb2x1bW5OdW1iZXI6bi5jb2x1bW59fX07ZnVuY3Rpb24gWmUoZSl7cmV0dXJuIGU9PT1cIm1pbmltYWxcIj90eXBlb2YgJEVuYWJsZWRDYWxsU2l0ZT09XCJmdW5jdGlvblwiJiZlIT09XCJtaW5pbWFsXCI/bmV3ICRFbmFibGVkQ2FsbFNpdGU6bmV3IHNvOm5ldyBhb312YXIgVmE9e19hdmc6ITAsX2NvdW50OiEwLF9zdW06ITAsX21pbjohMCxfbWF4OiEwfTtmdW5jdGlvbiBqcihlPXt9KXtsZXQgcj1JbShlKTtyZXR1cm4gT2JqZWN0LmVudHJpZXMocikucmVkdWNlKChuLFtpLG9dKT0+KFZhW2ldIT09dm9pZCAwP24uc2VsZWN0W2ldPXtzZWxlY3Q6b306bltpXT1vLG4pLHtzZWxlY3Q6e319KX1mdW5jdGlvbiBJbShlPXt9KXtyZXR1cm4gdHlwZW9mIGUuX2NvdW50PT1cImJvb2xlYW5cIj97Li4uZSxfY291bnQ6e19hbGw6ZS5fY291bnR9fTplfWZ1bmN0aW9uIEJuKGU9e30pe3JldHVybiByPT4odHlwZW9mIGUuX2NvdW50PT1cImJvb2xlYW5cIiYmKHIuX2NvdW50PXIuX2NvdW50Ll9hbGwpLHIpfWZ1bmN0aW9uIEJhKGUscil7bGV0IHQ9Qm4oZSk7cmV0dXJuIHIoe2FjdGlvbjpcImFnZ3JlZ2F0ZVwiLHVucGFja2VyOnQsYXJnc01hcHBlcjpqcn0pKGUpfWZ1bmN0aW9uIGttKGU9e30pe2xldHtzZWxlY3Q6ciwuLi50fT1lO3JldHVybiB0eXBlb2Ygcj09XCJvYmplY3RcIj9qcih7Li4udCxfY291bnQ6cn0pOmpyKHsuLi50LF9jb3VudDp7X2FsbDohMH19KX1mdW5jdGlvbiBEbShlPXt9KXtyZXR1cm4gdHlwZW9mIGUuc2VsZWN0PT1cIm9iamVjdFwiP3I9PkJuKGUpKHIpLl9jb3VudDpyPT5CbihlKShyKS5fY291bnQuX2FsbH1mdW5jdGlvbiBVYShlLHIpe3JldHVybiByKHthY3Rpb246XCJjb3VudFwiLHVucGFja2VyOkRtKGUpLGFyZ3NNYXBwZXI6a219KShlKX1mdW5jdGlvbiBPbShlPXt9KXtsZXQgcj1qcihlKTtpZihBcnJheS5pc0FycmF5KHIuYnkpKWZvcihsZXQgdCBvZiByLmJ5KXR5cGVvZiB0PT1cInN0cmluZ1wiJiYoci5zZWxlY3RbdF09ITApO2Vsc2UgdHlwZW9mIHIuYnk9PVwic3RyaW5nXCImJihyLnNlbGVjdFtyLmJ5XT0hMCk7cmV0dXJuIHJ9ZnVuY3Rpb24gX20oZT17fSl7cmV0dXJuIHI9Pih0eXBlb2YgZT8uX2NvdW50PT1cImJvb2xlYW5cIiYmci5mb3JFYWNoKHQ9Pnt0Ll9jb3VudD10Ll9jb3VudC5fYWxsfSkscil9ZnVuY3Rpb24gR2EoZSxyKXtyZXR1cm4gcih7YWN0aW9uOlwiZ3JvdXBCeVwiLHVucGFja2VyOl9tKGUpLGFyZ3NNYXBwZXI6T219KShlKX1mdW5jdGlvbiBRYShlLHIsdCl7aWYocj09PVwiYWdncmVnYXRlXCIpcmV0dXJuIG49PkJhKG4sdCk7aWYocj09PVwiY291bnRcIilyZXR1cm4gbj0+VWEobix0KTtpZihyPT09XCJncm91cEJ5XCIpcmV0dXJuIG49PkdhKG4sdCl9ZnVuY3Rpb24gV2EoZSxyKXtsZXQgdD1yLmZpZWxkcy5maWx0ZXIoaT0+IWkucmVsYXRpb25OYW1lKSxuPVpzKHQsXCJuYW1lXCIpO3JldHVybiBuZXcgUHJveHkoe30se2dldChpLG8pe2lmKG8gaW4gaXx8dHlwZW9mIG89PVwic3ltYm9sXCIpcmV0dXJuIGlbb107bGV0IHM9bltvXTtpZihzKXJldHVybiBuZXcgbXQoZSxvLHMudHlwZSxzLmlzTGlzdCxzLmtpbmQ9PT1cImVudW1cIil9LC4uLlZuKE9iamVjdC5rZXlzKG4pKX0pfXZhciBKYT1lPT5BcnJheS5pc0FycmF5KGUpP2U6ZS5zcGxpdChcIi5cIiksbG89KGUscik9PkphKHIpLnJlZHVjZSgodCxuKT0+dCYmdFtuXSxlKSxIYT0oZSxyLHQpPT5KYShyKS5yZWR1Y2VSaWdodCgobixpLG8scyk9Pk9iamVjdC5hc3NpZ24oe30sbG8oZSxzLnNsaWNlKDAsbykpLHtbaV06bn0pLHQpO2Z1bmN0aW9uIE5tKGUscil7cmV0dXJuIGU9PT12b2lkIDB8fHI9PT12b2lkIDA/W106Wy4uLnIsXCJzZWxlY3RcIixlXX1mdW5jdGlvbiBMbShlLHIsdCl7cmV0dXJuIHI9PT12b2lkIDA/ZT8/e306SGEocix0LGV8fCEwKX1mdW5jdGlvbiB1byhlLHIsdCxuLGksbyl7bGV0IGE9ZS5fcnVudGltZURhdGFNb2RlbC5tb2RlbHNbcl0uZmllbGRzLnJlZHVjZSgobCx1KT0+KHsuLi5sLFt1Lm5hbWVdOnV9KSx7fSk7cmV0dXJuIGw9PntsZXQgdT1aZShlLl9lcnJvckZvcm1hdCksYz1ObShuLGkpLHA9TG0obCxvLGMpLGQ9dCh7ZGF0YVBhdGg6YyxjYWxsc2l0ZTp1fSkocCksZj1GbShlLHIpO3JldHVybiBuZXcgUHJveHkoZCx7Z2V0KGgsZyl7aWYoIWYuaW5jbHVkZXMoZykpcmV0dXJuIGhbZ107bGV0IFA9W2FbZ10udHlwZSx0LGddLFI9W2MscF07cmV0dXJuIHVvKGUsLi4uUCwuLi5SKX0sLi4uVm4oWy4uLmYsLi4uT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoZCldKX0pfX1mdW5jdGlvbiBGbShlLHIpe3JldHVybiBlLl9ydW50aW1lRGF0YU1vZGVsLm1vZGVsc1tyXS5maWVsZHMuZmlsdGVyKHQ9PnQua2luZD09PVwib2JqZWN0XCIpLm1hcCh0PT50Lm5hbWUpfXZhciBNbT1bXCJmaW5kVW5pcXVlXCIsXCJmaW5kVW5pcXVlT3JUaHJvd1wiLFwiZmluZEZpcnN0XCIsXCJmaW5kRmlyc3RPclRocm93XCIsXCJjcmVhdGVcIixcInVwZGF0ZVwiLFwidXBzZXJ0XCIsXCJkZWxldGVcIl0sJG09W1wiYWdncmVnYXRlXCIsXCJjb3VudFwiLFwiZ3JvdXBCeVwiXTtmdW5jdGlvbiBjbyhlLHIpe2xldCB0PWUuX2V4dGVuc2lvbnMuZ2V0QWxsTW9kZWxFeHRlbnNpb25zKHIpPz97fSxuPVtxbShlLHIpLFZtKGUscikseHQodCkscmUoXCJuYW1lXCIsKCk9PnIpLHJlKFwiJG5hbWVcIiwoKT0+cikscmUoXCIkcGFyZW50XCIsKCk9PmUuX2FwcGxpZWRQYXJlbnQpXTtyZXR1cm4gaGUoe30sbil9ZnVuY3Rpb24gcW0oZSxyKXtsZXQgdD1TZShyKSxuPU9iamVjdC5rZXlzKEFyKS5jb25jYXQoXCJjb3VudFwiKTtyZXR1cm57Z2V0S2V5cygpe3JldHVybiBufSxnZXRQcm9wZXJ0eVZhbHVlKGkpe2xldCBvPWkscz1hPT5sPT57bGV0IHU9WmUoZS5fZXJyb3JGb3JtYXQpO3JldHVybiBlLl9jcmVhdGVQcmlzbWFQcm9taXNlKGM9PntsZXQgcD17YXJnczpsLGRhdGFQYXRoOltdLGFjdGlvbjpvLG1vZGVsOnIsY2xpZW50TWV0aG9kOmAke3R9LiR7aX1gLGpzTW9kZWxOYW1lOnQsdHJhbnNhY3Rpb246YyxjYWxsc2l0ZTp1fTtyZXR1cm4gZS5fcmVxdWVzdCh7Li4ucCwuLi5hfSl9LHthY3Rpb246byxhcmdzOmwsbW9kZWw6cn0pfTtyZXR1cm4gTW0uaW5jbHVkZXMobyk/dW8oZSxyLHMpOmptKGkpP1FhKGUsaSxzKTpzKHt9KX19fWZ1bmN0aW9uIGptKGUpe3JldHVybiAkbS5pbmNsdWRlcyhlKX1mdW5jdGlvbiBWbShlLHIpe3JldHVybiBscihyZShcImZpZWxkc1wiLCgpPT57bGV0IHQ9ZS5fcnVudGltZURhdGFNb2RlbC5tb2RlbHNbcl07cmV0dXJuIFdhKHIsdCl9KSl9ZnVuY3Rpb24gS2EoZSl7cmV0dXJuIGUucmVwbGFjZSgvXi4vLHI9PnIudG9VcHBlckNhc2UoKSl9dmFyIHBvPVN5bWJvbCgpO2Z1bmN0aW9uIFB0KGUpe2xldCByPVtCbShlKSxVbShlKSxyZShwbywoKT0+ZSkscmUoXCIkcGFyZW50XCIsKCk9PmUuX2FwcGxpZWRQYXJlbnQpXSx0PWUuX2V4dGVuc2lvbnMuZ2V0QWxsQ2xpZW50RXh0ZW5zaW9ucygpO3JldHVybiB0JiZyLnB1c2goeHQodCkpLGhlKGUscil9ZnVuY3Rpb24gQm0oZSl7bGV0IHI9T2JqZWN0LmdldFByb3RvdHlwZU9mKGUuX29yaWdpbmFsQ2xpZW50KSx0PVsuLi5uZXcgU2V0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHIpKV07cmV0dXJue2dldEtleXMoKXtyZXR1cm4gdH0sZ2V0UHJvcGVydHlWYWx1ZShuKXtyZXR1cm4gZVtuXX19fWZ1bmN0aW9uIFVtKGUpe2xldCByPU9iamVjdC5rZXlzKGUuX3J1bnRpbWVEYXRhTW9kZWwubW9kZWxzKSx0PXIubWFwKFNlKSxuPVsuLi5uZXcgU2V0KHIuY29uY2F0KHQpKV07cmV0dXJuIGxyKHtnZXRLZXlzKCl7cmV0dXJuIG59LGdldFByb3BlcnR5VmFsdWUoaSl7bGV0IG89S2EoaSk7aWYoZS5fcnVudGltZURhdGFNb2RlbC5tb2RlbHNbb10hPT12b2lkIDApcmV0dXJuIGNvKGUsbyk7aWYoZS5fcnVudGltZURhdGFNb2RlbC5tb2RlbHNbaV0hPT12b2lkIDApcmV0dXJuIGNvKGUsaSl9LGdldFByb3BlcnR5RGVzY3JpcHRvcihpKXtpZighdC5pbmNsdWRlcyhpKSlyZXR1cm57ZW51bWVyYWJsZTohMX19fSl9ZnVuY3Rpb24gWWEoZSl7cmV0dXJuIGVbcG9dP2VbcG9dOmV9ZnVuY3Rpb24gemEoZSl7aWYodHlwZW9mIGU9PVwiZnVuY3Rpb25cIilyZXR1cm4gZSh0aGlzKTtpZihlLmNsaWVudD8uX19BY2NlbGVyYXRlRW5naW5lKXtsZXQgdD1lLmNsaWVudC5fX0FjY2VsZXJhdGVFbmdpbmU7dGhpcy5fb3JpZ2luYWxDbGllbnQuX2VuZ2luZT1uZXcgdCh0aGlzLl9vcmlnaW5hbENsaWVudC5fYWNjZWxlcmF0ZUVuZ2luZUNvbmZpZyl9bGV0IHI9T2JqZWN0LmNyZWF0ZSh0aGlzLl9vcmlnaW5hbENsaWVudCx7X2V4dGVuc2lvbnM6e3ZhbHVlOnRoaXMuX2V4dGVuc2lvbnMuYXBwZW5kKGUpfSxfYXBwbGllZFBhcmVudDp7dmFsdWU6dGhpcyxjb25maWd1cmFibGU6ITB9LCR1c2U6e3ZhbHVlOnZvaWQgMH0sJG9uOnt2YWx1ZTp2b2lkIDB9fSk7cmV0dXJuIFB0KHIpfWZ1bmN0aW9uIFphKHtyZXN1bHQ6ZSxtb2RlbE5hbWU6cixzZWxlY3Q6dCxvbWl0Om4sZXh0ZW5zaW9uczppfSl7bGV0IG89aS5nZXRBbGxDb21wdXRlZEZpZWxkcyhyKTtpZighbylyZXR1cm4gZTtsZXQgcz1bXSxhPVtdO2ZvcihsZXQgbCBvZiBPYmplY3QudmFsdWVzKG8pKXtpZihuKXtpZihuW2wubmFtZV0pY29udGludWU7bGV0IHU9bC5uZWVkcy5maWx0ZXIoYz0+bltjXSk7dS5sZW5ndGg+MCYmYS5wdXNoKE1yKHUpKX1lbHNlIGlmKHQpe2lmKCF0W2wubmFtZV0pY29udGludWU7bGV0IHU9bC5uZWVkcy5maWx0ZXIoYz0+IXRbY10pO3UubGVuZ3RoPjAmJmEucHVzaChNcih1KSl9R20oZSxsLm5lZWRzKSYmcy5wdXNoKFFtKGwsaGUoZSxzKSkpfXJldHVybiBzLmxlbmd0aD4wfHxhLmxlbmd0aD4wP2hlKGUsWy4uLnMsLi4uYV0pOmV9ZnVuY3Rpb24gR20oZSxyKXtyZXR1cm4gci5ldmVyeSh0PT5WaShlLHQpKX1mdW5jdGlvbiBRbShlLHIpe3JldHVybiBscihyZShlLm5hbWUsKCk9PmUuY29tcHV0ZShyKSkpfWZ1bmN0aW9uIFVuKHt2aXNpdG9yOmUscmVzdWx0OnIsYXJnczp0LHJ1bnRpbWVEYXRhTW9kZWw6bixtb2RlbE5hbWU6aX0pe2lmKEFycmF5LmlzQXJyYXkocikpe2ZvcihsZXQgcz0wO3M8ci5sZW5ndGg7cysrKXJbc109VW4oe3Jlc3VsdDpyW3NdLGFyZ3M6dCxtb2RlbE5hbWU6aSxydW50aW1lRGF0YU1vZGVsOm4sdmlzaXRvcjplfSk7cmV0dXJuIHJ9bGV0IG89ZShyLGksdCk/P3I7cmV0dXJuIHQuaW5jbHVkZSYmWGEoe2luY2x1ZGVPclNlbGVjdDp0LmluY2x1ZGUscmVzdWx0Om8scGFyZW50TW9kZWxOYW1lOmkscnVudGltZURhdGFNb2RlbDpuLHZpc2l0b3I6ZX0pLHQuc2VsZWN0JiZYYSh7aW5jbHVkZU9yU2VsZWN0OnQuc2VsZWN0LHJlc3VsdDpvLHBhcmVudE1vZGVsTmFtZTppLHJ1bnRpbWVEYXRhTW9kZWw6bix2aXNpdG9yOmV9KSxvfWZ1bmN0aW9uIFhhKHtpbmNsdWRlT3JTZWxlY3Q6ZSxyZXN1bHQ6cixwYXJlbnRNb2RlbE5hbWU6dCxydW50aW1lRGF0YU1vZGVsOm4sdmlzaXRvcjppfSl7Zm9yKGxldFtvLHNdb2YgT2JqZWN0LmVudHJpZXMoZSkpe2lmKCFzfHxyW29dPT1udWxsfHxSZShzKSljb250aW51ZTtsZXQgbD1uLm1vZGVsc1t0XS5maWVsZHMuZmluZChjPT5jLm5hbWU9PT1vKTtpZighbHx8bC5raW5kIT09XCJvYmplY3RcInx8IWwucmVsYXRpb25OYW1lKWNvbnRpbnVlO2xldCB1PXR5cGVvZiBzPT1cIm9iamVjdFwiP3M6e307cltvXT1Vbih7dmlzaXRvcjppLHJlc3VsdDpyW29dLGFyZ3M6dSxtb2RlbE5hbWU6bC50eXBlLHJ1bnRpbWVEYXRhTW9kZWw6bn0pfX1mdW5jdGlvbiBlbCh7cmVzdWx0OmUsbW9kZWxOYW1lOnIsYXJnczp0LGV4dGVuc2lvbnM6bixydW50aW1lRGF0YU1vZGVsOmksZ2xvYmFsT21pdDpvfSl7cmV0dXJuIG4uaXNFbXB0eSgpfHxlPT1udWxsfHx0eXBlb2YgZSE9XCJvYmplY3RcInx8IWkubW9kZWxzW3JdP2U6VW4oe3Jlc3VsdDplLGFyZ3M6dD8/e30sbW9kZWxOYW1lOnIscnVudGltZURhdGFNb2RlbDppLHZpc2l0b3I6KGEsbCx1KT0+e2xldCBjPVNlKGwpO3JldHVybiBaYSh7cmVzdWx0OmEsbW9kZWxOYW1lOmMsc2VsZWN0OnUuc2VsZWN0LG9taXQ6dS5zZWxlY3Q/dm9pZCAwOnsuLi5vPy5bY10sLi4udS5vbWl0fSxleHRlbnNpb25zOm59KX19KX12YXIgV209W1wiJGNvbm5lY3RcIixcIiRkaXNjb25uZWN0XCIsXCIkb25cIixcIiR0cmFuc2FjdGlvblwiLFwiJHVzZVwiLFwiJGV4dGVuZHNcIl0scmw9V207ZnVuY3Rpb24gdGwoZSl7aWYoZSBpbnN0YW5jZW9mIG9lKXJldHVybiBKbShlKTtpZihxbihlKSlyZXR1cm4gSG0oZSk7aWYoQXJyYXkuaXNBcnJheShlKSl7bGV0IHQ9W2VbMF1dO2ZvcihsZXQgbj0xO248ZS5sZW5ndGg7bisrKXRbbl09VHQoZVtuXSk7cmV0dXJuIHR9bGV0IHI9e307Zm9yKGxldCB0IGluIGUpclt0XT1UdChlW3RdKTtyZXR1cm4gcn1mdW5jdGlvbiBKbShlKXtyZXR1cm4gbmV3IG9lKGUuc3RyaW5ncyxlLnZhbHVlcyl9ZnVuY3Rpb24gSG0oZSl7cmV0dXJuIG5ldyB3dChlLnNxbCxlLnZhbHVlcyl9ZnVuY3Rpb24gVHQoZSl7aWYodHlwZW9mIGUhPVwib2JqZWN0XCJ8fGU9PW51bGx8fGUgaW5zdGFuY2VvZiBNZXx8X3IoZSkpcmV0dXJuIGU7aWYoUnIoZSkpcmV0dXJuIG5ldyB2ZShlLnRvRml4ZWQoKSk7aWYoU3IoZSkpcmV0dXJuIG5ldyBEYXRlKCtlKTtpZihBcnJheUJ1ZmZlci5pc1ZpZXcoZSkpcmV0dXJuIGUuc2xpY2UoMCk7aWYoQXJyYXkuaXNBcnJheShlKSl7bGV0IHI9ZS5sZW5ndGgsdDtmb3IodD1BcnJheShyKTtyLS07KXRbcl09VHQoZVtyXSk7cmV0dXJuIHR9aWYodHlwZW9mIGU9PVwib2JqZWN0XCIpe2xldCByPXt9O2ZvcihsZXQgdCBpbiBlKXQ9PT1cIl9fcHJvdG9fX1wiP09iamVjdC5kZWZpbmVQcm9wZXJ0eShyLHQse3ZhbHVlOlR0KGVbdF0pLGNvbmZpZ3VyYWJsZTohMCxlbnVtZXJhYmxlOiEwLHdyaXRhYmxlOiEwfSk6clt0XT1UdChlW3RdKTtyZXR1cm4gcn1OZShlLFwiVW5rbm93biB2YWx1ZVwiKX1mdW5jdGlvbiBpbChlLHIsdCxuPTApe3JldHVybiBlLl9jcmVhdGVQcmlzbWFQcm9taXNlKGk9PntsZXQgbz1yLmN1c3RvbURhdGFQcm94eUZldGNoO3JldHVyblwidHJhbnNhY3Rpb25cImluIHImJmkhPT12b2lkIDAmJihyLnRyYW5zYWN0aW9uPy5raW5kPT09XCJiYXRjaFwiJiZyLnRyYW5zYWN0aW9uLmxvY2sudGhlbigpLHIudHJhbnNhY3Rpb249aSksbj09PXQubGVuZ3RoP2UuX2V4ZWN1dGVSZXF1ZXN0KHIpOnRbbl0oe21vZGVsOnIubW9kZWwsb3BlcmF0aW9uOnIubW9kZWw/ci5hY3Rpb246ci5jbGllbnRNZXRob2QsYXJnczp0bChyLmFyZ3M/P3t9KSxfX2ludGVybmFsUGFyYW1zOnIscXVlcnk6KHMsYT1yKT0+e2xldCBsPWEuY3VzdG9tRGF0YVByb3h5RmV0Y2g7cmV0dXJuIGEuY3VzdG9tRGF0YVByb3h5RmV0Y2g9bGwobyxsKSxhLmFyZ3M9cyxpbChlLGEsdCxuKzEpfX0pfSl9ZnVuY3Rpb24gb2woZSxyKXtsZXR7anNNb2RlbE5hbWU6dCxhY3Rpb246bixjbGllbnRNZXRob2Q6aX09cixvPXQ/bjppO2lmKGUuX2V4dGVuc2lvbnMuaXNFbXB0eSgpKXJldHVybiBlLl9leGVjdXRlUmVxdWVzdChyKTtsZXQgcz1lLl9leHRlbnNpb25zLmdldEFsbFF1ZXJ5Q2FsbGJhY2tzKHQ/P1wiJG5vbmVcIixvKTtyZXR1cm4gaWwoZSxyLHMpfWZ1bmN0aW9uIHNsKGUpe3JldHVybiByPT57bGV0IHQ9e3JlcXVlc3RzOnJ9LG49clswXS5leHRlbnNpb25zLmdldEFsbEJhdGNoUXVlcnlDYWxsYmFja3MoKTtyZXR1cm4gbi5sZW5ndGg/YWwodCxuLDAsZSk6ZSh0KX19ZnVuY3Rpb24gYWwoZSxyLHQsbil7aWYodD09PXIubGVuZ3RoKXJldHVybiBuKGUpO2xldCBpPWUuY3VzdG9tRGF0YVByb3h5RmV0Y2gsbz1lLnJlcXVlc3RzWzBdLnRyYW5zYWN0aW9uO3JldHVybiByW3RdKHthcmdzOntxdWVyaWVzOmUucmVxdWVzdHMubWFwKHM9Pih7bW9kZWw6cy5tb2RlbE5hbWUsb3BlcmF0aW9uOnMuYWN0aW9uLGFyZ3M6cy5hcmdzfSkpLHRyYW5zYWN0aW9uOm8/e2lzb2xhdGlvbkxldmVsOm8ua2luZD09PVwiYmF0Y2hcIj9vLmlzb2xhdGlvbkxldmVsOnZvaWQgMH06dm9pZCAwfSxfX2ludGVybmFsUGFyYW1zOmUscXVlcnkocyxhPWUpe2xldCBsPWEuY3VzdG9tRGF0YVByb3h5RmV0Y2g7cmV0dXJuIGEuY3VzdG9tRGF0YVByb3h5RmV0Y2g9bGwoaSxsKSxhbChhLHIsdCsxLG4pfX0pfXZhciBubD1lPT5lO2Z1bmN0aW9uIGxsKGU9bmwscj1ubCl7cmV0dXJuIHQ9PmUocih0KSl9dmFyIHVsPU4oXCJwcmlzbWE6Y2xpZW50XCIpLGNsPXtWZXJjZWw6XCJ2ZXJjZWxcIixcIk5ldGxpZnkgQ0lcIjpcIm5ldGxpZnlcIn07ZnVuY3Rpb24gcGwoe3Bvc3RpbnN0YWxsOmUsY2lOYW1lOnIsY2xpZW50VmVyc2lvbjp0fSl7aWYodWwoXCJjaGVja1BsYXRmb3JtQ2FjaGluZzpwb3N0aW5zdGFsbFwiLGUpLHVsKFwiY2hlY2tQbGF0Zm9ybUNhY2hpbmc6Y2lOYW1lXCIsciksZT09PSEwJiZyJiZyIGluIGNsKXtsZXQgbj1gUHJpc21hIGhhcyBkZXRlY3RlZCB0aGF0IHRoaXMgcHJvamVjdCB3YXMgYnVpbHQgb24gJHtyfSwgd2hpY2ggY2FjaGVzIGRlcGVuZGVuY2llcy4gVGhpcyBsZWFkcyB0byBhbiBvdXRkYXRlZCBQcmlzbWEgQ2xpZW50IGJlY2F1c2UgUHJpc21hJ3MgYXV0by1nZW5lcmF0aW9uIGlzbid0IHRyaWdnZXJlZC4gVG8gZml4IHRoaXMsIG1ha2Ugc3VyZSB0byBydW4gdGhlIFxcYHByaXNtYSBnZW5lcmF0ZVxcYCBjb21tYW5kIGR1cmluZyB0aGUgYnVpbGQgcHJvY2Vzcy5cblxuTGVhcm4gaG93OiBodHRwczovL3ByaXMubHkvZC8ke2NsW3JdfS1idWlsZGA7dGhyb3cgY29uc29sZS5lcnJvcihuKSxuZXcgVChuLHQpfX1mdW5jdGlvbiBkbChlLHIpe3JldHVybiBlP2UuZGF0YXNvdXJjZXM/ZS5kYXRhc291cmNlczplLmRhdGFzb3VyY2VVcmw/e1tyWzBdXTp7dXJsOmUuZGF0YXNvdXJjZVVybH19Ont9Ont9fXZhciBLbT0oKT0+Z2xvYmFsVGhpcy5wcm9jZXNzPy5yZWxlYXNlPy5uYW1lPT09XCJub2RlXCIsWW09KCk9PiEhZ2xvYmFsVGhpcy5CdW58fCEhZ2xvYmFsVGhpcy5wcm9jZXNzPy52ZXJzaW9ucz8uYnVuLHptPSgpPT4hIWdsb2JhbFRoaXMuRGVubyxabT0oKT0+dHlwZW9mIGdsb2JhbFRoaXMuTmV0bGlmeT09XCJvYmplY3RcIixYbT0oKT0+dHlwZW9mIGdsb2JhbFRoaXMuRWRnZVJ1bnRpbWU9PVwib2JqZWN0XCIsZWY9KCk9Pmdsb2JhbFRoaXMubmF2aWdhdG9yPy51c2VyQWdlbnQ9PT1cIkNsb3VkZmxhcmUtV29ya2Vyc1wiO2Z1bmN0aW9uIHJmKCl7cmV0dXJuW1tabSxcIm5ldGxpZnlcIl0sW1htLFwiZWRnZS1saWdodFwiXSxbZWYsXCJ3b3JrZXJkXCJdLFt6bSxcImRlbm9cIl0sW1ltLFwiYnVuXCJdLFtLbSxcIm5vZGVcIl1dLmZsYXRNYXAodD0+dFswXSgpP1t0WzFdXTpbXSkuYXQoMCk/P1wiXCJ9dmFyIHRmPXtub2RlOlwiTm9kZS5qc1wiLHdvcmtlcmQ6XCJDbG91ZGZsYXJlIFdvcmtlcnNcIixkZW5vOlwiRGVubyBhbmQgRGVubyBEZXBsb3lcIixuZXRsaWZ5OlwiTmV0bGlmeSBFZGdlIEZ1bmN0aW9uc1wiLFwiZWRnZS1saWdodFwiOlwiRWRnZSBSdW50aW1lIChWZXJjZWwgRWRnZSBGdW5jdGlvbnMsIFZlcmNlbCBFZGdlIE1pZGRsZXdhcmUsIE5leHQuanMgKFBhZ2VzIFJvdXRlcikgRWRnZSBBUEkgUm91dGVzLCBOZXh0LmpzIChBcHAgUm91dGVyKSBFZGdlIFJvdXRlIEhhbmRsZXJzIG9yIE5leHQuanMgTWlkZGxld2FyZSlcIn07ZnVuY3Rpb24gR24oKXtsZXQgZT1yZigpO3JldHVybntpZDplLHByZXR0eU5hbWU6dGZbZV18fGUsaXNFZGdlOltcIndvcmtlcmRcIixcImRlbm9cIixcIm5ldGxpZnlcIixcImVkZ2UtbGlnaHRcIl0uaW5jbHVkZXMoZSl9fXZhciB5bD1DKHJlcXVpcmUoXCJub2RlOmZzXCIpKSxTdD1DKHJlcXVpcmUoXCJub2RlOnBhdGhcIikpO2Z1bmN0aW9uIFFuKGUpe2xldHtydW50aW1lQmluYXJ5VGFyZ2V0OnJ9PWU7cmV0dXJuYEFkZCBcIiR7cn1cIiB0byBcXGBiaW5hcnlUYXJnZXRzXFxgIGluIHRoZSBcInNjaGVtYS5wcmlzbWFcIiBmaWxlIGFuZCBydW4gXFxgcHJpc21hIGdlbmVyYXRlXFxgIGFmdGVyIHNhdmluZyBpdDpcblxuJHtuZihlKX1gfWZ1bmN0aW9uIG5mKGUpe2xldHtnZW5lcmF0b3I6cixnZW5lcmF0b3JCaW5hcnlUYXJnZXRzOnQscnVudGltZUJpbmFyeVRhcmdldDpufT1lLGk9e2Zyb21FbnZWYXI6bnVsbCx2YWx1ZTpufSxvPVsuLi50LGldO3JldHVybiBfaSh7Li4ucixiaW5hcnlUYXJnZXRzOm99KX1mdW5jdGlvbiBYZShlKXtsZXR7cnVudGltZUJpbmFyeVRhcmdldDpyfT1lO3JldHVybmBQcmlzbWEgQ2xpZW50IGNvdWxkIG5vdCBsb2NhdGUgdGhlIFF1ZXJ5IEVuZ2luZSBmb3IgcnVudGltZSBcIiR7cn1cIi5gfWZ1bmN0aW9uIGVyKGUpe2xldHtzZWFyY2hlZExvY2F0aW9uczpyfT1lO3JldHVybmBUaGUgZm9sbG93aW5nIGxvY2F0aW9ucyBoYXZlIGJlZW4gc2VhcmNoZWQ6XG4ke1suLi5uZXcgU2V0KHIpXS5tYXAoaT0+YCAgJHtpfWApLmpvaW4oYFxuYCl9YH1mdW5jdGlvbiBtbChlKXtsZXR7cnVudGltZUJpbmFyeVRhcmdldDpyfT1lO3JldHVybmAke1hlKGUpfVxuXG5UaGlzIGhhcHBlbmVkIGJlY2F1c2UgXFxgYmluYXJ5VGFyZ2V0c1xcYCBoYXZlIGJlZW4gcGlubmVkLCBidXQgdGhlIGFjdHVhbCBkZXBsb3ltZW50IGFsc28gcmVxdWlyZWQgXCIke3J9XCIuXG4ke1FuKGUpfVxuXG4ke2VyKGUpfWB9ZnVuY3Rpb24gV24oZSl7cmV0dXJuYFdlIHdvdWxkIGFwcHJlY2lhdGUgaWYgeW91IGNvdWxkIHRha2UgdGhlIHRpbWUgdG8gc2hhcmUgc29tZSBpbmZvcm1hdGlvbiB3aXRoIHVzLlxuUGxlYXNlIGhlbHAgdXMgYnkgYW5zd2VyaW5nIGEgZmV3IHF1ZXN0aW9uczogaHR0cHM6Ly9wcmlzLmx5LyR7ZX1gfWZ1bmN0aW9uIEpuKGUpe2xldHtlcnJvclN0YWNrOnJ9PWU7cmV0dXJuIHI/Lm1hdGNoKC9cXC9cXC5uZXh0fFxcL25leHRAfFxcL25leHRcXC8vKT9gXG5cbldlIGRldGVjdGVkIHRoYXQgeW91IGFyZSB1c2luZyBOZXh0LmpzLCBsZWFybiBob3cgdG8gZml4IHRoaXM6IGh0dHBzOi8vcHJpcy5seS9kL2VuZ2luZS1ub3QtZm91bmQtbmV4dGpzLmA6XCJcIn1mdW5jdGlvbiBmbChlKXtsZXR7cXVlcnlFbmdpbmVOYW1lOnJ9PWU7cmV0dXJuYCR7WGUoZSl9JHtKbihlKX1cblxuVGhpcyBpcyBsaWtlbHkgY2F1c2VkIGJ5IGEgYnVuZGxlciB0aGF0IGhhcyBub3QgY29waWVkIFwiJHtyfVwiIG5leHQgdG8gdGhlIHJlc3VsdGluZyBidW5kbGUuXG5FbnN1cmUgdGhhdCBcIiR7cn1cIiBoYXMgYmVlbiBjb3BpZWQgbmV4dCB0byB0aGUgYnVuZGxlIG9yIGluIFwiJHtlLmV4cGVjdGVkTG9jYXRpb259XCIuXG5cbiR7V24oXCJlbmdpbmUtbm90LWZvdW5kLWJ1bmRsZXItaW52ZXN0aWdhdGlvblwiKX1cblxuJHtlcihlKX1gfWZ1bmN0aW9uIGdsKGUpe2xldHtydW50aW1lQmluYXJ5VGFyZ2V0OnIsZ2VuZXJhdG9yQmluYXJ5VGFyZ2V0czp0fT1lLG49dC5maW5kKGk9PmkubmF0aXZlKTtyZXR1cm5gJHtYZShlKX1cblxuVGhpcyBoYXBwZW5lZCBiZWNhdXNlIFByaXNtYSBDbGllbnQgd2FzIGdlbmVyYXRlZCBmb3IgXCIke24/LnZhbHVlPz9cInVua25vd25cIn1cIiwgYnV0IHRoZSBhY3R1YWwgZGVwbG95bWVudCByZXF1aXJlZCBcIiR7cn1cIi5cbiR7UW4oZSl9XG5cbiR7ZXIoZSl9YH1mdW5jdGlvbiBobChlKXtsZXR7cXVlcnlFbmdpbmVOYW1lOnJ9PWU7cmV0dXJuYCR7WGUoZSl9JHtKbihlKX1cblxuVGhpcyBpcyBsaWtlbHkgY2F1c2VkIGJ5IHRvb2xpbmcgdGhhdCBoYXMgbm90IGNvcGllZCBcIiR7cn1cIiB0byB0aGUgZGVwbG95bWVudCBmb2xkZXIuXG5FbnN1cmUgdGhhdCB5b3UgcmFuIFxcYHByaXNtYSBnZW5lcmF0ZVxcYCBhbmQgdGhhdCBcIiR7cn1cIiBoYXMgYmVlbiBjb3BpZWQgdG8gXCIke2UuZXhwZWN0ZWRMb2NhdGlvbn1cIi5cblxuJHtXbihcImVuZ2luZS1ub3QtZm91bmQtdG9vbGluZy1pbnZlc3RpZ2F0aW9uXCIpfVxuXG4ke2VyKGUpfWB9dmFyIG9mPU4oXCJwcmlzbWE6Y2xpZW50OmVuZ2luZXM6cmVzb2x2ZUVuZ2luZVBhdGhcIiksc2Y9KCk9Pm5ldyBSZWdFeHAoXCJydW50aW1lW1xcXFxcXFxcL11saWJyYXJ5XFxcXC5tP2pzJFwiKTthc3luYyBmdW5jdGlvbiBibChlLHIpe2xldCB0PXtiaW5hcnk6cHJvY2Vzcy5lbnYuUFJJU01BX1FVRVJZX0VOR0lORV9CSU5BUlksbGlicmFyeTpwcm9jZXNzLmVudi5QUklTTUFfUVVFUllfRU5HSU5FX0xJQlJBUll9W2VdPz9yLnByaXNtYVBhdGg7aWYodCE9PXZvaWQgMClyZXR1cm4gdDtsZXR7ZW5naW5lUGF0aDpuLHNlYXJjaGVkTG9jYXRpb25zOml9PWF3YWl0IGFmKGUscik7aWYob2YoXCJlbmdpbmVQYXRoXCIsbiksbiE9PXZvaWQgMCYmZT09PVwiYmluYXJ5XCImJkFpKG4pLG4hPT12b2lkIDApcmV0dXJuIHIucHJpc21hUGF0aD1uO2xldCBvPWF3YWl0IGlyKCkscz1yLmdlbmVyYXRvcj8uYmluYXJ5VGFyZ2V0cz8/W10sYT1zLnNvbWUoZD0+ZC5uYXRpdmUpLGw9IXMuc29tZShkPT5kLnZhbHVlPT09byksdT1fX2ZpbGVuYW1lLm1hdGNoKHNmKCkpPT09bnVsbCxjPXtzZWFyY2hlZExvY2F0aW9uczppLGdlbmVyYXRvckJpbmFyeVRhcmdldHM6cyxnZW5lcmF0b3I6ci5nZW5lcmF0b3IscnVudGltZUJpbmFyeVRhcmdldDpvLHF1ZXJ5RW5naW5lTmFtZTpFbChlLG8pLGV4cGVjdGVkTG9jYXRpb246U3QuZGVmYXVsdC5yZWxhdGl2ZShwcm9jZXNzLmN3ZCgpLHIuZGlybmFtZSksZXJyb3JTdGFjazpuZXcgRXJyb3IoKS5zdGFja30scDt0aHJvdyBhJiZsP3A9Z2woYyk6bD9wPW1sKGMpOnU/cD1mbChjKTpwPWhsKGMpLG5ldyBUKHAsci5jbGllbnRWZXJzaW9uKX1hc3luYyBmdW5jdGlvbiBhZihlLHIpe2xldCB0PWF3YWl0IGlyKCksbj1bXSxpPVtyLmRpcm5hbWUsU3QuZGVmYXVsdC5yZXNvbHZlKF9fZGlybmFtZSxcIi4uXCIpLHIuZ2VuZXJhdG9yPy5vdXRwdXQ/LnZhbHVlPz9fX2Rpcm5hbWUsU3QuZGVmYXVsdC5yZXNvbHZlKF9fZGlybmFtZSxcIi4uLy4uLy4uLy5wcmlzbWEvY2xpZW50XCIpLFwiL3RtcC9wcmlzbWEtZW5naW5lc1wiLHIuY3dkXTtfX2ZpbGVuYW1lLmluY2x1ZGVzKFwicmVzb2x2ZUVuZ2luZVBhdGhcIikmJmkucHVzaChncygpKTtmb3IobGV0IG8gb2YgaSl7bGV0IHM9RWwoZSx0KSxhPVN0LmRlZmF1bHQuam9pbihvLHMpO2lmKG4ucHVzaChvKSx5bC5kZWZhdWx0LmV4aXN0c1N5bmMoYSkpcmV0dXJue2VuZ2luZVBhdGg6YSxzZWFyY2hlZExvY2F0aW9uczpufX1yZXR1cm57ZW5naW5lUGF0aDp2b2lkIDAsc2VhcmNoZWRMb2NhdGlvbnM6bn19ZnVuY3Rpb24gRWwoZSxyKXtyZXR1cm4gZT09PVwibGlicmFyeVwiP0d0KHIsXCJmc1wiKTpgcXVlcnktZW5naW5lLSR7cn0ke3I9PT1cIndpbmRvd3NcIj9cIi5leGVcIjpcIlwifWB9dmFyIG1vPUMoTGkoKSk7ZnVuY3Rpb24gd2woZSl7cmV0dXJuIGU/ZS5yZXBsYWNlKC9cIi4qXCIvZywnXCJYXCInKS5yZXBsYWNlKC9bXFxzOlxcW10oWystXT8oWzAtOV0qWy5dKT9bMC05XSspL2cscj0+YCR7clswXX01YCk6XCJcIn1mdW5jdGlvbiB4bChlKXtyZXR1cm4gZS5zcGxpdChgXG5gKS5tYXAocj0+ci5yZXBsYWNlKC9eXFxkezR9LVswMV1cXGQtWzAtM11cXGRUWzAtMl1cXGQ6WzAtNV1cXGQ6WzAtNV1cXGRcXC5cXGQrKFsrLV1bMC0yXVxcZDpbMC01XVxcZHxaKVxccyovLFwiXCIpLnJlcGxhY2UoL1xcK1xcZCtcXHMqbXMkLyxcIlwiKSkuam9pbihgXG5gKX12YXIgdmw9QyhGcygpKTtmdW5jdGlvbiBQbCh7dGl0bGU6ZSx1c2VyOnI9XCJwcmlzbWFcIixyZXBvOnQ9XCJwcmlzbWFcIix0ZW1wbGF0ZTpuPVwiYnVnX3JlcG9ydC55bWxcIixib2R5Oml9KXtyZXR1cm4oMCx2bC5kZWZhdWx0KSh7dXNlcjpyLHJlcG86dCx0ZW1wbGF0ZTpuLHRpdGxlOmUsYm9keTppfSl9ZnVuY3Rpb24gVGwoe3ZlcnNpb246ZSxiaW5hcnlUYXJnZXQ6cix0aXRsZTp0LGRlc2NyaXB0aW9uOm4sZW5naW5lVmVyc2lvbjppLGRhdGFiYXNlOm8scXVlcnk6c30pe2xldCBhPUdvKDZlMy0ocz8ubGVuZ3RoPz8wKSksbD14bCgoMCxtby5kZWZhdWx0KShhKSksdT1uP2AjIERlc2NyaXB0aW9uXG5cXGBcXGBcXGBcbiR7bn1cblxcYFxcYFxcYGA6XCJcIixjPSgwLG1vLmRlZmF1bHQpKGBIaSBQcmlzbWEgVGVhbSEgTXkgUHJpc21hIENsaWVudCBqdXN0IGNyYXNoZWQuIFRoaXMgaXMgdGhlIHJlcG9ydDpcbiMjIFZlcnNpb25zXG5cbnwgTmFtZSAgICAgICAgICAgIHwgVmVyc2lvbiAgICAgICAgICAgIHxcbnwtLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLXxcbnwgTm9kZSAgICAgICAgICAgIHwgJHtwcm9jZXNzLnZlcnNpb24/LnBhZEVuZCgxOSl9fCBcbnwgT1MgICAgICAgICAgICAgIHwgJHtyPy5wYWRFbmQoMTkpfXxcbnwgUHJpc21hIENsaWVudCAgIHwgJHtlPy5wYWRFbmQoMTkpfXxcbnwgUXVlcnkgRW5naW5lICAgIHwgJHtpPy5wYWRFbmQoMTkpfXxcbnwgRGF0YWJhc2UgICAgICAgIHwgJHtvPy5wYWRFbmQoMTkpfXxcblxuJHt1fVxuXG4jIyBMb2dzXG5cXGBcXGBcXGBcbiR7bH1cblxcYFxcYFxcYFxuXG4jIyBDbGllbnQgU25pcHBldFxuXFxgXFxgXFxgdHNcbi8vIFBMRUFTRSBGSUxMIFlPVVIgQ09ERSBTTklQUEVUIEhFUkVcblxcYFxcYFxcYFxuXG4jIyBTY2hlbWFcblxcYFxcYFxcYHByaXNtYVxuLy8gUExFQVNFIEFERCBZT1VSIFNDSEVNQSBIRVJFIElGIFBPU1NJQkxFXG5cXGBcXGBcXGBcblxuIyMgUHJpc21hIEVuZ2luZSBRdWVyeVxuXFxgXFxgXFxgXG4ke3M/d2wocyk6XCJcIn1cblxcYFxcYFxcYFxuYCkscD1QbCh7dGl0bGU6dCxib2R5OmN9KTtyZXR1cm5gJHt0fVxuXG5UaGlzIGlzIGEgbm9uLXJlY292ZXJhYmxlIGVycm9yIHdoaWNoIHByb2JhYmx5IGhhcHBlbnMgd2hlbiB0aGUgUHJpc21hIFF1ZXJ5IEVuZ2luZSBoYXMgYSBwYW5pYy5cblxuJHtZKHApfVxuXG5JZiB5b3Ugd2FudCB0aGUgUHJpc21hIHRlYW0gdG8gbG9vayBpbnRvIGl0LCBwbGVhc2Ugb3BlbiB0aGUgbGluayBhYm92ZSBcXHV7MUY2NEZ9XG5UbyBpbmNyZWFzZSB0aGUgY2hhbmNlIG9mIHN1Y2Nlc3MsIHBsZWFzZSBwb3N0IHlvdXIgc2NoZW1hIGFuZCBhIHNuaXBwZXQgb2ZcbmhvdyB5b3UgdXNlZCBQcmlzbWEgQ2xpZW50IGluIHRoZSBpc3N1ZS4gXG5gfXZhciBTbD1cIjYuMTMuMFwiO2Z1bmN0aW9uIFZyKHtpbmxpbmVEYXRhc291cmNlczplLG92ZXJyaWRlRGF0YXNvdXJjZXM6cixlbnY6dCxjbGllbnRWZXJzaW9uOm59KXtsZXQgaSxvPU9iamVjdC5rZXlzKGUpWzBdLHM9ZVtvXT8udXJsLGE9cltvXT8udXJsO2lmKG89PT12b2lkIDA/aT12b2lkIDA6YT9pPWE6cz8udmFsdWU/aT1zLnZhbHVlOnM/LmZyb21FbnZWYXImJihpPXRbcy5mcm9tRW52VmFyXSkscz8uZnJvbUVudlZhciE9PXZvaWQgMCYmaT09PXZvaWQgMCl0aHJvdyBuZXcgVChgZXJyb3I6IEVudmlyb25tZW50IHZhcmlhYmxlIG5vdCBmb3VuZDogJHtzLmZyb21FbnZWYXJ9LmAsbik7aWYoaT09PXZvaWQgMCl0aHJvdyBuZXcgVChcImVycm9yOiBNaXNzaW5nIFVSTCBlbnZpcm9ubWVudCB2YXJpYWJsZSwgdmFsdWUsIG9yIG92ZXJyaWRlLlwiLG4pO3JldHVybiBpfXZhciBIbj1jbGFzcyBleHRlbmRzIEVycm9ye2NsaWVudFZlcnNpb247Y2F1c2U7Y29uc3RydWN0b3Iocix0KXtzdXBlcihyKSx0aGlzLmNsaWVudFZlcnNpb249dC5jbGllbnRWZXJzaW9uLHRoaXMuY2F1c2U9dC5jYXVzZX1nZXRbU3ltYm9sLnRvU3RyaW5nVGFnXSgpe3JldHVybiB0aGlzLm5hbWV9fTt2YXIgc2U9Y2xhc3MgZXh0ZW5kcyBIbntpc1JldHJ5YWJsZTtjb25zdHJ1Y3RvcihyLHQpe3N1cGVyKHIsdCksdGhpcy5pc1JldHJ5YWJsZT10LmlzUmV0cnlhYmxlPz8hMH19O2Z1bmN0aW9uIEEoZSxyKXtyZXR1cm57Li4uZSxpc1JldHJ5YWJsZTpyfX12YXIgdXI9Y2xhc3MgZXh0ZW5kcyBzZXtuYW1lPVwiSW52YWxpZERhdGFzb3VyY2VFcnJvclwiO2NvZGU9XCJQNjAwMVwiO2NvbnN0cnVjdG9yKHIsdCl7c3VwZXIocixBKHQsITEpKX19O3godXIsXCJJbnZhbGlkRGF0YXNvdXJjZUVycm9yXCIpO2Z1bmN0aW9uIFJsKGUpe2xldCByPXtjbGllbnRWZXJzaW9uOmUuY2xpZW50VmVyc2lvbn0sdD1PYmplY3Qua2V5cyhlLmlubGluZURhdGFzb3VyY2VzKVswXSxuPVZyKHtpbmxpbmVEYXRhc291cmNlczplLmlubGluZURhdGFzb3VyY2VzLG92ZXJyaWRlRGF0YXNvdXJjZXM6ZS5vdmVycmlkZURhdGFzb3VyY2VzLGNsaWVudFZlcnNpb246ZS5jbGllbnRWZXJzaW9uLGVudjp7Li4uZS5lbnYsLi4udHlwZW9mIHByb2Nlc3M8XCJ1XCI/cHJvY2Vzcy5lbnY6e319fSksaTt0cnl7aT1uZXcgVVJMKG4pfWNhdGNoe3Rocm93IG5ldyB1cihgRXJyb3IgdmFsaWRhdGluZyBkYXRhc291cmNlIFxcYCR7dH1cXGA6IHRoZSBVUkwgbXVzdCBzdGFydCB3aXRoIHRoZSBwcm90b2NvbCBcXGBwcmlzbWE6Ly9cXGBgLHIpfWxldHtwcm90b2NvbDpvLHNlYXJjaFBhcmFtczpzfT1pO2lmKG8hPT1cInByaXNtYTpcIiYmbyE9PXNuKXRocm93IG5ldyB1cihgRXJyb3IgdmFsaWRhdGluZyBkYXRhc291cmNlIFxcYCR7dH1cXGA6IHRoZSBVUkwgbXVzdCBzdGFydCB3aXRoIHRoZSBwcm90b2NvbCBcXGBwcmlzbWE6Ly9cXGAgb3IgXFxgcHJpc21hK3Bvc3RncmVzOi8vXFxgYCxyKTtsZXQgYT1zLmdldChcImFwaV9rZXlcIik7aWYoYT09PW51bGx8fGEubGVuZ3RoPDEpdGhyb3cgbmV3IHVyKGBFcnJvciB2YWxpZGF0aW5nIGRhdGFzb3VyY2UgXFxgJHt0fVxcYDogdGhlIFVSTCBtdXN0IGNvbnRhaW4gYSB2YWxpZCBBUEkga2V5YCxyKTtsZXQgbD1raShpKT9cImh0dHA6XCI6XCJodHRwczpcIix1PW5ldyBVUkwoaS5ocmVmLnJlcGxhY2UobyxsKSk7cmV0dXJue2FwaUtleTphLHVybDp1fX12YXIgQWw9QyhvbigpKSxLbj1jbGFzc3thcGlLZXk7dHJhY2luZ0hlbHBlcjtsb2dMZXZlbDtsb2dRdWVyaWVzO2VuZ2luZUhhc2g7Y29uc3RydWN0b3Ioe2FwaUtleTpyLHRyYWNpbmdIZWxwZXI6dCxsb2dMZXZlbDpuLGxvZ1F1ZXJpZXM6aSxlbmdpbmVIYXNoOm99KXt0aGlzLmFwaUtleT1yLHRoaXMudHJhY2luZ0hlbHBlcj10LHRoaXMubG9nTGV2ZWw9bix0aGlzLmxvZ1F1ZXJpZXM9aSx0aGlzLmVuZ2luZUhhc2g9b31idWlsZCh7dHJhY2VwYXJlbnQ6cix0cmFuc2FjdGlvbklkOnR9PXt9KXtsZXQgbj17QWNjZXB0OlwiYXBwbGljYXRpb24vanNvblwiLEF1dGhvcml6YXRpb246YEJlYXJlciAke3RoaXMuYXBpS2V5fWAsXCJDb250ZW50LVR5cGVcIjpcImFwcGxpY2F0aW9uL2pzb25cIixcIlByaXNtYS1FbmdpbmUtSGFzaFwiOnRoaXMuZW5naW5lSGFzaCxcIlByaXNtYS1FbmdpbmUtVmVyc2lvblwiOkFsLmVuZ2luZXNWZXJzaW9ufTt0aGlzLnRyYWNpbmdIZWxwZXIuaXNFbmFibGVkKCkmJihuLnRyYWNlcGFyZW50PXI/P3RoaXMudHJhY2luZ0hlbHBlci5nZXRUcmFjZVBhcmVudCgpKSx0JiYobltcIlgtVHJhbnNhY3Rpb24tSWRcIl09dCk7bGV0IGk9dGhpcy4jZSgpO3JldHVybiBpLmxlbmd0aD4wJiYobltcIlgtQ2FwdHVyZS1UZWxlbWV0cnlcIl09aS5qb2luKFwiLCBcIikpLG59I2UoKXtsZXQgcj1bXTtyZXR1cm4gdGhpcy50cmFjaW5nSGVscGVyLmlzRW5hYmxlZCgpJiZyLnB1c2goXCJ0cmFjaW5nXCIpLHRoaXMubG9nTGV2ZWwmJnIucHVzaCh0aGlzLmxvZ0xldmVsKSx0aGlzLmxvZ1F1ZXJpZXMmJnIucHVzaChcInF1ZXJ5XCIpLHJ9fTtmdW5jdGlvbiB1ZihlKXtyZXR1cm4gZVswXSoxZTMrZVsxXS8xZTZ9ZnVuY3Rpb24gZm8oZSl7cmV0dXJuIG5ldyBEYXRlKHVmKGUpKX12YXIgQnI9Y2xhc3MgZXh0ZW5kcyBzZXtuYW1lPVwiRm9yY2VkUmV0cnlFcnJvclwiO2NvZGU9XCJQNTAwMVwiO2NvbnN0cnVjdG9yKHIpe3N1cGVyKFwiVGhpcyByZXF1ZXN0IG11c3QgYmUgcmV0cmllZFwiLEEociwhMCkpfX07eChCcixcIkZvcmNlZFJldHJ5RXJyb3JcIik7dmFyIGNyPWNsYXNzIGV4dGVuZHMgc2V7bmFtZT1cIk5vdEltcGxlbWVudGVkWWV0RXJyb3JcIjtjb2RlPVwiUDUwMDRcIjtjb25zdHJ1Y3RvcihyLHQpe3N1cGVyKHIsQSh0LCExKSl9fTt4KGNyLFwiTm90SW1wbGVtZW50ZWRZZXRFcnJvclwiKTt2YXIgJD1jbGFzcyBleHRlbmRzIHNle3Jlc3BvbnNlO2NvbnN0cnVjdG9yKHIsdCl7c3VwZXIocix0KSx0aGlzLnJlc3BvbnNlPXQucmVzcG9uc2U7bGV0IG49dGhpcy5yZXNwb25zZS5oZWFkZXJzLmdldChcInByaXNtYS1yZXF1ZXN0LWlkXCIpO2lmKG4pe2xldCBpPWAoVGhlIHJlcXVlc3QgaWQgd2FzOiAke259KWA7dGhpcy5tZXNzYWdlPXRoaXMubWVzc2FnZStcIiBcIitpfX19O3ZhciBwcj1jbGFzcyBleHRlbmRzICR7bmFtZT1cIlNjaGVtYU1pc3NpbmdFcnJvclwiO2NvZGU9XCJQNTAwNVwiO2NvbnN0cnVjdG9yKHIpe3N1cGVyKFwiU2NoZW1hIG5lZWRzIHRvIGJlIHVwbG9hZGVkXCIsQShyLCEwKSl9fTt4KHByLFwiU2NoZW1hTWlzc2luZ0Vycm9yXCIpO3ZhciBnbz1cIlRoaXMgcmVxdWVzdCBjb3VsZCBub3QgYmUgdW5kZXJzdG9vZCBieSB0aGUgc2VydmVyXCIsUnQ9Y2xhc3MgZXh0ZW5kcyAke25hbWU9XCJCYWRSZXF1ZXN0RXJyb3JcIjtjb2RlPVwiUDUwMDBcIjtjb25zdHJ1Y3RvcihyLHQsbil7c3VwZXIodHx8Z28sQShyLCExKSksbiYmKHRoaXMuY29kZT1uKX19O3goUnQsXCJCYWRSZXF1ZXN0RXJyb3JcIik7dmFyIEF0PWNsYXNzIGV4dGVuZHMgJHtuYW1lPVwiSGVhbHRoY2hlY2tUaW1lb3V0RXJyb3JcIjtjb2RlPVwiUDUwMTNcIjtsb2dzO2NvbnN0cnVjdG9yKHIsdCl7c3VwZXIoXCJFbmdpbmUgbm90IHN0YXJ0ZWQ6IGhlYWx0aGNoZWNrIHRpbWVvdXRcIixBKHIsITApKSx0aGlzLmxvZ3M9dH19O3goQXQsXCJIZWFsdGhjaGVja1RpbWVvdXRFcnJvclwiKTt2YXIgQ3Q9Y2xhc3MgZXh0ZW5kcyAke25hbWU9XCJFbmdpbmVTdGFydHVwRXJyb3JcIjtjb2RlPVwiUDUwMTRcIjtsb2dzO2NvbnN0cnVjdG9yKHIsdCxuKXtzdXBlcih0LEEociwhMCkpLHRoaXMubG9ncz1ufX07eChDdCxcIkVuZ2luZVN0YXJ0dXBFcnJvclwiKTt2YXIgSXQ9Y2xhc3MgZXh0ZW5kcyAke25hbWU9XCJFbmdpbmVWZXJzaW9uTm90U3VwcG9ydGVkRXJyb3JcIjtjb2RlPVwiUDUwMTJcIjtjb25zdHJ1Y3RvcihyKXtzdXBlcihcIkVuZ2luZSB2ZXJzaW9uIGlzIG5vdCBzdXBwb3J0ZWRcIixBKHIsITEpKX19O3goSXQsXCJFbmdpbmVWZXJzaW9uTm90U3VwcG9ydGVkRXJyb3JcIik7dmFyIGhvPVwiUmVxdWVzdCB0aW1lZCBvdXRcIixrdD1jbGFzcyBleHRlbmRzICR7bmFtZT1cIkdhdGV3YXlUaW1lb3V0RXJyb3JcIjtjb2RlPVwiUDUwMDlcIjtjb25zdHJ1Y3RvcihyLHQ9aG8pe3N1cGVyKHQsQShyLCExKSl9fTt4KGt0LFwiR2F0ZXdheVRpbWVvdXRFcnJvclwiKTt2YXIgY2Y9XCJJbnRlcmFjdGl2ZSB0cmFuc2FjdGlvbiBlcnJvclwiLER0PWNsYXNzIGV4dGVuZHMgJHtuYW1lPVwiSW50ZXJhY3RpdmVUcmFuc2FjdGlvbkVycm9yXCI7Y29kZT1cIlA1MDE1XCI7Y29uc3RydWN0b3Iocix0PWNmKXtzdXBlcih0LEEociwhMSkpfX07eChEdCxcIkludGVyYWN0aXZlVHJhbnNhY3Rpb25FcnJvclwiKTt2YXIgcGY9XCJSZXF1ZXN0IHBhcmFtZXRlcnMgYXJlIGludmFsaWRcIixPdD1jbGFzcyBleHRlbmRzICR7bmFtZT1cIkludmFsaWRSZXF1ZXN0RXJyb3JcIjtjb2RlPVwiUDUwMTFcIjtjb25zdHJ1Y3RvcihyLHQ9cGYpe3N1cGVyKHQsQShyLCExKSl9fTt4KE90LFwiSW52YWxpZFJlcXVlc3RFcnJvclwiKTt2YXIgeW89XCJSZXF1ZXN0ZWQgcmVzb3VyY2UgZG9lcyBub3QgZXhpc3RcIixfdD1jbGFzcyBleHRlbmRzICR7bmFtZT1cIk5vdEZvdW5kRXJyb3JcIjtjb2RlPVwiUDUwMDNcIjtjb25zdHJ1Y3RvcihyLHQ9eW8pe3N1cGVyKHQsQShyLCExKSl9fTt4KF90LFwiTm90Rm91bmRFcnJvclwiKTt2YXIgYm89XCJVbmtub3duIHNlcnZlciBlcnJvclwiLFVyPWNsYXNzIGV4dGVuZHMgJHtuYW1lPVwiU2VydmVyRXJyb3JcIjtjb2RlPVwiUDUwMDZcIjtsb2dzO2NvbnN0cnVjdG9yKHIsdCxuKXtzdXBlcih0fHxibyxBKHIsITApKSx0aGlzLmxvZ3M9bn19O3goVXIsXCJTZXJ2ZXJFcnJvclwiKTt2YXIgRW89XCJVbmF1dGhvcml6ZWQsIGNoZWNrIHlvdXIgY29ubmVjdGlvbiBzdHJpbmdcIixOdD1jbGFzcyBleHRlbmRzICR7bmFtZT1cIlVuYXV0aG9yaXplZEVycm9yXCI7Y29kZT1cIlA1MDA3XCI7Y29uc3RydWN0b3Iocix0PUVvKXtzdXBlcih0LEEociwhMSkpfX07eChOdCxcIlVuYXV0aG9yaXplZEVycm9yXCIpO3ZhciB3bz1cIlVzYWdlIGV4Y2VlZGVkLCByZXRyeSBhZ2FpbiBsYXRlclwiLEx0PWNsYXNzIGV4dGVuZHMgJHtuYW1lPVwiVXNhZ2VFeGNlZWRlZEVycm9yXCI7Y29kZT1cIlA1MDA4XCI7Y29uc3RydWN0b3Iocix0PXdvKXtzdXBlcih0LEEociwhMCkpfX07eChMdCxcIlVzYWdlRXhjZWVkZWRFcnJvclwiKTthc3luYyBmdW5jdGlvbiBkZihlKXtsZXQgcjt0cnl7cj1hd2FpdCBlLnRleHQoKX1jYXRjaHtyZXR1cm57dHlwZTpcIkVtcHR5RXJyb3JcIn19dHJ5e2xldCB0PUpTT04ucGFyc2Uocik7aWYodHlwZW9mIHQ9PVwic3RyaW5nXCIpc3dpdGNoKHQpe2Nhc2VcIkludGVybmFsRGF0YVByb3h5RXJyb3JcIjpyZXR1cm57dHlwZTpcIkRhdGFQcm94eUVycm9yXCIsYm9keTp0fTtkZWZhdWx0OnJldHVybnt0eXBlOlwiVW5rbm93blRleHRFcnJvclwiLGJvZHk6dH19aWYodHlwZW9mIHQ9PVwib2JqZWN0XCImJnQhPT1udWxsKXtpZihcImlzX3BhbmljXCJpbiB0JiZcIm1lc3NhZ2VcImluIHQmJlwiZXJyb3JfY29kZVwiaW4gdClyZXR1cm57dHlwZTpcIlF1ZXJ5RW5naW5lRXJyb3JcIixib2R5OnR9O2lmKFwiRW5naW5lTm90U3RhcnRlZFwiaW4gdHx8XCJJbnRlcmFjdGl2ZVRyYW5zYWN0aW9uTWlzcm91dGVkXCJpbiB0fHxcIkludmFsaWRSZXF1ZXN0RXJyb3JcImluIHQpe2xldCBuPU9iamVjdC52YWx1ZXModClbMF0ucmVhc29uO3JldHVybiB0eXBlb2Ygbj09XCJzdHJpbmdcIiYmIVtcIlNjaGVtYU1pc3NpbmdcIixcIkVuZ2luZVZlcnNpb25Ob3RTdXBwb3J0ZWRcIl0uaW5jbHVkZXMobik/e3R5cGU6XCJVbmtub3duSnNvbkVycm9yXCIsYm9keTp0fTp7dHlwZTpcIkRhdGFQcm94eUVycm9yXCIsYm9keTp0fX19cmV0dXJue3R5cGU6XCJVbmtub3duSnNvbkVycm9yXCIsYm9keTp0fX1jYXRjaHtyZXR1cm4gcj09PVwiXCI/e3R5cGU6XCJFbXB0eUVycm9yXCJ9Ont0eXBlOlwiVW5rbm93blRleHRFcnJvclwiLGJvZHk6cn19fWFzeW5jIGZ1bmN0aW9uIEZ0KGUscil7aWYoZS5vaylyZXR1cm47bGV0IHQ9e2NsaWVudFZlcnNpb246cixyZXNwb25zZTplfSxuPWF3YWl0IGRmKGUpO2lmKG4udHlwZT09PVwiUXVlcnlFbmdpbmVFcnJvclwiKXRocm93IG5ldyB6KG4uYm9keS5tZXNzYWdlLHtjb2RlOm4uYm9keS5lcnJvcl9jb2RlLGNsaWVudFZlcnNpb246cn0pO2lmKG4udHlwZT09PVwiRGF0YVByb3h5RXJyb3JcIil7aWYobi5ib2R5PT09XCJJbnRlcm5hbERhdGFQcm94eUVycm9yXCIpdGhyb3cgbmV3IFVyKHQsXCJJbnRlcm5hbCBEYXRhIFByb3h5IGVycm9yXCIpO2lmKFwiRW5naW5lTm90U3RhcnRlZFwiaW4gbi5ib2R5KXtpZihuLmJvZHkuRW5naW5lTm90U3RhcnRlZC5yZWFzb249PT1cIlNjaGVtYU1pc3NpbmdcIilyZXR1cm4gbmV3IHByKHQpO2lmKG4uYm9keS5FbmdpbmVOb3RTdGFydGVkLnJlYXNvbj09PVwiRW5naW5lVmVyc2lvbk5vdFN1cHBvcnRlZFwiKXRocm93IG5ldyBJdCh0KTtpZihcIkVuZ2luZVN0YXJ0dXBFcnJvclwiaW4gbi5ib2R5LkVuZ2luZU5vdFN0YXJ0ZWQucmVhc29uKXtsZXR7bXNnOmksbG9nczpvfT1uLmJvZHkuRW5naW5lTm90U3RhcnRlZC5yZWFzb24uRW5naW5lU3RhcnR1cEVycm9yO3Rocm93IG5ldyBDdCh0LGksbyl9aWYoXCJLbm93bkVuZ2luZVN0YXJ0dXBFcnJvclwiaW4gbi5ib2R5LkVuZ2luZU5vdFN0YXJ0ZWQucmVhc29uKXtsZXR7bXNnOmksZXJyb3JfY29kZTpvfT1uLmJvZHkuRW5naW5lTm90U3RhcnRlZC5yZWFzb24uS25vd25FbmdpbmVTdGFydHVwRXJyb3I7dGhyb3cgbmV3IFQoaSxyLG8pfWlmKFwiSGVhbHRoY2hlY2tUaW1lb3V0XCJpbiBuLmJvZHkuRW5naW5lTm90U3RhcnRlZC5yZWFzb24pe2xldHtsb2dzOml9PW4uYm9keS5FbmdpbmVOb3RTdGFydGVkLnJlYXNvbi5IZWFsdGhjaGVja1RpbWVvdXQ7dGhyb3cgbmV3IEF0KHQsaSl9fWlmKFwiSW50ZXJhY3RpdmVUcmFuc2FjdGlvbk1pc3JvdXRlZFwiaW4gbi5ib2R5KXtsZXQgaT17SURQYXJzZUVycm9yOlwiQ291bGQgbm90IHBhcnNlIGludGVyYWN0aXZlIHRyYW5zYWN0aW9uIElEXCIsTm9RdWVyeUVuZ2luZUZvdW5kRXJyb3I6XCJDb3VsZCBub3QgZmluZCBRdWVyeSBFbmdpbmUgZm9yIHRoZSBzcGVjaWZpZWQgaG9zdCBhbmQgdHJhbnNhY3Rpb24gSURcIixUcmFuc2FjdGlvblN0YXJ0RXJyb3I6XCJDb3VsZCBub3Qgc3RhcnQgaW50ZXJhY3RpdmUgdHJhbnNhY3Rpb25cIn07dGhyb3cgbmV3IER0KHQsaVtuLmJvZHkuSW50ZXJhY3RpdmVUcmFuc2FjdGlvbk1pc3JvdXRlZC5yZWFzb25dKX1pZihcIkludmFsaWRSZXF1ZXN0RXJyb3JcImluIG4uYm9keSl0aHJvdyBuZXcgT3QodCxuLmJvZHkuSW52YWxpZFJlcXVlc3RFcnJvci5yZWFzb24pfWlmKGUuc3RhdHVzPT09NDAxfHxlLnN0YXR1cz09PTQwMyl0aHJvdyBuZXcgTnQodCxHcihFbyxuKSk7aWYoZS5zdGF0dXM9PT00MDQpcmV0dXJuIG5ldyBfdCh0LEdyKHlvLG4pKTtpZihlLnN0YXR1cz09PTQyOSl0aHJvdyBuZXcgTHQodCxHcih3byxuKSk7aWYoZS5zdGF0dXM9PT01MDQpdGhyb3cgbmV3IGt0KHQsR3IoaG8sbikpO2lmKGUuc3RhdHVzPj01MDApdGhyb3cgbmV3IFVyKHQsR3IoYm8sbikpO2lmKGUuc3RhdHVzPj00MDApdGhyb3cgbmV3IFJ0KHQsR3IoZ28sbikpfWZ1bmN0aW9uIEdyKGUscil7cmV0dXJuIHIudHlwZT09PVwiRW1wdHlFcnJvclwiP2U6YCR7ZX06ICR7SlNPTi5zdHJpbmdpZnkocil9YH1mdW5jdGlvbiBDbChlKXtsZXQgcj1NYXRoLnBvdygyLGUpKjUwLHQ9TWF0aC5jZWlsKE1hdGgucmFuZG9tKCkqciktTWF0aC5jZWlsKHIvMiksbj1yK3Q7cmV0dXJuIG5ldyBQcm9taXNlKGk9PnNldFRpbWVvdXQoKCk9PmkobiksbikpfXZhciAkZT1cIkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky9cIjtmdW5jdGlvbiBJbChlKXtsZXQgcj1uZXcgVGV4dEVuY29kZXIoKS5lbmNvZGUoZSksdD1cIlwiLG49ci5ieXRlTGVuZ3RoLGk9biUzLG89bi1pLHMsYSxsLHUsYztmb3IobGV0IHA9MDtwPG87cD1wKzMpYz1yW3BdPDwxNnxyW3ArMV08PDh8cltwKzJdLHM9KGMmMTY1MTUwNzIpPj4xOCxhPShjJjI1ODA0OCk+PjEyLGw9KGMmNDAzMik+PjYsdT1jJjYzLHQrPSRlW3NdKyRlW2FdKyRlW2xdKyRlW3VdO3JldHVybiBpPT0xPyhjPXJbb10scz0oYyYyNTIpPj4yLGE9KGMmMyk8PDQsdCs9JGVbc10rJGVbYV0rXCI9PVwiKTppPT0yJiYoYz1yW29dPDw4fHJbbysxXSxzPShjJjY0NTEyKT4+MTAsYT0oYyYxMDA4KT4+NCxsPShjJjE1KTw8Mix0Kz0kZVtzXSskZVthXSskZVtsXStcIj1cIiksdH1mdW5jdGlvbiBrbChlKXtpZighIWUuZ2VuZXJhdG9yPy5wcmV2aWV3RmVhdHVyZXMuc29tZSh0PT50LnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoXCJtZXRyaWNzXCIpKSl0aHJvdyBuZXcgVChcIlRoZSBgbWV0cmljc2AgcHJldmlldyBmZWF0dXJlIGlzIG5vdCB5ZXQgYXZhaWxhYmxlIHdpdGggQWNjZWxlcmF0ZS5cXG5QbGVhc2UgcmVtb3ZlIGBtZXRyaWNzYCBmcm9tIHRoZSBgcHJldmlld0ZlYXR1cmVzYCBpbiB5b3VyIHNjaGVtYS5cXG5cXG5Nb3JlIGluZm9ybWF0aW9uIGFib3V0IEFjY2VsZXJhdGU6IGh0dHBzOi8vcHJpcy5seS9kL2FjY2VsZXJhdGVcIixlLmNsaWVudFZlcnNpb24pfXZhciBEbD17XCJAcHJpc21hL2RlYnVnXCI6XCJ3b3Jrc3BhY2U6KlwiLFwiQHByaXNtYS9lbmdpbmVzLXZlcnNpb25cIjpcIjYuMTMuMC0zNS4zNjFlODZkMGVhNDk4N2U5ZjUzYTU2NTMwOWIzZWVkNzk3YTZiY2JkXCIsXCJAcHJpc21hL2ZldGNoLWVuZ2luZVwiOlwid29ya3NwYWNlOipcIixcIkBwcmlzbWEvZ2V0LXBsYXRmb3JtXCI6XCJ3b3Jrc3BhY2U6KlwifTt2YXIgTXQ9Y2xhc3MgZXh0ZW5kcyBzZXtuYW1lPVwiUmVxdWVzdEVycm9yXCI7Y29kZT1cIlA1MDEwXCI7Y29uc3RydWN0b3Iocix0KXtzdXBlcihgQ2Fubm90IGZldGNoIGRhdGEgZnJvbSBzZXJ2aWNlOlxuJHtyfWAsQSh0LCEwKSl9fTt4KE10LFwiUmVxdWVzdEVycm9yXCIpO2FzeW5jIGZ1bmN0aW9uIGRyKGUscix0PW49Pm4pe2xldHtjbGllbnRWZXJzaW9uOm4sLi4uaX09cixvPXQoZmV0Y2gpO3RyeXtyZXR1cm4gYXdhaXQgbyhlLGkpfWNhdGNoKHMpe2xldCBhPXMubWVzc2FnZT8/XCJVbmtub3duIGVycm9yXCI7dGhyb3cgbmV3IE10KGEse2NsaWVudFZlcnNpb246bixjYXVzZTpzfSl9fXZhciBmZj0vXlsxLTldWzAtOV0qXFwuWzAtOV0rXFwuWzAtOV0rJC8sT2w9TihcInByaXNtYTpjbGllbnQ6ZGF0YXByb3h5RW5naW5lXCIpO2FzeW5jIGZ1bmN0aW9uIGdmKGUscil7bGV0IHQ9RGxbXCJAcHJpc21hL2VuZ2luZXMtdmVyc2lvblwiXSxuPXIuY2xpZW50VmVyc2lvbj8/XCJ1bmtub3duXCI7aWYocHJvY2Vzcy5lbnYuUFJJU01BX0NMSUVOVF9EQVRBX1BST1hZX0NMSUVOVF9WRVJTSU9OfHxnbG9iYWxUaGlzLlBSSVNNQV9DTElFTlRfREFUQV9QUk9YWV9DTElFTlRfVkVSU0lPTilyZXR1cm4gcHJvY2Vzcy5lbnYuUFJJU01BX0NMSUVOVF9EQVRBX1BST1hZX0NMSUVOVF9WRVJTSU9OfHxnbG9iYWxUaGlzLlBSSVNNQV9DTElFTlRfREFUQV9QUk9YWV9DTElFTlRfVkVSU0lPTjtpZihlLmluY2x1ZGVzKFwiYWNjZWxlcmF0ZVwiKSYmbiE9PVwiMC4wLjBcIiYmbiE9PVwiaW4tbWVtb3J5XCIpcmV0dXJuIG47bGV0W2ksb109bj8uc3BsaXQoXCItXCIpPz9bXTtpZihvPT09dm9pZCAwJiZmZi50ZXN0KGkpKXJldHVybiBpO2lmKG8hPT12b2lkIDB8fG49PT1cIjAuMC4wXCJ8fG49PT1cImluLW1lbW9yeVwiKXtsZXRbc109dC5zcGxpdChcIi1cIik/P1tdLFthLGwsdV09cy5zcGxpdChcIi5cIiksYz1oZihgPD0ke2F9LiR7bH0uJHt1fWApLHA9YXdhaXQgZHIoYyx7Y2xpZW50VmVyc2lvbjpufSk7aWYoIXAub2spdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gZmV0Y2ggc3RhYmxlIFByaXNtYSB2ZXJzaW9uLCB1bnBrZy5jb20gc3RhdHVzICR7cC5zdGF0dXN9ICR7cC5zdGF0dXNUZXh0fSwgcmVzcG9uc2UgYm9keTogJHthd2FpdCBwLnRleHQoKXx8XCI8ZW1wdHkgYm9keT5cIn1gKTtsZXQgZD1hd2FpdCBwLnRleHQoKTtPbChcImxlbmd0aCBvZiBib2R5IGZldGNoZWQgZnJvbSB1bnBrZy5jb21cIixkLmxlbmd0aCk7bGV0IGY7dHJ5e2Y9SlNPTi5wYXJzZShkKX1jYXRjaChoKXt0aHJvdyBjb25zb2xlLmVycm9yKFwiSlNPTi5wYXJzZSBlcnJvcjogYm9keSBmZXRjaGVkIGZyb20gdW5wa2cuY29tOiBcIixkKSxofXJldHVybiBmLnZlcnNpb259dGhyb3cgbmV3IGNyKFwiT25seSBgbWFqb3IubWlub3IucGF0Y2hgIHZlcnNpb25zIGFyZSBzdXBwb3J0ZWQgYnkgQWNjZWxlcmF0ZS5cIix7Y2xpZW50VmVyc2lvbjpufSl9YXN5bmMgZnVuY3Rpb24gX2woZSxyKXtsZXQgdD1hd2FpdCBnZihlLHIpO3JldHVybiBPbChcInZlcnNpb25cIix0KSx0fWZ1bmN0aW9uIGhmKGUpe3JldHVybiBlbmNvZGVVUkkoYGh0dHBzOi8vdW5wa2cuY29tL3ByaXNtYUAke2V9L3BhY2thZ2UuanNvbmApfXZhciBObD0zLCR0PU4oXCJwcmlzbWE6Y2xpZW50OmRhdGFwcm94eUVuZ2luZVwiKSxxdD1jbGFzc3tuYW1lPVwiRGF0YVByb3h5RW5naW5lXCI7aW5saW5lU2NoZW1hO2lubGluZVNjaGVtYUhhc2g7aW5saW5lRGF0YXNvdXJjZXM7Y29uZmlnO2xvZ0VtaXR0ZXI7ZW52O2NsaWVudFZlcnNpb247ZW5naW5lSGFzaDt0cmFjaW5nSGVscGVyO3JlbW90ZUNsaWVudFZlcnNpb247aG9zdDtoZWFkZXJCdWlsZGVyO3N0YXJ0UHJvbWlzZTtwcm90b2NvbDtjb25zdHJ1Y3RvcihyKXtrbChyKSx0aGlzLmNvbmZpZz1yLHRoaXMuZW52PXIuZW52LHRoaXMuaW5saW5lU2NoZW1hPUlsKHIuaW5saW5lU2NoZW1hKSx0aGlzLmlubGluZURhdGFzb3VyY2VzPXIuaW5saW5lRGF0YXNvdXJjZXMsdGhpcy5pbmxpbmVTY2hlbWFIYXNoPXIuaW5saW5lU2NoZW1hSGFzaCx0aGlzLmNsaWVudFZlcnNpb249ci5jbGllbnRWZXJzaW9uLHRoaXMuZW5naW5lSGFzaD1yLmVuZ2luZVZlcnNpb24sdGhpcy5sb2dFbWl0dGVyPXIubG9nRW1pdHRlcix0aGlzLnRyYWNpbmdIZWxwZXI9ci50cmFjaW5nSGVscGVyfWFwaUtleSgpe3JldHVybiB0aGlzLmhlYWRlckJ1aWxkZXIuYXBpS2V5fXZlcnNpb24oKXtyZXR1cm4gdGhpcy5lbmdpbmVIYXNofWFzeW5jIHN0YXJ0KCl7dGhpcy5zdGFydFByb21pc2UhPT12b2lkIDAmJmF3YWl0IHRoaXMuc3RhcnRQcm9taXNlLHRoaXMuc3RhcnRQcm9taXNlPShhc3luYygpPT57bGV0e2FwaUtleTpyLHVybDp0fT10aGlzLmdldFVSTEFuZEFQSUtleSgpO3RoaXMuaG9zdD10Lmhvc3QsdGhpcy5wcm90b2NvbD10LnByb3RvY29sLHRoaXMuaGVhZGVyQnVpbGRlcj1uZXcgS24oe2FwaUtleTpyLHRyYWNpbmdIZWxwZXI6dGhpcy50cmFjaW5nSGVscGVyLGxvZ0xldmVsOnRoaXMuY29uZmlnLmxvZ0xldmVsPz9cImVycm9yXCIsbG9nUXVlcmllczp0aGlzLmNvbmZpZy5sb2dRdWVyaWVzLGVuZ2luZUhhc2g6dGhpcy5lbmdpbmVIYXNofSksdGhpcy5yZW1vdGVDbGllbnRWZXJzaW9uPWF3YWl0IF9sKHRoaXMuaG9zdCx0aGlzLmNvbmZpZyksJHQoXCJob3N0XCIsdGhpcy5ob3N0KSwkdChcInByb3RvY29sXCIsdGhpcy5wcm90b2NvbCl9KSgpLGF3YWl0IHRoaXMuc3RhcnRQcm9taXNlfWFzeW5jIHN0b3AoKXt9cHJvcGFnYXRlUmVzcG9uc2VFeHRlbnNpb25zKHIpe3I/LmxvZ3M/Lmxlbmd0aCYmci5sb2dzLmZvckVhY2godD0+e3N3aXRjaCh0LmxldmVsKXtjYXNlXCJkZWJ1Z1wiOmNhc2VcInRyYWNlXCI6JHQodCk7YnJlYWs7Y2FzZVwiZXJyb3JcIjpjYXNlXCJ3YXJuXCI6Y2FzZVwiaW5mb1wiOnt0aGlzLmxvZ0VtaXR0ZXIuZW1pdCh0LmxldmVsLHt0aW1lc3RhbXA6Zm8odC50aW1lc3RhbXApLG1lc3NhZ2U6dC5hdHRyaWJ1dGVzLm1lc3NhZ2U/P1wiXCIsdGFyZ2V0OnQudGFyZ2V0fSk7YnJlYWt9Y2FzZVwicXVlcnlcIjp7dGhpcy5sb2dFbWl0dGVyLmVtaXQoXCJxdWVyeVwiLHtxdWVyeTp0LmF0dHJpYnV0ZXMucXVlcnk/P1wiXCIsdGltZXN0YW1wOmZvKHQudGltZXN0YW1wKSxkdXJhdGlvbjp0LmF0dHJpYnV0ZXMuZHVyYXRpb25fbXM/PzAscGFyYW1zOnQuYXR0cmlidXRlcy5wYXJhbXM/P1wiXCIsdGFyZ2V0OnQudGFyZ2V0fSk7YnJlYWt9ZGVmYXVsdDp0LmxldmVsfX0pLHI/LnRyYWNlcz8ubGVuZ3RoJiZ0aGlzLnRyYWNpbmdIZWxwZXIuZGlzcGF0Y2hFbmdpbmVTcGFucyhyLnRyYWNlcyl9b25CZWZvcmVFeGl0KCl7dGhyb3cgbmV3IEVycm9yKCdcImJlZm9yZUV4aXRcIiBob29rIGlzIG5vdCBhcHBsaWNhYmxlIHRvIHRoZSByZW1vdGUgcXVlcnkgZW5naW5lJyl9YXN5bmMgdXJsKHIpe3JldHVybiBhd2FpdCB0aGlzLnN0YXJ0KCksYCR7dGhpcy5wcm90b2NvbH0vLyR7dGhpcy5ob3N0fS8ke3RoaXMucmVtb3RlQ2xpZW50VmVyc2lvbn0vJHt0aGlzLmlubGluZVNjaGVtYUhhc2h9LyR7cn1gfWFzeW5jIHVwbG9hZFNjaGVtYSgpe2xldCByPXtuYW1lOlwic2NoZW1hVXBsb2FkXCIsaW50ZXJuYWw6ITB9O3JldHVybiB0aGlzLnRyYWNpbmdIZWxwZXIucnVuSW5DaGlsZFNwYW4ocixhc3luYygpPT57bGV0IHQ9YXdhaXQgZHIoYXdhaXQgdGhpcy51cmwoXCJzY2hlbWFcIikse21ldGhvZDpcIlBVVFwiLGhlYWRlcnM6dGhpcy5oZWFkZXJCdWlsZGVyLmJ1aWxkKCksYm9keTp0aGlzLmlubGluZVNjaGVtYSxjbGllbnRWZXJzaW9uOnRoaXMuY2xpZW50VmVyc2lvbn0pO3Qub2t8fCR0KFwic2NoZW1hIHJlc3BvbnNlIHN0YXR1c1wiLHQuc3RhdHVzKTtsZXQgbj1hd2FpdCBGdCh0LHRoaXMuY2xpZW50VmVyc2lvbik7aWYobil0aHJvdyB0aGlzLmxvZ0VtaXR0ZXIuZW1pdChcIndhcm5cIix7bWVzc2FnZTpgRXJyb3Igd2hpbGUgdXBsb2FkaW5nIHNjaGVtYTogJHtuLm1lc3NhZ2V9YCx0aW1lc3RhbXA6bmV3IERhdGUsdGFyZ2V0OlwiXCJ9KSxuO3RoaXMubG9nRW1pdHRlci5lbWl0KFwiaW5mb1wiLHttZXNzYWdlOmBTY2hlbWEgKHJlKXVwbG9hZGVkIChoYXNoOiAke3RoaXMuaW5saW5lU2NoZW1hSGFzaH0pYCx0aW1lc3RhbXA6bmV3IERhdGUsdGFyZ2V0OlwiXCJ9KX0pfXJlcXVlc3Qocix7dHJhY2VwYXJlbnQ6dCxpbnRlcmFjdGl2ZVRyYW5zYWN0aW9uOm4sY3VzdG9tRGF0YVByb3h5RmV0Y2g6aX0pe3JldHVybiB0aGlzLnJlcXVlc3RJbnRlcm5hbCh7Ym9keTpyLHRyYWNlcGFyZW50OnQsaW50ZXJhY3RpdmVUcmFuc2FjdGlvbjpuLGN1c3RvbURhdGFQcm94eUZldGNoOml9KX1hc3luYyByZXF1ZXN0QmF0Y2gocix7dHJhY2VwYXJlbnQ6dCx0cmFuc2FjdGlvbjpuLGN1c3RvbURhdGFQcm94eUZldGNoOml9KXtsZXQgbz1uPy5raW5kPT09XCJpdHhcIj9uLm9wdGlvbnM6dm9pZCAwLHM9JHIocixuKTtyZXR1cm4oYXdhaXQgdGhpcy5yZXF1ZXN0SW50ZXJuYWwoe2JvZHk6cyxjdXN0b21EYXRhUHJveHlGZXRjaDppLGludGVyYWN0aXZlVHJhbnNhY3Rpb246byx0cmFjZXBhcmVudDp0fSkpLm1hcChsPT4obC5leHRlbnNpb25zJiZ0aGlzLnByb3BhZ2F0ZVJlc3BvbnNlRXh0ZW5zaW9ucyhsLmV4dGVuc2lvbnMpLFwiZXJyb3JzXCJpbiBsP3RoaXMuY29udmVydFByb3RvY29sRXJyb3JzVG9DbGllbnRFcnJvcihsLmVycm9ycyk6bCkpfXJlcXVlc3RJbnRlcm5hbCh7Ym9keTpyLHRyYWNlcGFyZW50OnQsY3VzdG9tRGF0YVByb3h5RmV0Y2g6bixpbnRlcmFjdGl2ZVRyYW5zYWN0aW9uOml9KXtyZXR1cm4gdGhpcy53aXRoUmV0cnkoe2FjdGlvbkdlcnVuZDpcInF1ZXJ5aW5nXCIsY2FsbGJhY2s6YXN5bmMoe2xvZ0h0dHBDYWxsOm99KT0+e2xldCBzPWk/YCR7aS5wYXlsb2FkLmVuZHBvaW50fS9ncmFwaHFsYDphd2FpdCB0aGlzLnVybChcImdyYXBocWxcIik7byhzKTtsZXQgYT1hd2FpdCBkcihzLHttZXRob2Q6XCJQT1NUXCIsaGVhZGVyczp0aGlzLmhlYWRlckJ1aWxkZXIuYnVpbGQoe3RyYWNlcGFyZW50OnQsdHJhbnNhY3Rpb25JZDppPy5pZH0pLGJvZHk6SlNPTi5zdHJpbmdpZnkociksY2xpZW50VmVyc2lvbjp0aGlzLmNsaWVudFZlcnNpb259LG4pO2Eub2t8fCR0KFwiZ3JhcGhxbCByZXNwb25zZSBzdGF0dXNcIixhLnN0YXR1cyksYXdhaXQgdGhpcy5oYW5kbGVFcnJvcihhd2FpdCBGdChhLHRoaXMuY2xpZW50VmVyc2lvbikpO2xldCBsPWF3YWl0IGEuanNvbigpO2lmKGwuZXh0ZW5zaW9ucyYmdGhpcy5wcm9wYWdhdGVSZXNwb25zZUV4dGVuc2lvbnMobC5leHRlbnNpb25zKSxcImVycm9yc1wiaW4gbCl0aHJvdyB0aGlzLmNvbnZlcnRQcm90b2NvbEVycm9yc1RvQ2xpZW50RXJyb3IobC5lcnJvcnMpO3JldHVyblwiYmF0Y2hSZXN1bHRcImluIGw/bC5iYXRjaFJlc3VsdDpsfX0pfWFzeW5jIHRyYW5zYWN0aW9uKHIsdCxuKXtsZXQgaT17c3RhcnQ6XCJzdGFydGluZ1wiLGNvbW1pdDpcImNvbW1pdHRpbmdcIixyb2xsYmFjazpcInJvbGxpbmcgYmFja1wifTtyZXR1cm4gdGhpcy53aXRoUmV0cnkoe2FjdGlvbkdlcnVuZDpgJHtpW3JdfSB0cmFuc2FjdGlvbmAsY2FsbGJhY2s6YXN5bmMoe2xvZ0h0dHBDYWxsOm99KT0+e2lmKHI9PT1cInN0YXJ0XCIpe2xldCBzPUpTT04uc3RyaW5naWZ5KHttYXhfd2FpdDpuLm1heFdhaXQsdGltZW91dDpuLnRpbWVvdXQsaXNvbGF0aW9uX2xldmVsOm4uaXNvbGF0aW9uTGV2ZWx9KSxhPWF3YWl0IHRoaXMudXJsKFwidHJhbnNhY3Rpb24vc3RhcnRcIik7byhhKTtsZXQgbD1hd2FpdCBkcihhLHttZXRob2Q6XCJQT1NUXCIsaGVhZGVyczp0aGlzLmhlYWRlckJ1aWxkZXIuYnVpbGQoe3RyYWNlcGFyZW50OnQudHJhY2VwYXJlbnR9KSxib2R5OnMsY2xpZW50VmVyc2lvbjp0aGlzLmNsaWVudFZlcnNpb259KTthd2FpdCB0aGlzLmhhbmRsZUVycm9yKGF3YWl0IEZ0KGwsdGhpcy5jbGllbnRWZXJzaW9uKSk7bGV0IHU9YXdhaXQgbC5qc29uKCkse2V4dGVuc2lvbnM6Y309dTtjJiZ0aGlzLnByb3BhZ2F0ZVJlc3BvbnNlRXh0ZW5zaW9ucyhjKTtsZXQgcD11LmlkLGQ9dVtcImRhdGEtcHJveHlcIl0uZW5kcG9pbnQ7cmV0dXJue2lkOnAscGF5bG9hZDp7ZW5kcG9pbnQ6ZH19fWVsc2V7bGV0IHM9YCR7bi5wYXlsb2FkLmVuZHBvaW50fS8ke3J9YDtvKHMpO2xldCBhPWF3YWl0IGRyKHMse21ldGhvZDpcIlBPU1RcIixoZWFkZXJzOnRoaXMuaGVhZGVyQnVpbGRlci5idWlsZCh7dHJhY2VwYXJlbnQ6dC50cmFjZXBhcmVudH0pLGNsaWVudFZlcnNpb246dGhpcy5jbGllbnRWZXJzaW9ufSk7YXdhaXQgdGhpcy5oYW5kbGVFcnJvcihhd2FpdCBGdChhLHRoaXMuY2xpZW50VmVyc2lvbikpO2xldCBsPWF3YWl0IGEuanNvbigpLHtleHRlbnNpb25zOnV9PWw7dSYmdGhpcy5wcm9wYWdhdGVSZXNwb25zZUV4dGVuc2lvbnModSk7cmV0dXJufX19KX1nZXRVUkxBbmRBUElLZXkoKXtyZXR1cm4gUmwoe2NsaWVudFZlcnNpb246dGhpcy5jbGllbnRWZXJzaW9uLGVudjp0aGlzLmVudixpbmxpbmVEYXRhc291cmNlczp0aGlzLmlubGluZURhdGFzb3VyY2VzLG92ZXJyaWRlRGF0YXNvdXJjZXM6dGhpcy5jb25maWcub3ZlcnJpZGVEYXRhc291cmNlc30pfW1ldHJpY3MoKXt0aHJvdyBuZXcgY3IoXCJNZXRyaWNzIGFyZSBub3QgeWV0IHN1cHBvcnRlZCBmb3IgQWNjZWxlcmF0ZVwiLHtjbGllbnRWZXJzaW9uOnRoaXMuY2xpZW50VmVyc2lvbn0pfWFzeW5jIHdpdGhSZXRyeShyKXtmb3IobGV0IHQ9MDs7dCsrKXtsZXQgbj1pPT57dGhpcy5sb2dFbWl0dGVyLmVtaXQoXCJpbmZvXCIse21lc3NhZ2U6YENhbGxpbmcgJHtpfSAobj0ke3R9KWAsdGltZXN0YW1wOm5ldyBEYXRlLHRhcmdldDpcIlwifSl9O3RyeXtyZXR1cm4gYXdhaXQgci5jYWxsYmFjayh7bG9nSHR0cENhbGw6bn0pfWNhdGNoKGkpe2lmKCEoaSBpbnN0YW5jZW9mIHNlKXx8IWkuaXNSZXRyeWFibGUpdGhyb3cgaTtpZih0Pj1ObCl0aHJvdyBpIGluc3RhbmNlb2YgQnI/aS5jYXVzZTppO3RoaXMubG9nRW1pdHRlci5lbWl0KFwid2FyblwiLHttZXNzYWdlOmBBdHRlbXB0ICR7dCsxfS8ke05sfSBmYWlsZWQgZm9yICR7ci5hY3Rpb25HZXJ1bmR9OiAke2kubWVzc2FnZT8/XCIodW5rbm93bilcIn1gLHRpbWVzdGFtcDpuZXcgRGF0ZSx0YXJnZXQ6XCJcIn0pO2xldCBvPWF3YWl0IENsKHQpO3RoaXMubG9nRW1pdHRlci5lbWl0KFwid2FyblwiLHttZXNzYWdlOmBSZXRyeWluZyBhZnRlciAke299bXNgLHRpbWVzdGFtcDpuZXcgRGF0ZSx0YXJnZXQ6XCJcIn0pfX19YXN5bmMgaGFuZGxlRXJyb3Iocil7aWYociBpbnN0YW5jZW9mIHByKXRocm93IGF3YWl0IHRoaXMudXBsb2FkU2NoZW1hKCksbmV3IEJyKHtjbGllbnRWZXJzaW9uOnRoaXMuY2xpZW50VmVyc2lvbixjYXVzZTpyfSk7aWYocil0aHJvdyByfWNvbnZlcnRQcm90b2NvbEVycm9yc1RvQ2xpZW50RXJyb3Iocil7cmV0dXJuIHIubGVuZ3RoPT09MT9xcihyWzBdLHRoaXMuY29uZmlnLmNsaWVudFZlcnNpb24sdGhpcy5jb25maWcuYWN0aXZlUHJvdmlkZXIpOm5ldyBqKEpTT04uc3RyaW5naWZ5KHIpLHtjbGllbnRWZXJzaW9uOnRoaXMuY29uZmlnLmNsaWVudFZlcnNpb259KX1hcHBseVBlbmRpbmdNaWdyYXRpb25zKCl7dGhyb3cgbmV3IEVycm9yKFwiTWV0aG9kIG5vdCBpbXBsZW1lbnRlZC5cIil9fTtmdW5jdGlvbiBMbChlKXtpZihlPy5raW5kPT09XCJpdHhcIilyZXR1cm4gZS5vcHRpb25zLmlkfXZhciB2bz1DKHJlcXVpcmUoXCJub2RlOm9zXCIpKSxGbD1DKHJlcXVpcmUoXCJub2RlOnBhdGhcIikpO3ZhciB4bz1TeW1ib2woXCJQcmlzbWFMaWJyYXJ5RW5naW5lQ2FjaGVcIik7ZnVuY3Rpb24geWYoKXtsZXQgZT1nbG9iYWxUaGlzO3JldHVybiBlW3hvXT09PXZvaWQgMCYmKGVbeG9dPXt9KSxlW3hvXX1mdW5jdGlvbiBiZihlKXtsZXQgcj15ZigpO2lmKHJbZV0hPT12b2lkIDApcmV0dXJuIHJbZV07bGV0IHQ9RmwuZGVmYXVsdC50b05hbWVzcGFjZWRQYXRoKGUpLG49e2V4cG9ydHM6e319LGk9MDtyZXR1cm4gcHJvY2Vzcy5wbGF0Zm9ybSE9PVwid2luMzJcIiYmKGk9dm8uZGVmYXVsdC5jb25zdGFudHMuZGxvcGVuLlJUTERfTEFaWXx2by5kZWZhdWx0LmNvbnN0YW50cy5kbG9wZW4uUlRMRF9ERUVQQklORCkscHJvY2Vzcy5kbG9wZW4obix0LGkpLHJbZV09bi5leHBvcnRzLG4uZXhwb3J0c312YXIgTWw9e2FzeW5jIGxvYWRMaWJyYXJ5KGUpe2xldCByPWF3YWl0IGdpKCksdD1hd2FpdCBibChcImxpYnJhcnlcIixlKTt0cnl7cmV0dXJuIGUudHJhY2luZ0hlbHBlci5ydW5JbkNoaWxkU3Bhbih7bmFtZTpcImxvYWRMaWJyYXJ5XCIsaW50ZXJuYWw6ITB9LCgpPT5iZih0KSl9Y2F0Y2gobil7bGV0IGk9Q2koe2U6bixwbGF0Zm9ybUluZm86cixpZDp0fSk7dGhyb3cgbmV3IFQoaSxlLmNsaWVudFZlcnNpb24pfX19O3ZhciBQbywkbD17YXN5bmMgbG9hZExpYnJhcnkoZSl7bGV0e2NsaWVudFZlcnNpb246cixhZGFwdGVyOnQsZW5naW5lV2FzbTpufT1lO2lmKHQ9PT12b2lkIDApdGhyb3cgbmV3IFQoYFRoZSBcXGBhZGFwdGVyXFxgIG9wdGlvbiBmb3IgXFxgUHJpc21hQ2xpZW50XFxgIGlzIHJlcXVpcmVkIGluIHRoaXMgY29udGV4dCAoJHtHbigpLnByZXR0eU5hbWV9KWAscik7aWYobj09PXZvaWQgMCl0aHJvdyBuZXcgVChcIldBU00gZW5naW5lIHdhcyB1bmV4cGVjdGVkbHkgYHVuZGVmaW5lZGBcIixyKTtQbz09PXZvaWQgMCYmKFBvPShhc3luYygpPT57bGV0IG89YXdhaXQgbi5nZXRSdW50aW1lKCkscz1hd2FpdCBuLmdldFF1ZXJ5RW5naW5lV2FzbU1vZHVsZSgpO2lmKHM9PW51bGwpdGhyb3cgbmV3IFQoXCJUaGUgbG9hZGVkIHdhc20gbW9kdWxlIHdhcyB1bmV4cGVjdGVkbHkgYHVuZGVmaW5lZGAgb3IgYG51bGxgIG9uY2UgbG9hZGVkXCIscik7bGV0IGE9e1wiLi9xdWVyeV9lbmdpbmVfYmcuanNcIjpvfSxsPW5ldyBXZWJBc3NlbWJseS5JbnN0YW5jZShzLGEpLHU9bC5leHBvcnRzLl9fd2JpbmRnZW5fc3RhcnQ7cmV0dXJuIG8uX193Ymdfc2V0X3dhc20obC5leHBvcnRzKSx1KCksby5RdWVyeUVuZ2luZX0pKCkpO2xldCBpPWF3YWl0IFBvO3JldHVybntkZWJ1Z1BhbmljKCl7cmV0dXJuIFByb21pc2UucmVqZWN0KFwie31cIil9LGRtbWYoKXtyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKFwie31cIil9LHZlcnNpb24oKXtyZXR1cm57Y29tbWl0OlwidW5rbm93blwiLHZlcnNpb246XCJ1bmtub3duXCJ9fSxRdWVyeUVuZ2luZTppfX19O3ZhciBFZj1cIlAyMDM2XCIsQWU9TihcInByaXNtYTpjbGllbnQ6bGlicmFyeUVuZ2luZVwiKTtmdW5jdGlvbiB3ZihlKXtyZXR1cm4gZS5pdGVtX3R5cGU9PT1cInF1ZXJ5XCImJlwicXVlcnlcImluIGV9ZnVuY3Rpb24geGYoZSl7cmV0dXJuXCJsZXZlbFwiaW4gZT9lLmxldmVsPT09XCJlcnJvclwiJiZlLm1lc3NhZ2U9PT1cIlBBTklDXCI6ITF9dmFyIHFsPVsuLi51aSxcIm5hdGl2ZVwiXSx2Zj0weGZmZmZmZmZmZmZmZmZmZmZuLFRvPTFuO2Z1bmN0aW9uIFBmKCl7bGV0IGU9VG8rKztyZXR1cm4gVG8+dmYmJihUbz0xbiksZX12YXIgUXI9Y2xhc3N7bmFtZT1cIkxpYnJhcnlFbmdpbmVcIjtlbmdpbmU7bGlicmFyeUluc3RhbnRpYXRpb25Qcm9taXNlO2xpYnJhcnlTdGFydGluZ1Byb21pc2U7bGlicmFyeVN0b3BwaW5nUHJvbWlzZTtsaWJyYXJ5U3RhcnRlZDtleGVjdXRpbmdRdWVyeVByb21pc2U7Y29uZmlnO1F1ZXJ5RW5naW5lQ29uc3RydWN0b3I7bGlicmFyeUxvYWRlcjtsaWJyYXJ5O2xvZ0VtaXR0ZXI7bGliUXVlcnlFbmdpbmVQYXRoO2JpbmFyeVRhcmdldDtkYXRhc291cmNlT3ZlcnJpZGVzO2RhdGFtb2RlbDtsb2dRdWVyaWVzO2xvZ0xldmVsO2xhc3RRdWVyeTtsb2dnZXJSdXN0UGFuaWM7dHJhY2luZ0hlbHBlcjthZGFwdGVyUHJvbWlzZTt2ZXJzaW9uSW5mbztjb25zdHJ1Y3RvcihyLHQpe3RoaXMubGlicmFyeUxvYWRlcj10Pz9NbCxyLmVuZ2luZVdhc20hPT12b2lkIDAmJih0aGlzLmxpYnJhcnlMb2FkZXI9dD8/JGwpLHRoaXMuY29uZmlnPXIsdGhpcy5saWJyYXJ5U3RhcnRlZD0hMSx0aGlzLmxvZ1F1ZXJpZXM9ci5sb2dRdWVyaWVzPz8hMSx0aGlzLmxvZ0xldmVsPXIubG9nTGV2ZWw/P1wiZXJyb3JcIix0aGlzLmxvZ0VtaXR0ZXI9ci5sb2dFbWl0dGVyLHRoaXMuZGF0YW1vZGVsPXIuaW5saW5lU2NoZW1hLHRoaXMudHJhY2luZ0hlbHBlcj1yLnRyYWNpbmdIZWxwZXIsci5lbmFibGVEZWJ1Z0xvZ3MmJih0aGlzLmxvZ0xldmVsPVwiZGVidWdcIik7bGV0IG49T2JqZWN0LmtleXMoci5vdmVycmlkZURhdGFzb3VyY2VzKVswXSxpPXIub3ZlcnJpZGVEYXRhc291cmNlc1tuXT8udXJsO24hPT12b2lkIDAmJmkhPT12b2lkIDAmJih0aGlzLmRhdGFzb3VyY2VPdmVycmlkZXM9e1tuXTppfSksdGhpcy5saWJyYXJ5SW5zdGFudGlhdGlvblByb21pc2U9dGhpcy5pbnN0YW50aWF0ZUxpYnJhcnkoKX13cmFwRW5naW5lKHIpe3JldHVybnthcHBseVBlbmRpbmdNaWdyYXRpb25zOnIuYXBwbHlQZW5kaW5nTWlncmF0aW9ucz8uYmluZChyKSxjb21taXRUcmFuc2FjdGlvbjp0aGlzLndpdGhSZXF1ZXN0SWQoci5jb21taXRUcmFuc2FjdGlvbi5iaW5kKHIpKSxjb25uZWN0OnRoaXMud2l0aFJlcXVlc3RJZChyLmNvbm5lY3QuYmluZChyKSksZGlzY29ubmVjdDp0aGlzLndpdGhSZXF1ZXN0SWQoci5kaXNjb25uZWN0LmJpbmQocikpLG1ldHJpY3M6ci5tZXRyaWNzPy5iaW5kKHIpLHF1ZXJ5OnRoaXMud2l0aFJlcXVlc3RJZChyLnF1ZXJ5LmJpbmQocikpLHJvbGxiYWNrVHJhbnNhY3Rpb246dGhpcy53aXRoUmVxdWVzdElkKHIucm9sbGJhY2tUcmFuc2FjdGlvbi5iaW5kKHIpKSxzZGxTY2hlbWE6ci5zZGxTY2hlbWE/LmJpbmQociksc3RhcnRUcmFuc2FjdGlvbjp0aGlzLndpdGhSZXF1ZXN0SWQoci5zdGFydFRyYW5zYWN0aW9uLmJpbmQocikpLHRyYWNlOnIudHJhY2UuYmluZChyKSxmcmVlOnIuZnJlZT8uYmluZChyKX19d2l0aFJlcXVlc3RJZChyKXtyZXR1cm4gYXN5bmMoLi4udCk9PntsZXQgbj1QZigpLnRvU3RyaW5nKCk7dHJ5e3JldHVybiBhd2FpdCByKC4uLnQsbil9ZmluYWxseXtpZih0aGlzLnRyYWNpbmdIZWxwZXIuaXNFbmFibGVkKCkpe2xldCBpPWF3YWl0IHRoaXMuZW5naW5lPy50cmFjZShuKTtpZihpKXtsZXQgbz1KU09OLnBhcnNlKGkpO3RoaXMudHJhY2luZ0hlbHBlci5kaXNwYXRjaEVuZ2luZVNwYW5zKG8uc3BhbnMpfX19fX1hc3luYyBhcHBseVBlbmRpbmdNaWdyYXRpb25zKCl7dGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGNhbGwgdGhpcyBtZXRob2QgZnJvbSB0aGlzIHR5cGUgb2YgZW5naW5lIGluc3RhbmNlXCIpfWFzeW5jIHRyYW5zYWN0aW9uKHIsdCxuKXthd2FpdCB0aGlzLnN0YXJ0KCk7bGV0IGk9YXdhaXQgdGhpcy5hZGFwdGVyUHJvbWlzZSxvPUpTT04uc3RyaW5naWZ5KHQpLHM7aWYocj09PVwic3RhcnRcIil7bGV0IGw9SlNPTi5zdHJpbmdpZnkoe21heF93YWl0Om4ubWF4V2FpdCx0aW1lb3V0Om4udGltZW91dCxpc29sYXRpb25fbGV2ZWw6bi5pc29sYXRpb25MZXZlbH0pO3M9YXdhaXQgdGhpcy5lbmdpbmU/LnN0YXJ0VHJhbnNhY3Rpb24obCxvKX1lbHNlIHI9PT1cImNvbW1pdFwiP3M9YXdhaXQgdGhpcy5lbmdpbmU/LmNvbW1pdFRyYW5zYWN0aW9uKG4uaWQsbyk6cj09PVwicm9sbGJhY2tcIiYmKHM9YXdhaXQgdGhpcy5lbmdpbmU/LnJvbGxiYWNrVHJhbnNhY3Rpb24obi5pZCxvKSk7bGV0IGE9dGhpcy5wYXJzZUVuZ2luZVJlc3BvbnNlKHMpO2lmKFRmKGEpKXtsZXQgbD10aGlzLmdldEV4dGVybmFsQWRhcHRlckVycm9yKGEsaT8uZXJyb3JSZWdpc3RyeSk7dGhyb3cgbD9sLmVycm9yOm5ldyB6KGEubWVzc2FnZSx7Y29kZTphLmVycm9yX2NvZGUsY2xpZW50VmVyc2lvbjp0aGlzLmNvbmZpZy5jbGllbnRWZXJzaW9uLG1ldGE6YS5tZXRhfSl9ZWxzZSBpZih0eXBlb2YgYS5tZXNzYWdlPT1cInN0cmluZ1wiKXRocm93IG5ldyBqKGEubWVzc2FnZSx7Y2xpZW50VmVyc2lvbjp0aGlzLmNvbmZpZy5jbGllbnRWZXJzaW9ufSk7cmV0dXJuIGF9YXN5bmMgaW5zdGFudGlhdGVMaWJyYXJ5KCl7aWYoQWUoXCJpbnRlcm5hbFNldHVwXCIpLHRoaXMubGlicmFyeUluc3RhbnRpYXRpb25Qcm9taXNlKXJldHVybiB0aGlzLmxpYnJhcnlJbnN0YW50aWF0aW9uUHJvbWlzZTtsaSgpLHRoaXMuYmluYXJ5VGFyZ2V0PWF3YWl0IHRoaXMuZ2V0Q3VycmVudEJpbmFyeVRhcmdldCgpLGF3YWl0IHRoaXMudHJhY2luZ0hlbHBlci5ydW5JbkNoaWxkU3BhbihcImxvYWRfZW5naW5lXCIsKCk9PnRoaXMubG9hZEVuZ2luZSgpKSx0aGlzLnZlcnNpb24oKX1hc3luYyBnZXRDdXJyZW50QmluYXJ5VGFyZ2V0KCl7e2lmKHRoaXMuYmluYXJ5VGFyZ2V0KXJldHVybiB0aGlzLmJpbmFyeVRhcmdldDtsZXQgcj1hd2FpdCB0aGlzLnRyYWNpbmdIZWxwZXIucnVuSW5DaGlsZFNwYW4oXCJkZXRlY3RfcGxhdGZvcm1cIiwoKT0+aXIoKSk7aWYoIXFsLmluY2x1ZGVzKHIpKXRocm93IG5ldyBUKGBVbmtub3duICR7Y2UoXCJQUklTTUFfUVVFUllfRU5HSU5FX0xJQlJBUllcIil9ICR7Y2UoVyhyKSl9LiBQb3NzaWJsZSBiaW5hcnlUYXJnZXRzOiAke3FlKHFsLmpvaW4oXCIsIFwiKSl9IG9yIGEgcGF0aCB0byB0aGUgcXVlcnkgZW5naW5lIGxpYnJhcnkuXG5Zb3UgbWF5IGhhdmUgdG8gcnVuICR7cWUoXCJwcmlzbWEgZ2VuZXJhdGVcIil9IGZvciB5b3VyIGNoYW5nZXMgdG8gdGFrZSBlZmZlY3QuYCx0aGlzLmNvbmZpZy5jbGllbnRWZXJzaW9uKTtyZXR1cm4gcn19cGFyc2VFbmdpbmVSZXNwb25zZShyKXtpZighcil0aHJvdyBuZXcgaihcIlJlc3BvbnNlIGZyb20gdGhlIEVuZ2luZSB3YXMgZW1wdHlcIix7Y2xpZW50VmVyc2lvbjp0aGlzLmNvbmZpZy5jbGllbnRWZXJzaW9ufSk7dHJ5e3JldHVybiBKU09OLnBhcnNlKHIpfWNhdGNoe3Rocm93IG5ldyBqKFwiVW5hYmxlIHRvIEpTT04ucGFyc2UgcmVzcG9uc2UgZnJvbSBlbmdpbmVcIix7Y2xpZW50VmVyc2lvbjp0aGlzLmNvbmZpZy5jbGllbnRWZXJzaW9ufSl9fWFzeW5jIGxvYWRFbmdpbmUoKXtpZighdGhpcy5lbmdpbmUpe3RoaXMuUXVlcnlFbmdpbmVDb25zdHJ1Y3Rvcnx8KHRoaXMubGlicmFyeT1hd2FpdCB0aGlzLmxpYnJhcnlMb2FkZXIubG9hZExpYnJhcnkodGhpcy5jb25maWcpLHRoaXMuUXVlcnlFbmdpbmVDb25zdHJ1Y3Rvcj10aGlzLmxpYnJhcnkuUXVlcnlFbmdpbmUpO3RyeXtsZXQgcj1uZXcgV2Vha1JlZih0aGlzKTt0aGlzLmFkYXB0ZXJQcm9taXNlfHwodGhpcy5hZGFwdGVyUHJvbWlzZT10aGlzLmNvbmZpZy5hZGFwdGVyPy5jb25uZWN0KCk/LnRoZW4odG4pKTtsZXQgdD1hd2FpdCB0aGlzLmFkYXB0ZXJQcm9taXNlO3QmJkFlKFwiVXNpbmcgZHJpdmVyIGFkYXB0ZXI6ICVPXCIsdCksdGhpcy5lbmdpbmU9dGhpcy53cmFwRW5naW5lKG5ldyB0aGlzLlF1ZXJ5RW5naW5lQ29uc3RydWN0b3Ioe2RhdGFtb2RlbDp0aGlzLmRhdGFtb2RlbCxlbnY6cHJvY2Vzcy5lbnYsbG9nUXVlcmllczp0aGlzLmNvbmZpZy5sb2dRdWVyaWVzPz8hMSxpZ25vcmVFbnZWYXJFcnJvcnM6ITAsZGF0YXNvdXJjZU92ZXJyaWRlczp0aGlzLmRhdGFzb3VyY2VPdmVycmlkZXM/P3t9LGxvZ0xldmVsOnRoaXMubG9nTGV2ZWwsY29uZmlnRGlyOnRoaXMuY29uZmlnLmN3ZCxlbmdpbmVQcm90b2NvbDpcImpzb25cIixlbmFibGVUcmFjaW5nOnRoaXMudHJhY2luZ0hlbHBlci5pc0VuYWJsZWQoKX0sbj0+e3IuZGVyZWYoKT8ubG9nZ2VyKG4pfSx0KSl9Y2F0Y2gocil7bGV0IHQ9cixuPXRoaXMucGFyc2VJbml0RXJyb3IodC5tZXNzYWdlKTt0aHJvdyB0eXBlb2Ygbj09XCJzdHJpbmdcIj90Om5ldyBUKG4ubWVzc2FnZSx0aGlzLmNvbmZpZy5jbGllbnRWZXJzaW9uLG4uZXJyb3JfY29kZSl9fX1sb2dnZXIocil7bGV0IHQ9dGhpcy5wYXJzZUVuZ2luZVJlc3BvbnNlKHIpO3QmJih0LmxldmVsPXQ/LmxldmVsLnRvTG93ZXJDYXNlKCk/P1widW5rbm93blwiLHdmKHQpP3RoaXMubG9nRW1pdHRlci5lbWl0KFwicXVlcnlcIix7dGltZXN0YW1wOm5ldyBEYXRlLHF1ZXJ5OnQucXVlcnkscGFyYW1zOnQucGFyYW1zLGR1cmF0aW9uOk51bWJlcih0LmR1cmF0aW9uX21zKSx0YXJnZXQ6dC5tb2R1bGVfcGF0aH0pOnhmKHQpP3RoaXMubG9nZ2VyUnVzdFBhbmljPW5ldyBsZShTbyh0aGlzLGAke3QubWVzc2FnZX06ICR7dC5yZWFzb259IGluICR7dC5maWxlfToke3QubGluZX06JHt0LmNvbHVtbn1gKSx0aGlzLmNvbmZpZy5jbGllbnRWZXJzaW9uKTp0aGlzLmxvZ0VtaXR0ZXIuZW1pdCh0LmxldmVsLHt0aW1lc3RhbXA6bmV3IERhdGUsbWVzc2FnZTp0Lm1lc3NhZ2UsdGFyZ2V0OnQubW9kdWxlX3BhdGh9KSl9cGFyc2VJbml0RXJyb3Iocil7dHJ5e3JldHVybiBKU09OLnBhcnNlKHIpfWNhdGNoe31yZXR1cm4gcn1wYXJzZVJlcXVlc3RFcnJvcihyKXt0cnl7cmV0dXJuIEpTT04ucGFyc2Uocil9Y2F0Y2h7fXJldHVybiByfW9uQmVmb3JlRXhpdCgpe3Rocm93IG5ldyBFcnJvcignXCJiZWZvcmVFeGl0XCIgaG9vayBpcyBub3QgYXBwbGljYWJsZSB0byB0aGUgbGlicmFyeSBlbmdpbmUgc2luY2UgUHJpc21hIDUuMC4wLCBpdCBpcyBvbmx5IHJlbGV2YW50IGFuZCBpbXBsZW1lbnRlZCBmb3IgdGhlIGJpbmFyeSBlbmdpbmUuIFBsZWFzZSBhZGQgeW91ciBldmVudCBsaXN0ZW5lciB0byB0aGUgYHByb2Nlc3NgIG9iamVjdCBkaXJlY3RseSBpbnN0ZWFkLicpfWFzeW5jIHN0YXJ0KCl7aWYodGhpcy5saWJyYXJ5SW5zdGFudGlhdGlvblByb21pc2V8fCh0aGlzLmxpYnJhcnlJbnN0YW50aWF0aW9uUHJvbWlzZT10aGlzLmluc3RhbnRpYXRlTGlicmFyeSgpKSxhd2FpdCB0aGlzLmxpYnJhcnlJbnN0YW50aWF0aW9uUHJvbWlzZSxhd2FpdCB0aGlzLmxpYnJhcnlTdG9wcGluZ1Byb21pc2UsdGhpcy5saWJyYXJ5U3RhcnRpbmdQcm9taXNlKXJldHVybiBBZShgbGlicmFyeSBhbHJlYWR5IHN0YXJ0aW5nLCB0aGlzLmxpYnJhcnlTdGFydGVkOiAke3RoaXMubGlicmFyeVN0YXJ0ZWR9YCksdGhpcy5saWJyYXJ5U3RhcnRpbmdQcm9taXNlO2lmKHRoaXMubGlicmFyeVN0YXJ0ZWQpcmV0dXJuO2xldCByPWFzeW5jKCk9PntBZShcImxpYnJhcnkgc3RhcnRpbmdcIik7dHJ5e2xldCB0PXt0cmFjZXBhcmVudDp0aGlzLnRyYWNpbmdIZWxwZXIuZ2V0VHJhY2VQYXJlbnQoKX07YXdhaXQgdGhpcy5lbmdpbmU/LmNvbm5lY3QoSlNPTi5zdHJpbmdpZnkodCkpLHRoaXMubGlicmFyeVN0YXJ0ZWQ9ITAsdGhpcy5hZGFwdGVyUHJvbWlzZXx8KHRoaXMuYWRhcHRlclByb21pc2U9dGhpcy5jb25maWcuYWRhcHRlcj8uY29ubmVjdCgpPy50aGVuKHRuKSksYXdhaXQgdGhpcy5hZGFwdGVyUHJvbWlzZSxBZShcImxpYnJhcnkgc3RhcnRlZFwiKX1jYXRjaCh0KXtsZXQgbj10aGlzLnBhcnNlSW5pdEVycm9yKHQubWVzc2FnZSk7dGhyb3cgdHlwZW9mIG49PVwic3RyaW5nXCI/dDpuZXcgVChuLm1lc3NhZ2UsdGhpcy5jb25maWcuY2xpZW50VmVyc2lvbixuLmVycm9yX2NvZGUpfWZpbmFsbHl7dGhpcy5saWJyYXJ5U3RhcnRpbmdQcm9taXNlPXZvaWQgMH19O3JldHVybiB0aGlzLmxpYnJhcnlTdGFydGluZ1Byb21pc2U9dGhpcy50cmFjaW5nSGVscGVyLnJ1bkluQ2hpbGRTcGFuKFwiY29ubmVjdFwiLHIpLHRoaXMubGlicmFyeVN0YXJ0aW5nUHJvbWlzZX1hc3luYyBzdG9wKCl7aWYoYXdhaXQgdGhpcy5saWJyYXJ5SW5zdGFudGlhdGlvblByb21pc2UsYXdhaXQgdGhpcy5saWJyYXJ5U3RhcnRpbmdQcm9taXNlLGF3YWl0IHRoaXMuZXhlY3V0aW5nUXVlcnlQcm9taXNlLHRoaXMubGlicmFyeVN0b3BwaW5nUHJvbWlzZSlyZXR1cm4gQWUoXCJsaWJyYXJ5IGlzIGFscmVhZHkgc3RvcHBpbmdcIiksdGhpcy5saWJyYXJ5U3RvcHBpbmdQcm9taXNlO2lmKCF0aGlzLmxpYnJhcnlTdGFydGVkKXthd2FpdChhd2FpdCB0aGlzLmFkYXB0ZXJQcm9taXNlKT8uZGlzcG9zZSgpLHRoaXMuYWRhcHRlclByb21pc2U9dm9pZCAwO3JldHVybn1sZXQgcj1hc3luYygpPT57YXdhaXQgbmV3IFByb21pc2Uobj0+c2V0SW1tZWRpYXRlKG4pKSxBZShcImxpYnJhcnkgc3RvcHBpbmdcIik7bGV0IHQ9e3RyYWNlcGFyZW50OnRoaXMudHJhY2luZ0hlbHBlci5nZXRUcmFjZVBhcmVudCgpfTthd2FpdCB0aGlzLmVuZ2luZT8uZGlzY29ubmVjdChKU09OLnN0cmluZ2lmeSh0KSksdGhpcy5lbmdpbmU/LmZyZWUmJnRoaXMuZW5naW5lLmZyZWUoKSx0aGlzLmVuZ2luZT12b2lkIDAsdGhpcy5saWJyYXJ5U3RhcnRlZD0hMSx0aGlzLmxpYnJhcnlTdG9wcGluZ1Byb21pc2U9dm9pZCAwLHRoaXMubGlicmFyeUluc3RhbnRpYXRpb25Qcm9taXNlPXZvaWQgMCxhd2FpdChhd2FpdCB0aGlzLmFkYXB0ZXJQcm9taXNlKT8uZGlzcG9zZSgpLHRoaXMuYWRhcHRlclByb21pc2U9dm9pZCAwLEFlKFwibGlicmFyeSBzdG9wcGVkXCIpfTtyZXR1cm4gdGhpcy5saWJyYXJ5U3RvcHBpbmdQcm9taXNlPXRoaXMudHJhY2luZ0hlbHBlci5ydW5JbkNoaWxkU3BhbihcImRpc2Nvbm5lY3RcIixyKSx0aGlzLmxpYnJhcnlTdG9wcGluZ1Byb21pc2V9dmVyc2lvbigpe3JldHVybiB0aGlzLnZlcnNpb25JbmZvPXRoaXMubGlicmFyeT8udmVyc2lvbigpLHRoaXMudmVyc2lvbkluZm8/LnZlcnNpb24/P1widW5rbm93blwifWRlYnVnUGFuaWMocil7cmV0dXJuIHRoaXMubGlicmFyeT8uZGVidWdQYW5pYyhyKX1hc3luYyByZXF1ZXN0KHIse3RyYWNlcGFyZW50OnQsaW50ZXJhY3RpdmVUcmFuc2FjdGlvbjpufSl7QWUoYHNlbmRpbmcgcmVxdWVzdCwgdGhpcy5saWJyYXJ5U3RhcnRlZDogJHt0aGlzLmxpYnJhcnlTdGFydGVkfWApO2xldCBpPUpTT04uc3RyaW5naWZ5KHt0cmFjZXBhcmVudDp0fSksbz1KU09OLnN0cmluZ2lmeShyKTt0cnl7YXdhaXQgdGhpcy5zdGFydCgpO2xldCBzPWF3YWl0IHRoaXMuYWRhcHRlclByb21pc2U7dGhpcy5leGVjdXRpbmdRdWVyeVByb21pc2U9dGhpcy5lbmdpbmU/LnF1ZXJ5KG8saSxuPy5pZCksdGhpcy5sYXN0UXVlcnk9bztsZXQgYT10aGlzLnBhcnNlRW5naW5lUmVzcG9uc2UoYXdhaXQgdGhpcy5leGVjdXRpbmdRdWVyeVByb21pc2UpO2lmKGEuZXJyb3JzKXRocm93IGEuZXJyb3JzLmxlbmd0aD09PTE/dGhpcy5idWlsZFF1ZXJ5RXJyb3IoYS5lcnJvcnNbMF0scz8uZXJyb3JSZWdpc3RyeSk6bmV3IGooSlNPTi5zdHJpbmdpZnkoYS5lcnJvcnMpLHtjbGllbnRWZXJzaW9uOnRoaXMuY29uZmlnLmNsaWVudFZlcnNpb259KTtpZih0aGlzLmxvZ2dlclJ1c3RQYW5pYyl0aHJvdyB0aGlzLmxvZ2dlclJ1c3RQYW5pYztyZXR1cm57ZGF0YTphfX1jYXRjaChzKXtpZihzIGluc3RhbmNlb2YgVCl0aHJvdyBzO2lmKHMuY29kZT09PVwiR2VuZXJpY0ZhaWx1cmVcIiYmcy5tZXNzYWdlPy5zdGFydHNXaXRoKFwiUEFOSUM6XCIpKXRocm93IG5ldyBsZShTbyh0aGlzLHMubWVzc2FnZSksdGhpcy5jb25maWcuY2xpZW50VmVyc2lvbik7bGV0IGE9dGhpcy5wYXJzZVJlcXVlc3RFcnJvcihzLm1lc3NhZ2UpO3Rocm93IHR5cGVvZiBhPT1cInN0cmluZ1wiP3M6bmV3IGooYCR7YS5tZXNzYWdlfVxuJHthLmJhY2t0cmFjZX1gLHtjbGllbnRWZXJzaW9uOnRoaXMuY29uZmlnLmNsaWVudFZlcnNpb259KX19YXN5bmMgcmVxdWVzdEJhdGNoKHIse3RyYW5zYWN0aW9uOnQsdHJhY2VwYXJlbnQ6bn0pe0FlKFwicmVxdWVzdEJhdGNoXCIpO2xldCBpPSRyKHIsdCk7YXdhaXQgdGhpcy5zdGFydCgpO2xldCBvPWF3YWl0IHRoaXMuYWRhcHRlclByb21pc2U7dGhpcy5sYXN0UXVlcnk9SlNPTi5zdHJpbmdpZnkoaSksdGhpcy5leGVjdXRpbmdRdWVyeVByb21pc2U9dGhpcy5lbmdpbmU/LnF1ZXJ5KHRoaXMubGFzdFF1ZXJ5LEpTT04uc3RyaW5naWZ5KHt0cmFjZXBhcmVudDpufSksTGwodCkpO2xldCBzPWF3YWl0IHRoaXMuZXhlY3V0aW5nUXVlcnlQcm9taXNlLGE9dGhpcy5wYXJzZUVuZ2luZVJlc3BvbnNlKHMpO2lmKGEuZXJyb3JzKXRocm93IGEuZXJyb3JzLmxlbmd0aD09PTE/dGhpcy5idWlsZFF1ZXJ5RXJyb3IoYS5lcnJvcnNbMF0sbz8uZXJyb3JSZWdpc3RyeSk6bmV3IGooSlNPTi5zdHJpbmdpZnkoYS5lcnJvcnMpLHtjbGllbnRWZXJzaW9uOnRoaXMuY29uZmlnLmNsaWVudFZlcnNpb259KTtsZXR7YmF0Y2hSZXN1bHQ6bCxlcnJvcnM6dX09YTtpZihBcnJheS5pc0FycmF5KGwpKXJldHVybiBsLm1hcChjPT5jLmVycm9ycyYmYy5lcnJvcnMubGVuZ3RoPjA/dGhpcy5sb2dnZXJSdXN0UGFuaWM/P3RoaXMuYnVpbGRRdWVyeUVycm9yKGMuZXJyb3JzWzBdLG8/LmVycm9yUmVnaXN0cnkpOntkYXRhOmN9KTt0aHJvdyB1JiZ1Lmxlbmd0aD09PTE/bmV3IEVycm9yKHVbMF0uZXJyb3IpOm5ldyBFcnJvcihKU09OLnN0cmluZ2lmeShhKSl9YnVpbGRRdWVyeUVycm9yKHIsdCl7aWYoci51c2VyX2ZhY2luZ19lcnJvci5pc19wYW5pYylyZXR1cm4gbmV3IGxlKFNvKHRoaXMsci51c2VyX2ZhY2luZ19lcnJvci5tZXNzYWdlKSx0aGlzLmNvbmZpZy5jbGllbnRWZXJzaW9uKTtsZXQgbj10aGlzLmdldEV4dGVybmFsQWRhcHRlckVycm9yKHIudXNlcl9mYWNpbmdfZXJyb3IsdCk7cmV0dXJuIG4/bi5lcnJvcjpxcihyLHRoaXMuY29uZmlnLmNsaWVudFZlcnNpb24sdGhpcy5jb25maWcuYWN0aXZlUHJvdmlkZXIpfWdldEV4dGVybmFsQWRhcHRlckVycm9yKHIsdCl7aWYoci5lcnJvcl9jb2RlPT09RWYmJnQpe2xldCBuPXIubWV0YT8uaWQ7bG4odHlwZW9mIG49PVwibnVtYmVyXCIsXCJNYWxmb3JtZWQgZXh0ZXJuYWwgSlMgZXJyb3IgcmVjZWl2ZWQgZnJvbSB0aGUgZW5naW5lXCIpO2xldCBpPXQuY29uc3VtZUVycm9yKG4pO3JldHVybiBsbihpLFwiRXh0ZXJuYWwgZXJyb3Igd2l0aCByZXBvcnRlZCBpZCB3YXMgbm90IHJlZ2lzdGVyZWRcIiksaX19YXN5bmMgbWV0cmljcyhyKXthd2FpdCB0aGlzLnN0YXJ0KCk7bGV0IHQ9YXdhaXQgdGhpcy5lbmdpbmUubWV0cmljcyhKU09OLnN0cmluZ2lmeShyKSk7cmV0dXJuIHIuZm9ybWF0PT09XCJwcm9tZXRoZXVzXCI/dDp0aGlzLnBhcnNlRW5naW5lUmVzcG9uc2UodCl9fTtmdW5jdGlvbiBUZihlKXtyZXR1cm4gdHlwZW9mIGU9PVwib2JqZWN0XCImJmUhPT1udWxsJiZlLmVycm9yX2NvZGUhPT12b2lkIDB9ZnVuY3Rpb24gU28oZSxyKXtyZXR1cm4gVGwoe2JpbmFyeVRhcmdldDplLmJpbmFyeVRhcmdldCx0aXRsZTpyLHZlcnNpb246ZS5jb25maWcuY2xpZW50VmVyc2lvbixlbmdpbmVWZXJzaW9uOmUudmVyc2lvbkluZm8/LmNvbW1pdCxkYXRhYmFzZTplLmNvbmZpZy5hY3RpdmVQcm92aWRlcixxdWVyeTplLmxhc3RRdWVyeX0pfWZ1bmN0aW9uIGpsKHt1cmw6ZSxhZGFwdGVyOnIsY29weUVuZ2luZTp0LHRhcmdldEJ1aWxkVHlwZTpufSl7bGV0IGk9W10sbz1bXSxzPWc9PntpLnB1c2goe190YWc6XCJ3YXJuaW5nXCIsdmFsdWU6Z30pfSxhPWc9PntsZXQgUz1nLmpvaW4oYFxuYCk7by5wdXNoKHtfdGFnOlwiZXJyb3JcIix2YWx1ZTpTfSl9LGw9ISFlPy5zdGFydHNXaXRoKFwicHJpc21hOi8vXCIpLHU9YW4oZSksYz0hIXIscD1sfHx1OyFjJiZ0JiZwJiZzKFtcInJlY29tbWVuZC0tbm8tZW5naW5lXCIsXCJJbiBwcm9kdWN0aW9uLCB3ZSByZWNvbW1lbmQgdXNpbmcgYHByaXNtYSBnZW5lcmF0ZSAtLW5vLWVuZ2luZWAgKFNlZTogYHByaXNtYSBnZW5lcmF0ZSAtLWhlbHBgKVwiXSk7bGV0IGQ9cHx8IXQ7YyYmKGR8fG49PT1cImVkZ2VcIikmJihuPT09XCJlZGdlXCI/YShbXCJQcmlzbWEgQ2xpZW50IHdhcyBjb25maWd1cmVkIHRvIHVzZSB0aGUgYGFkYXB0ZXJgIG9wdGlvbiBidXQgaXQgd2FzIGltcG9ydGVkIHZpYSBpdHMgYC9lZGdlYCBlbmRwb2ludC5cIixcIlBsZWFzZSBlaXRoZXIgcmVtb3ZlIHRoZSBgL2VkZ2VgIGVuZHBvaW50IG9yIHJlbW92ZSB0aGUgYGFkYXB0ZXJgIGZyb20gdGhlIFByaXNtYSBDbGllbnQgY29uc3RydWN0b3IuXCJdKTp0P2wmJmEoW1wiUHJpc21hIENsaWVudCB3YXMgY29uZmlndXJlZCB0byB1c2UgdGhlIGBhZGFwdGVyYCBvcHRpb24gYnV0IHRoZSBVUkwgd2FzIGEgYHByaXNtYTovL2AgVVJMLlwiLFwiUGxlYXNlIGVpdGhlciB1c2UgdGhlIGBwcmlzbWE6Ly9gIFVSTCBvciByZW1vdmUgdGhlIGBhZGFwdGVyYCBmcm9tIHRoZSBQcmlzbWEgQ2xpZW50IGNvbnN0cnVjdG9yLlwiXSk6YShbXCJQcmlzbWEgQ2xpZW50IHdhcyBjb25maWd1cmVkIHRvIHVzZSB0aGUgYGFkYXB0ZXJgIG9wdGlvbiBidXQgYHByaXNtYSBnZW5lcmF0ZWAgd2FzIHJ1biB3aXRoIGAtLW5vLWVuZ2luZWAuXCIsXCJQbGVhc2UgcnVuIGBwcmlzbWEgZ2VuZXJhdGVgIHdpdGhvdXQgYC0tbm8tZW5naW5lYCB0byBiZSBhYmxlIHRvIHVzZSBQcmlzbWEgQ2xpZW50IHdpdGggdGhlIGFkYXB0ZXIuXCJdKSk7bGV0IGY9e2FjY2VsZXJhdGU6ZCxwcGc6dSxkcml2ZXJBZGFwdGVyczpjfTtmdW5jdGlvbiBoKGcpe3JldHVybiBnLmxlbmd0aD4wfXJldHVybiBoKG8pP3tvazohMSxkaWFnbm9zdGljczp7d2FybmluZ3M6aSxlcnJvcnM6b30saXNVc2luZzpmfTp7b2s6ITAsZGlhZ25vc3RpY3M6e3dhcm5pbmdzOml9LGlzVXNpbmc6Zn19ZnVuY3Rpb24gVmwoe2NvcHlFbmdpbmU6ZT0hMH0scil7bGV0IHQ7dHJ5e3Q9VnIoe2lubGluZURhdGFzb3VyY2VzOnIuaW5saW5lRGF0YXNvdXJjZXMsb3ZlcnJpZGVEYXRhc291cmNlczpyLm92ZXJyaWRlRGF0YXNvdXJjZXMsZW52OnsuLi5yLmVudiwuLi5wcm9jZXNzLmVudn0sY2xpZW50VmVyc2lvbjpyLmNsaWVudFZlcnNpb259KX1jYXRjaHt9bGV0e29rOm4saXNVc2luZzppLGRpYWdub3N0aWNzOm99PWpsKHt1cmw6dCxhZGFwdGVyOnIuYWRhcHRlcixjb3B5RW5naW5lOmUsdGFyZ2V0QnVpbGRUeXBlOlwibGlicmFyeVwifSk7Zm9yKGxldCBwIG9mIG8ud2FybmluZ3MpYXQoLi4ucC52YWx1ZSk7aWYoIW4pe2xldCBwPW8uZXJyb3JzWzBdO3Rocm93IG5ldyBaKHAudmFsdWUse2NsaWVudFZlcnNpb246ci5jbGllbnRWZXJzaW9ufSl9bGV0IHM9RXIoci5nZW5lcmF0b3IpLGE9cz09PVwibGlicmFyeVwiLGw9cz09PVwiYmluYXJ5XCIsdT1zPT09XCJjbGllbnRcIixjPShpLmFjY2VsZXJhdGV8fGkucHBnKSYmIWkuZHJpdmVyQWRhcHRlcnM7cmV0dXJuIGkuYWNjZWxlcmF0ZT9uZXcgcXQocik6KGkuZHJpdmVyQWRhcHRlcnMsYT9uZXcgUXIocik6KGkuYWNjZWxlcmF0ZSxuZXcgUXIocikpKX1mdW5jdGlvbiBZbih7Z2VuZXJhdG9yOmV9KXtyZXR1cm4gZT8ucHJldmlld0ZlYXR1cmVzPz9bXX12YXIgQmw9ZT0+KHtjb21tYW5kOmV9KTt2YXIgVWw9ZT0+ZS5zdHJpbmdzLnJlZHVjZSgocix0LG4pPT5gJHtyfUBQJHtufSR7dH1gKTtmdW5jdGlvbiBXcihlKXt0cnl7cmV0dXJuIEdsKGUsXCJmYXN0XCIpfWNhdGNoe3JldHVybiBHbChlLFwic2xvd1wiKX19ZnVuY3Rpb24gR2woZSxyKXtyZXR1cm4gSlNPTi5zdHJpbmdpZnkoZS5tYXAodD0+V2wodCxyKSkpfWZ1bmN0aW9uIFdsKGUscil7aWYoQXJyYXkuaXNBcnJheShlKSlyZXR1cm4gZS5tYXAodD0+V2wodCxyKSk7aWYodHlwZW9mIGU9PVwiYmlnaW50XCIpcmV0dXJue3ByaXNtYV9fdHlwZTpcImJpZ2ludFwiLHByaXNtYV9fdmFsdWU6ZS50b1N0cmluZygpfTtpZihTcihlKSlyZXR1cm57cHJpc21hX190eXBlOlwiZGF0ZVwiLHByaXNtYV9fdmFsdWU6ZS50b0pTT04oKX07aWYodmUuaXNEZWNpbWFsKGUpKXJldHVybntwcmlzbWFfX3R5cGU6XCJkZWNpbWFsXCIscHJpc21hX192YWx1ZTplLnRvSlNPTigpfTtpZihCdWZmZXIuaXNCdWZmZXIoZSkpcmV0dXJue3ByaXNtYV9fdHlwZTpcImJ5dGVzXCIscHJpc21hX192YWx1ZTplLnRvU3RyaW5nKFwiYmFzZTY0XCIpfTtpZihTZihlKSlyZXR1cm57cHJpc21hX190eXBlOlwiYnl0ZXNcIixwcmlzbWFfX3ZhbHVlOkJ1ZmZlci5mcm9tKGUpLnRvU3RyaW5nKFwiYmFzZTY0XCIpfTtpZihBcnJheUJ1ZmZlci5pc1ZpZXcoZSkpe2xldHtidWZmZXI6dCxieXRlT2Zmc2V0Om4sYnl0ZUxlbmd0aDppfT1lO3JldHVybntwcmlzbWFfX3R5cGU6XCJieXRlc1wiLHByaXNtYV9fdmFsdWU6QnVmZmVyLmZyb20odCxuLGkpLnRvU3RyaW5nKFwiYmFzZTY0XCIpfX1yZXR1cm4gdHlwZW9mIGU9PVwib2JqZWN0XCImJnI9PT1cInNsb3dcIj9KbChlKTplfWZ1bmN0aW9uIFNmKGUpe3JldHVybiBlIGluc3RhbmNlb2YgQXJyYXlCdWZmZXJ8fGUgaW5zdGFuY2VvZiBTaGFyZWRBcnJheUJ1ZmZlcj8hMDp0eXBlb2YgZT09XCJvYmplY3RcIiYmZSE9PW51bGw/ZVtTeW1ib2wudG9TdHJpbmdUYWddPT09XCJBcnJheUJ1ZmZlclwifHxlW1N5bWJvbC50b1N0cmluZ1RhZ109PT1cIlNoYXJlZEFycmF5QnVmZmVyXCI6ITF9ZnVuY3Rpb24gSmwoZSl7aWYodHlwZW9mIGUhPVwib2JqZWN0XCJ8fGU9PT1udWxsKXJldHVybiBlO2lmKHR5cGVvZiBlLnRvSlNPTj09XCJmdW5jdGlvblwiKXJldHVybiBlLnRvSlNPTigpO2lmKEFycmF5LmlzQXJyYXkoZSkpcmV0dXJuIGUubWFwKFFsKTtsZXQgcj17fTtmb3IobGV0IHQgb2YgT2JqZWN0LmtleXMoZSkpclt0XT1RbChlW3RdKTtyZXR1cm4gcn1mdW5jdGlvbiBRbChlKXtyZXR1cm4gdHlwZW9mIGU9PVwiYmlnaW50XCI/ZS50b1N0cmluZygpOkpsKGUpfXZhciBSZj0vXihcXHMqYWx0ZXJcXHMpL2ksSGw9TihcInByaXNtYTpjbGllbnRcIik7ZnVuY3Rpb24gUm8oZSxyLHQsbil7aWYoIShlIT09XCJwb3N0Z3Jlc3FsXCImJmUhPT1cImNvY2tyb2FjaGRiXCIpJiZ0Lmxlbmd0aD4wJiZSZi5leGVjKHIpKXRocm93IG5ldyBFcnJvcihgUnVubmluZyBBTFRFUiB1c2luZyAke259IGlzIG5vdCBzdXBwb3J0ZWRcblVzaW5nIHRoZSBleGFtcGxlIGJlbG93IHlvdSBjYW4gc3RpbGwgZXhlY3V0ZSB5b3VyIHF1ZXJ5IHdpdGggUHJpc21hLCBidXQgcGxlYXNlIG5vdGUgdGhhdCBpdCBpcyB2dWxuZXJhYmxlIHRvIFNRTCBpbmplY3Rpb24gYXR0YWNrcyBhbmQgcmVxdWlyZXMgeW91IHRvIHRha2UgY2FyZSBvZiBpbnB1dCBzYW5pdGl6YXRpb24uXG5cbkV4YW1wbGU6XG4gIGF3YWl0IHByaXNtYS4kZXhlY3V0ZVJhd1Vuc2FmZShcXGBBTFRFUiBVU0VSIHByaXNtYSBXSVRIIFBBU1NXT1JEICdcXCR7cGFzc3dvcmR9J1xcYClcblxuTW9yZSBJbmZvcm1hdGlvbjogaHR0cHM6Ly9wcmlzLmx5L2QvZXhlY3V0ZS1yYXdcbmApfXZhciBBbz0oe2NsaWVudE1ldGhvZDplLGFjdGl2ZVByb3ZpZGVyOnJ9KT0+dD0+e2xldCBuPVwiXCIsaTtpZihxbih0KSluPXQuc3FsLGk9e3ZhbHVlczpXcih0LnZhbHVlcyksX19wcmlzbWFSYXdQYXJhbWV0ZXJzX186ITB9O2Vsc2UgaWYoQXJyYXkuaXNBcnJheSh0KSl7bGV0W28sLi4uc109dDtuPW8saT17dmFsdWVzOldyKHN8fFtdKSxfX3ByaXNtYVJhd1BhcmFtZXRlcnNfXzohMH19ZWxzZSBzd2l0Y2gocil7Y2FzZVwic3FsaXRlXCI6Y2FzZVwibXlzcWxcIjp7bj10LnNxbCxpPXt2YWx1ZXM6V3IodC52YWx1ZXMpLF9fcHJpc21hUmF3UGFyYW1ldGVyc19fOiEwfTticmVha31jYXNlXCJjb2Nrcm9hY2hkYlwiOmNhc2VcInBvc3RncmVzcWxcIjpjYXNlXCJwb3N0Z3Jlc1wiOntuPXQudGV4dCxpPXt2YWx1ZXM6V3IodC52YWx1ZXMpLF9fcHJpc21hUmF3UGFyYW1ldGVyc19fOiEwfTticmVha31jYXNlXCJzcWxzZXJ2ZXJcIjp7bj1VbCh0KSxpPXt2YWx1ZXM6V3IodC52YWx1ZXMpLF9fcHJpc21hUmF3UGFyYW1ldGVyc19fOiEwfTticmVha31kZWZhdWx0OnRocm93IG5ldyBFcnJvcihgVGhlICR7cn0gcHJvdmlkZXIgZG9lcyBub3Qgc3VwcG9ydCAke2V9YCl9cmV0dXJuIGk/LnZhbHVlcz9IbChgcHJpc21hLiR7ZX0oJHtufSwgJHtpLnZhbHVlc30pYCk6SGwoYHByaXNtYS4ke2V9KCR7bn0pYCkse3F1ZXJ5Om4scGFyYW1ldGVyczppfX0sS2w9e3JlcXVlc3RBcmdzVG9NaWRkbGV3YXJlQXJncyhlKXtyZXR1cm5bZS5zdHJpbmdzLC4uLmUudmFsdWVzXX0sbWlkZGxld2FyZUFyZ3NUb1JlcXVlc3RBcmdzKGUpe2xldFtyLC4uLnRdPWU7cmV0dXJuIG5ldyBvZShyLHQpfX0sWWw9e3JlcXVlc3RBcmdzVG9NaWRkbGV3YXJlQXJncyhlKXtyZXR1cm5bZV19LG1pZGRsZXdhcmVBcmdzVG9SZXF1ZXN0QXJncyhlKXtyZXR1cm4gZVswXX19O2Z1bmN0aW9uIENvKGUpe3JldHVybiBmdW5jdGlvbih0LG4pe2xldCBpLG89KHM9ZSk9Pnt0cnl7cmV0dXJuIHM9PT12b2lkIDB8fHM/LmtpbmQ9PT1cIml0eFwiP2k/Pz16bCh0KHMpKTp6bCh0KHMpKX1jYXRjaChhKXtyZXR1cm4gUHJvbWlzZS5yZWplY3QoYSl9fTtyZXR1cm57Z2V0IHNwZWMoKXtyZXR1cm4gbn0sdGhlbihzLGEpe3JldHVybiBvKCkudGhlbihzLGEpfSxjYXRjaChzKXtyZXR1cm4gbygpLmNhdGNoKHMpfSxmaW5hbGx5KHMpe3JldHVybiBvKCkuZmluYWxseShzKX0scmVxdWVzdFRyYW5zYWN0aW9uKHMpe2xldCBhPW8ocyk7cmV0dXJuIGEucmVxdWVzdFRyYW5zYWN0aW9uP2EucmVxdWVzdFRyYW5zYWN0aW9uKHMpOmF9LFtTeW1ib2wudG9TdHJpbmdUYWddOlwiUHJpc21hUHJvbWlzZVwifX19ZnVuY3Rpb24gemwoZSl7cmV0dXJuIHR5cGVvZiBlLnRoZW49PVwiZnVuY3Rpb25cIj9lOlByb21pc2UucmVzb2x2ZShlKX12YXIgQWY9dmkuc3BsaXQoXCIuXCIpWzBdLENmPXtpc0VuYWJsZWQoKXtyZXR1cm4hMX0sZ2V0VHJhY2VQYXJlbnQoKXtyZXR1cm5cIjAwLTEwLTEwLTAwXCJ9LGRpc3BhdGNoRW5naW5lU3BhbnMoKXt9LGdldEFjdGl2ZUNvbnRleHQoKXt9LHJ1bkluQ2hpbGRTcGFuKGUscil7cmV0dXJuIHIoKX19LElvPWNsYXNze2lzRW5hYmxlZCgpe3JldHVybiB0aGlzLmdldEdsb2JhbFRyYWNpbmdIZWxwZXIoKS5pc0VuYWJsZWQoKX1nZXRUcmFjZVBhcmVudChyKXtyZXR1cm4gdGhpcy5nZXRHbG9iYWxUcmFjaW5nSGVscGVyKCkuZ2V0VHJhY2VQYXJlbnQocil9ZGlzcGF0Y2hFbmdpbmVTcGFucyhyKXtyZXR1cm4gdGhpcy5nZXRHbG9iYWxUcmFjaW5nSGVscGVyKCkuZGlzcGF0Y2hFbmdpbmVTcGFucyhyKX1nZXRBY3RpdmVDb250ZXh0KCl7cmV0dXJuIHRoaXMuZ2V0R2xvYmFsVHJhY2luZ0hlbHBlcigpLmdldEFjdGl2ZUNvbnRleHQoKX1ydW5JbkNoaWxkU3BhbihyLHQpe3JldHVybiB0aGlzLmdldEdsb2JhbFRyYWNpbmdIZWxwZXIoKS5ydW5JbkNoaWxkU3BhbihyLHQpfWdldEdsb2JhbFRyYWNpbmdIZWxwZXIoKXtsZXQgcj1nbG9iYWxUaGlzW2BWJHtBZn1fUFJJU01BX0lOU1RSVU1FTlRBVElPTmBdLHQ9Z2xvYmFsVGhpcy5QUklTTUFfSU5TVFJVTUVOVEFUSU9OO3JldHVybiByPy5oZWxwZXI/P3Q/LmhlbHBlcj8/Q2Z9fTtmdW5jdGlvbiBabCgpe3JldHVybiBuZXcgSW99ZnVuY3Rpb24gWGwoZSxyPSgpPT57fSl7bGV0IHQsbj1uZXcgUHJvbWlzZShpPT50PWkpO3JldHVybnt0aGVuKGkpe3JldHVybi0tZT09PTAmJnQocigpKSxpPy4obil9fX1mdW5jdGlvbiBldShlKXtyZXR1cm4gdHlwZW9mIGU9PVwic3RyaW5nXCI/ZTplLnJlZHVjZSgocix0KT0+e2xldCBuPXR5cGVvZiB0PT1cInN0cmluZ1wiP3Q6dC5sZXZlbDtyZXR1cm4gbj09PVwicXVlcnlcIj9yOnImJih0PT09XCJpbmZvXCJ8fHI9PT1cImluZm9cIik/XCJpbmZvXCI6bn0sdm9pZCAwKX12YXIgem49Y2xhc3N7X21pZGRsZXdhcmVzPVtdO3VzZShyKXt0aGlzLl9taWRkbGV3YXJlcy5wdXNoKHIpfWdldChyKXtyZXR1cm4gdGhpcy5fbWlkZGxld2FyZXNbcl19aGFzKHIpe3JldHVybiEhdGhpcy5fbWlkZGxld2FyZXNbcl19bGVuZ3RoKCl7cmV0dXJuIHRoaXMuX21pZGRsZXdhcmVzLmxlbmd0aH19O3ZhciB0dT1DKExpKCkpO2Z1bmN0aW9uIFpuKGUpe3JldHVybiB0eXBlb2YgZS5iYXRjaFJlcXVlc3RJZHg9PVwibnVtYmVyXCJ9ZnVuY3Rpb24gcnUoZSl7aWYoZS5hY3Rpb24hPT1cImZpbmRVbmlxdWVcIiYmZS5hY3Rpb24hPT1cImZpbmRVbmlxdWVPclRocm93XCIpcmV0dXJuO2xldCByPVtdO3JldHVybiBlLm1vZGVsTmFtZSYmci5wdXNoKGUubW9kZWxOYW1lKSxlLnF1ZXJ5LmFyZ3VtZW50cyYmci5wdXNoKGtvKGUucXVlcnkuYXJndW1lbnRzKSksci5wdXNoKGtvKGUucXVlcnkuc2VsZWN0aW9uKSksci5qb2luKFwiXCIpfWZ1bmN0aW9uIGtvKGUpe3JldHVybmAoJHtPYmplY3Qua2V5cyhlKS5zb3J0KCkubWFwKHQ9PntsZXQgbj1lW3RdO3JldHVybiB0eXBlb2Ygbj09XCJvYmplY3RcIiYmbiE9PW51bGw/YCgke3R9ICR7a28obil9KWA6dH0pLmpvaW4oXCIgXCIpfSlgfXZhciBJZj17YWdncmVnYXRlOiExLGFnZ3JlZ2F0ZVJhdzohMSxjcmVhdGVNYW55OiEwLGNyZWF0ZU1hbnlBbmRSZXR1cm46ITAsY3JlYXRlT25lOiEwLGRlbGV0ZU1hbnk6ITAsZGVsZXRlT25lOiEwLGV4ZWN1dGVSYXc6ITAsZmluZEZpcnN0OiExLGZpbmRGaXJzdE9yVGhyb3c6ITEsZmluZE1hbnk6ITEsZmluZFJhdzohMSxmaW5kVW5pcXVlOiExLGZpbmRVbmlxdWVPclRocm93OiExLGdyb3VwQnk6ITEscXVlcnlSYXc6ITEscnVuQ29tbWFuZFJhdzohMCx1cGRhdGVNYW55OiEwLHVwZGF0ZU1hbnlBbmRSZXR1cm46ITAsdXBkYXRlT25lOiEwLHVwc2VydE9uZTohMH07ZnVuY3Rpb24gRG8oZSl7cmV0dXJuIElmW2VdfXZhciBYbj1jbGFzc3tjb25zdHJ1Y3RvcihyKXt0aGlzLm9wdGlvbnM9cjt0aGlzLmJhdGNoZXM9e319YmF0Y2hlczt0aWNrQWN0aXZlPSExO3JlcXVlc3Qocil7bGV0IHQ9dGhpcy5vcHRpb25zLmJhdGNoQnkocik7cmV0dXJuIHQ/KHRoaXMuYmF0Y2hlc1t0XXx8KHRoaXMuYmF0Y2hlc1t0XT1bXSx0aGlzLnRpY2tBY3RpdmV8fCh0aGlzLnRpY2tBY3RpdmU9ITAscHJvY2Vzcy5uZXh0VGljaygoKT0+e3RoaXMuZGlzcGF0Y2hCYXRjaGVzKCksdGhpcy50aWNrQWN0aXZlPSExfSkpKSxuZXcgUHJvbWlzZSgobixpKT0+e3RoaXMuYmF0Y2hlc1t0XS5wdXNoKHtyZXF1ZXN0OnIscmVzb2x2ZTpuLHJlamVjdDppfSl9KSk6dGhpcy5vcHRpb25zLnNpbmdsZUxvYWRlcihyKX1kaXNwYXRjaEJhdGNoZXMoKXtmb3IobGV0IHIgaW4gdGhpcy5iYXRjaGVzKXtsZXQgdD10aGlzLmJhdGNoZXNbcl07ZGVsZXRlIHRoaXMuYmF0Y2hlc1tyXSx0Lmxlbmd0aD09PTE/dGhpcy5vcHRpb25zLnNpbmdsZUxvYWRlcih0WzBdLnJlcXVlc3QpLnRoZW4obj0+e24gaW5zdGFuY2VvZiBFcnJvcj90WzBdLnJlamVjdChuKTp0WzBdLnJlc29sdmUobil9KS5jYXRjaChuPT57dFswXS5yZWplY3Qobil9KToodC5zb3J0KChuLGkpPT50aGlzLm9wdGlvbnMuYmF0Y2hPcmRlcihuLnJlcXVlc3QsaS5yZXF1ZXN0KSksdGhpcy5vcHRpb25zLmJhdGNoTG9hZGVyKHQubWFwKG49Pm4ucmVxdWVzdCkpLnRoZW4obj0+e2lmKG4gaW5zdGFuY2VvZiBFcnJvcilmb3IobGV0IGk9MDtpPHQubGVuZ3RoO2krKyl0W2ldLnJlamVjdChuKTtlbHNlIGZvcihsZXQgaT0wO2k8dC5sZW5ndGg7aSsrKXtsZXQgbz1uW2ldO28gaW5zdGFuY2VvZiBFcnJvcj90W2ldLnJlamVjdChvKTp0W2ldLnJlc29sdmUobyl9fSkuY2F0Y2gobj0+e2ZvcihsZXQgaT0wO2k8dC5sZW5ndGg7aSsrKXRbaV0ucmVqZWN0KG4pfSkpfX1nZXRbU3ltYm9sLnRvU3RyaW5nVGFnXSgpe3JldHVyblwiRGF0YUxvYWRlclwifX07ZnVuY3Rpb24gbXIoZSxyKXtpZihyPT09bnVsbClyZXR1cm4gcjtzd2l0Y2goZSl7Y2FzZVwiYmlnaW50XCI6cmV0dXJuIEJpZ0ludChyKTtjYXNlXCJieXRlc1wiOntsZXR7YnVmZmVyOnQsYnl0ZU9mZnNldDpuLGJ5dGVMZW5ndGg6aX09QnVmZmVyLmZyb20ocixcImJhc2U2NFwiKTtyZXR1cm4gbmV3IFVpbnQ4QXJyYXkodCxuLGkpfWNhc2VcImRlY2ltYWxcIjpyZXR1cm4gbmV3IHZlKHIpO2Nhc2VcImRhdGV0aW1lXCI6Y2FzZVwiZGF0ZVwiOnJldHVybiBuZXcgRGF0ZShyKTtjYXNlXCJ0aW1lXCI6cmV0dXJuIG5ldyBEYXRlKGAxOTcwLTAxLTAxVCR7cn1aYCk7Y2FzZVwiYmlnaW50LWFycmF5XCI6cmV0dXJuIHIubWFwKHQ9Pm1yKFwiYmlnaW50XCIsdCkpO2Nhc2VcImJ5dGVzLWFycmF5XCI6cmV0dXJuIHIubWFwKHQ9Pm1yKFwiYnl0ZXNcIix0KSk7Y2FzZVwiZGVjaW1hbC1hcnJheVwiOnJldHVybiByLm1hcCh0PT5tcihcImRlY2ltYWxcIix0KSk7Y2FzZVwiZGF0ZXRpbWUtYXJyYXlcIjpyZXR1cm4gci5tYXAodD0+bXIoXCJkYXRldGltZVwiLHQpKTtjYXNlXCJkYXRlLWFycmF5XCI6cmV0dXJuIHIubWFwKHQ9Pm1yKFwiZGF0ZVwiLHQpKTtjYXNlXCJ0aW1lLWFycmF5XCI6cmV0dXJuIHIubWFwKHQ9Pm1yKFwidGltZVwiLHQpKTtkZWZhdWx0OnJldHVybiByfX1mdW5jdGlvbiBlaShlKXtsZXQgcj1bXSx0PWtmKGUpO2ZvcihsZXQgbj0wO248ZS5yb3dzLmxlbmd0aDtuKyspe2xldCBpPWUucm93c1tuXSxvPXsuLi50fTtmb3IobGV0IHM9MDtzPGkubGVuZ3RoO3MrKylvW2UuY29sdW1uc1tzXV09bXIoZS50eXBlc1tzXSxpW3NdKTtyLnB1c2gobyl9cmV0dXJuIHJ9ZnVuY3Rpb24ga2YoZSl7bGV0IHI9e307Zm9yKGxldCB0PTA7dDxlLmNvbHVtbnMubGVuZ3RoO3QrKylyW2UuY29sdW1uc1t0XV09bnVsbDtyZXR1cm4gcn12YXIgRGY9TihcInByaXNtYTpjbGllbnQ6cmVxdWVzdF9oYW5kbGVyXCIpLHJpPWNsYXNze2NsaWVudDtkYXRhbG9hZGVyO2xvZ0VtaXR0ZXI7Y29uc3RydWN0b3Iocix0KXt0aGlzLmxvZ0VtaXR0ZXI9dCx0aGlzLmNsaWVudD1yLHRoaXMuZGF0YWxvYWRlcj1uZXcgWG4oe2JhdGNoTG9hZGVyOnNsKGFzeW5jKHtyZXF1ZXN0czpuLGN1c3RvbURhdGFQcm94eUZldGNoOml9KT0+e2xldHt0cmFuc2FjdGlvbjpvLG90ZWxQYXJlbnRDdHg6c309blswXSxhPW4ubWFwKHA9PnAucHJvdG9jb2xRdWVyeSksbD10aGlzLmNsaWVudC5fdHJhY2luZ0hlbHBlci5nZXRUcmFjZVBhcmVudChzKSx1PW4uc29tZShwPT5EbyhwLnByb3RvY29sUXVlcnkuYWN0aW9uKSk7cmV0dXJuKGF3YWl0IHRoaXMuY2xpZW50Ll9lbmdpbmUucmVxdWVzdEJhdGNoKGEse3RyYWNlcGFyZW50OmwsdHJhbnNhY3Rpb246T2YobyksY29udGFpbnNXcml0ZTp1LGN1c3RvbURhdGFQcm94eUZldGNoOml9KSkubWFwKChwLGQpPT57aWYocCBpbnN0YW5jZW9mIEVycm9yKXJldHVybiBwO3RyeXtyZXR1cm4gdGhpcy5tYXBRdWVyeUVuZ2luZVJlc3VsdChuW2RdLHApfWNhdGNoKGYpe3JldHVybiBmfX0pfSksc2luZ2xlTG9hZGVyOmFzeW5jIG49PntsZXQgaT1uLnRyYW5zYWN0aW9uPy5raW5kPT09XCJpdHhcIj9udShuLnRyYW5zYWN0aW9uKTp2b2lkIDAsbz1hd2FpdCB0aGlzLmNsaWVudC5fZW5naW5lLnJlcXVlc3Qobi5wcm90b2NvbFF1ZXJ5LHt0cmFjZXBhcmVudDp0aGlzLmNsaWVudC5fdHJhY2luZ0hlbHBlci5nZXRUcmFjZVBhcmVudCgpLGludGVyYWN0aXZlVHJhbnNhY3Rpb246aSxpc1dyaXRlOkRvKG4ucHJvdG9jb2xRdWVyeS5hY3Rpb24pLGN1c3RvbURhdGFQcm94eUZldGNoOm4uY3VzdG9tRGF0YVByb3h5RmV0Y2h9KTtyZXR1cm4gdGhpcy5tYXBRdWVyeUVuZ2luZVJlc3VsdChuLG8pfSxiYXRjaEJ5Om49Pm4udHJhbnNhY3Rpb24/LmlkP2B0cmFuc2FjdGlvbi0ke24udHJhbnNhY3Rpb24uaWR9YDpydShuLnByb3RvY29sUXVlcnkpLGJhdGNoT3JkZXIobixpKXtyZXR1cm4gbi50cmFuc2FjdGlvbj8ua2luZD09PVwiYmF0Y2hcIiYmaS50cmFuc2FjdGlvbj8ua2luZD09PVwiYmF0Y2hcIj9uLnRyYW5zYWN0aW9uLmluZGV4LWkudHJhbnNhY3Rpb24uaW5kZXg6MH19KX1hc3luYyByZXF1ZXN0KHIpe3RyeXtyZXR1cm4gYXdhaXQgdGhpcy5kYXRhbG9hZGVyLnJlcXVlc3Qocil9Y2F0Y2godCl7bGV0e2NsaWVudE1ldGhvZDpuLGNhbGxzaXRlOmksdHJhbnNhY3Rpb246byxhcmdzOnMsbW9kZWxOYW1lOmF9PXI7dGhpcy5oYW5kbGVBbmRMb2dSZXF1ZXN0RXJyb3Ioe2Vycm9yOnQsY2xpZW50TWV0aG9kOm4sY2FsbHNpdGU6aSx0cmFuc2FjdGlvbjpvLGFyZ3M6cyxtb2RlbE5hbWU6YSxnbG9iYWxPbWl0OnIuZ2xvYmFsT21pdH0pfX1tYXBRdWVyeUVuZ2luZVJlc3VsdCh7ZGF0YVBhdGg6cix1bnBhY2tlcjp0fSxuKXtsZXQgaT1uPy5kYXRhLG89dGhpcy51bnBhY2soaSxyLHQpO3JldHVybiBwcm9jZXNzLmVudi5QUklTTUFfQ0xJRU5UX0dFVF9USU1FP3tkYXRhOm99Om99aGFuZGxlQW5kTG9nUmVxdWVzdEVycm9yKHIpe3RyeXt0aGlzLmhhbmRsZVJlcXVlc3RFcnJvcihyKX1jYXRjaCh0KXt0aHJvdyB0aGlzLmxvZ0VtaXR0ZXImJnRoaXMubG9nRW1pdHRlci5lbWl0KFwiZXJyb3JcIix7bWVzc2FnZTp0Lm1lc3NhZ2UsdGFyZ2V0OnIuY2xpZW50TWV0aG9kLHRpbWVzdGFtcDpuZXcgRGF0ZX0pLHR9fWhhbmRsZVJlcXVlc3RFcnJvcih7ZXJyb3I6cixjbGllbnRNZXRob2Q6dCxjYWxsc2l0ZTpuLHRyYW5zYWN0aW9uOmksYXJnczpvLG1vZGVsTmFtZTpzLGdsb2JhbE9taXQ6YX0pe2lmKERmKHIpLF9mKHIsaSkpdGhyb3cgcjtpZihyIGluc3RhbmNlb2YgeiYmTmYocikpe2xldCB1PWl1KHIubWV0YSk7X24oe2FyZ3M6byxlcnJvcnM6W3VdLGNhbGxzaXRlOm4sZXJyb3JGb3JtYXQ6dGhpcy5jbGllbnQuX2Vycm9yRm9ybWF0LG9yaWdpbmFsTWV0aG9kOnQsY2xpZW50VmVyc2lvbjp0aGlzLmNsaWVudC5fY2xpZW50VmVyc2lvbixnbG9iYWxPbWl0OmF9KX1sZXQgbD1yLm1lc3NhZ2U7aWYobiYmKGw9UG4oe2NhbGxzaXRlOm4sb3JpZ2luYWxNZXRob2Q6dCxpc1BhbmljOnIuaXNQYW5pYyxzaG93Q29sb3JzOnRoaXMuY2xpZW50Ll9lcnJvckZvcm1hdD09PVwicHJldHR5XCIsbWVzc2FnZTpsfSkpLGw9dGhpcy5zYW5pdGl6ZU1lc3NhZ2UobCksci5jb2RlKXtsZXQgdT1zP3ttb2RlbE5hbWU6cywuLi5yLm1ldGF9OnIubWV0YTt0aHJvdyBuZXcgeihsLHtjb2RlOnIuY29kZSxjbGllbnRWZXJzaW9uOnRoaXMuY2xpZW50Ll9jbGllbnRWZXJzaW9uLG1ldGE6dSxiYXRjaFJlcXVlc3RJZHg6ci5iYXRjaFJlcXVlc3RJZHh9KX1lbHNle2lmKHIuaXNQYW5pYyl0aHJvdyBuZXcgbGUobCx0aGlzLmNsaWVudC5fY2xpZW50VmVyc2lvbik7aWYociBpbnN0YW5jZW9mIGopdGhyb3cgbmV3IGoobCx7Y2xpZW50VmVyc2lvbjp0aGlzLmNsaWVudC5fY2xpZW50VmVyc2lvbixiYXRjaFJlcXVlc3RJZHg6ci5iYXRjaFJlcXVlc3RJZHh9KTtpZihyIGluc3RhbmNlb2YgVCl0aHJvdyBuZXcgVChsLHRoaXMuY2xpZW50Ll9jbGllbnRWZXJzaW9uKTtpZihyIGluc3RhbmNlb2YgbGUpdGhyb3cgbmV3IGxlKGwsdGhpcy5jbGllbnQuX2NsaWVudFZlcnNpb24pfXRocm93IHIuY2xpZW50VmVyc2lvbj10aGlzLmNsaWVudC5fY2xpZW50VmVyc2lvbixyfXNhbml0aXplTWVzc2FnZShyKXtyZXR1cm4gdGhpcy5jbGllbnQuX2Vycm9yRm9ybWF0JiZ0aGlzLmNsaWVudC5fZXJyb3JGb3JtYXQhPT1cInByZXR0eVwiPygwLHR1LmRlZmF1bHQpKHIpOnJ9dW5wYWNrKHIsdCxuKXtpZighcnx8KHIuZGF0YSYmKHI9ci5kYXRhKSwhcikpcmV0dXJuIHI7bGV0IGk9T2JqZWN0LmtleXMocilbMF0sbz1PYmplY3QudmFsdWVzKHIpWzBdLHM9dC5maWx0ZXIodT0+dSE9PVwic2VsZWN0XCImJnUhPT1cImluY2x1ZGVcIiksYT1sbyhvLHMpLGw9aT09PVwicXVlcnlSYXdcIj9laShhKTpUcihhKTtyZXR1cm4gbj9uKGwpOmx9Z2V0W1N5bWJvbC50b1N0cmluZ1RhZ10oKXtyZXR1cm5cIlJlcXVlc3RIYW5kbGVyXCJ9fTtmdW5jdGlvbiBPZihlKXtpZihlKXtpZihlLmtpbmQ9PT1cImJhdGNoXCIpcmV0dXJue2tpbmQ6XCJiYXRjaFwiLG9wdGlvbnM6e2lzb2xhdGlvbkxldmVsOmUuaXNvbGF0aW9uTGV2ZWx9fTtpZihlLmtpbmQ9PT1cIml0eFwiKXJldHVybntraW5kOlwiaXR4XCIsb3B0aW9uczpudShlKX07TmUoZSxcIlVua25vd24gdHJhbnNhY3Rpb24ga2luZFwiKX19ZnVuY3Rpb24gbnUoZSl7cmV0dXJue2lkOmUuaWQscGF5bG9hZDplLnBheWxvYWR9fWZ1bmN0aW9uIF9mKGUscil7cmV0dXJuIFpuKGUpJiZyPy5raW5kPT09XCJiYXRjaFwiJiZlLmJhdGNoUmVxdWVzdElkeCE9PXIuaW5kZXh9ZnVuY3Rpb24gTmYoZSl7cmV0dXJuIGUuY29kZT09PVwiUDIwMDlcInx8ZS5jb2RlPT09XCJQMjAxMlwifWZ1bmN0aW9uIGl1KGUpe2lmKGUua2luZD09PVwiVW5pb25cIilyZXR1cm57a2luZDpcIlVuaW9uXCIsZXJyb3JzOmUuZXJyb3JzLm1hcChpdSl9O2lmKEFycmF5LmlzQXJyYXkoZS5zZWxlY3Rpb25QYXRoKSl7bGV0WywuLi5yXT1lLnNlbGVjdGlvblBhdGg7cmV0dXJuey4uLmUsc2VsZWN0aW9uUGF0aDpyfX1yZXR1cm4gZX12YXIgb3U9U2w7dmFyIGN1PUMoS2koKSk7dmFyIE89Y2xhc3MgZXh0ZW5kcyBFcnJvcntjb25zdHJ1Y3RvcihyKXtzdXBlcihyK2BcblJlYWQgbW9yZSBhdCBodHRwczovL3ByaXMubHkvZC9jbGllbnQtY29uc3RydWN0b3JgKSx0aGlzLm5hbWU9XCJQcmlzbWFDbGllbnRDb25zdHJ1Y3RvclZhbGlkYXRpb25FcnJvclwifWdldFtTeW1ib2wudG9TdHJpbmdUYWddKCl7cmV0dXJuXCJQcmlzbWFDbGllbnRDb25zdHJ1Y3RvclZhbGlkYXRpb25FcnJvclwifX07eChPLFwiUHJpc21hQ2xpZW50Q29uc3RydWN0b3JWYWxpZGF0aW9uRXJyb3JcIik7dmFyIHN1PVtcImRhdGFzb3VyY2VzXCIsXCJkYXRhc291cmNlVXJsXCIsXCJlcnJvckZvcm1hdFwiLFwiYWRhcHRlclwiLFwibG9nXCIsXCJ0cmFuc2FjdGlvbk9wdGlvbnNcIixcIm9taXRcIixcIl9faW50ZXJuYWxcIl0sYXU9W1wicHJldHR5XCIsXCJjb2xvcmxlc3NcIixcIm1pbmltYWxcIl0sbHU9W1wiaW5mb1wiLFwicXVlcnlcIixcIndhcm5cIixcImVycm9yXCJdLExmPXtkYXRhc291cmNlczooZSx7ZGF0YXNvdXJjZU5hbWVzOnJ9KT0+e2lmKGUpe2lmKHR5cGVvZiBlIT1cIm9iamVjdFwifHxBcnJheS5pc0FycmF5KGUpKXRocm93IG5ldyBPKGBJbnZhbGlkIHZhbHVlICR7SlNPTi5zdHJpbmdpZnkoZSl9IGZvciBcImRhdGFzb3VyY2VzXCIgcHJvdmlkZWQgdG8gUHJpc21hQ2xpZW50IGNvbnN0cnVjdG9yYCk7Zm9yKGxldFt0LG5db2YgT2JqZWN0LmVudHJpZXMoZSkpe2lmKCFyLmluY2x1ZGVzKHQpKXtsZXQgaT1Kcih0LHIpfHxgIEF2YWlsYWJsZSBkYXRhc291cmNlczogJHtyLmpvaW4oXCIsIFwiKX1gO3Rocm93IG5ldyBPKGBVbmtub3duIGRhdGFzb3VyY2UgJHt0fSBwcm92aWRlZCB0byBQcmlzbWFDbGllbnQgY29uc3RydWN0b3IuJHtpfWApfWlmKHR5cGVvZiBuIT1cIm9iamVjdFwifHxBcnJheS5pc0FycmF5KG4pKXRocm93IG5ldyBPKGBJbnZhbGlkIHZhbHVlICR7SlNPTi5zdHJpbmdpZnkoZSl9IGZvciBkYXRhc291cmNlIFwiJHt0fVwiIHByb3ZpZGVkIHRvIFByaXNtYUNsaWVudCBjb25zdHJ1Y3Rvci5cbkl0IHNob3VsZCBoYXZlIHRoaXMgZm9ybTogeyB1cmw6IFwiQ09OTkVDVElPTl9TVFJJTkdcIiB9YCk7aWYobiYmdHlwZW9mIG49PVwib2JqZWN0XCIpZm9yKGxldFtpLG9db2YgT2JqZWN0LmVudHJpZXMobikpe2lmKGkhPT1cInVybFwiKXRocm93IG5ldyBPKGBJbnZhbGlkIHZhbHVlICR7SlNPTi5zdHJpbmdpZnkoZSl9IGZvciBkYXRhc291cmNlIFwiJHt0fVwiIHByb3ZpZGVkIHRvIFByaXNtYUNsaWVudCBjb25zdHJ1Y3Rvci5cbkl0IHNob3VsZCBoYXZlIHRoaXMgZm9ybTogeyB1cmw6IFwiQ09OTkVDVElPTl9TVFJJTkdcIiB9YCk7aWYodHlwZW9mIG8hPVwic3RyaW5nXCIpdGhyb3cgbmV3IE8oYEludmFsaWQgdmFsdWUgJHtKU09OLnN0cmluZ2lmeShvKX0gZm9yIGRhdGFzb3VyY2UgXCIke3R9XCIgcHJvdmlkZWQgdG8gUHJpc21hQ2xpZW50IGNvbnN0cnVjdG9yLlxuSXQgc2hvdWxkIGhhdmUgdGhpcyBmb3JtOiB7IHVybDogXCJDT05ORUNUSU9OX1NUUklOR1wiIH1gKX19fX0sYWRhcHRlcjooZSxyKT0+e2lmKCFlJiZFcihyLmdlbmVyYXRvcik9PT1cImNsaWVudFwiKXRocm93IG5ldyBPKCdVc2luZyBlbmdpbmUgdHlwZSBcImNsaWVudFwiIHJlcXVpcmVzIGEgZHJpdmVyIGFkYXB0ZXIgdG8gYmUgcHJvdmlkZWQgdG8gUHJpc21hQ2xpZW50IGNvbnN0cnVjdG9yLicpO2lmKGU9PT1udWxsKXJldHVybjtpZihlPT09dm9pZCAwKXRocm93IG5ldyBPKCdcImFkYXB0ZXJcIiBwcm9wZXJ0eSBtdXN0IG5vdCBiZSB1bmRlZmluZWQsIHVzZSBudWxsIHRvIGNvbmRpdGlvbmFsbHkgZGlzYWJsZSBkcml2ZXIgYWRhcHRlcnMuJyk7aWYoIVluKHIpLmluY2x1ZGVzKFwiZHJpdmVyQWRhcHRlcnNcIikpdGhyb3cgbmV3IE8oJ1wiYWRhcHRlclwiIHByb3BlcnR5IGNhbiBvbmx5IGJlIHByb3ZpZGVkIHRvIFByaXNtYUNsaWVudCBjb25zdHJ1Y3RvciB3aGVuIFwiZHJpdmVyQWRhcHRlcnNcIiBwcmV2aWV3IGZlYXR1cmUgaXMgZW5hYmxlZC4nKTtpZihFcihyLmdlbmVyYXRvcik9PT1cImJpbmFyeVwiKXRocm93IG5ldyBPKCdDYW5ub3QgdXNlIGEgZHJpdmVyIGFkYXB0ZXIgd2l0aCB0aGUgXCJiaW5hcnlcIiBRdWVyeSBFbmdpbmUuIFBsZWFzZSB1c2UgdGhlIFwibGlicmFyeVwiIFF1ZXJ5IEVuZ2luZS4nKX0sZGF0YXNvdXJjZVVybDplPT57aWYodHlwZW9mIGU8XCJ1XCImJnR5cGVvZiBlIT1cInN0cmluZ1wiKXRocm93IG5ldyBPKGBJbnZhbGlkIHZhbHVlICR7SlNPTi5zdHJpbmdpZnkoZSl9IGZvciBcImRhdGFzb3VyY2VVcmxcIiBwcm92aWRlZCB0byBQcmlzbWFDbGllbnQgY29uc3RydWN0b3IuXG5FeHBlY3RlZCBzdHJpbmcgb3IgdW5kZWZpbmVkLmApfSxlcnJvckZvcm1hdDplPT57aWYoZSl7aWYodHlwZW9mIGUhPVwic3RyaW5nXCIpdGhyb3cgbmV3IE8oYEludmFsaWQgdmFsdWUgJHtKU09OLnN0cmluZ2lmeShlKX0gZm9yIFwiZXJyb3JGb3JtYXRcIiBwcm92aWRlZCB0byBQcmlzbWFDbGllbnQgY29uc3RydWN0b3IuYCk7aWYoIWF1LmluY2x1ZGVzKGUpKXtsZXQgcj1KcihlLGF1KTt0aHJvdyBuZXcgTyhgSW52YWxpZCBlcnJvckZvcm1hdCAke2V9IHByb3ZpZGVkIHRvIFByaXNtYUNsaWVudCBjb25zdHJ1Y3Rvci4ke3J9YCl9fX0sbG9nOmU9PntpZighZSlyZXR1cm47aWYoIUFycmF5LmlzQXJyYXkoZSkpdGhyb3cgbmV3IE8oYEludmFsaWQgdmFsdWUgJHtKU09OLnN0cmluZ2lmeShlKX0gZm9yIFwibG9nXCIgcHJvdmlkZWQgdG8gUHJpc21hQ2xpZW50IGNvbnN0cnVjdG9yLmApO2Z1bmN0aW9uIHIodCl7aWYodHlwZW9mIHQ9PVwic3RyaW5nXCImJiFsdS5pbmNsdWRlcyh0KSl7bGV0IG49SnIodCxsdSk7dGhyb3cgbmV3IE8oYEludmFsaWQgbG9nIGxldmVsIFwiJHt0fVwiIHByb3ZpZGVkIHRvIFByaXNtYUNsaWVudCBjb25zdHJ1Y3Rvci4ke259YCl9fWZvcihsZXQgdCBvZiBlKXtyKHQpO2xldCBuPXtsZXZlbDpyLGVtaXQ6aT0+e2xldCBvPVtcInN0ZG91dFwiLFwiZXZlbnRcIl07aWYoIW8uaW5jbHVkZXMoaSkpe2xldCBzPUpyKGksbyk7dGhyb3cgbmV3IE8oYEludmFsaWQgdmFsdWUgJHtKU09OLnN0cmluZ2lmeShpKX0gZm9yIFwiZW1pdFwiIGluIGxvZ0xldmVsIHByb3ZpZGVkIHRvIFByaXNtYUNsaWVudCBjb25zdHJ1Y3Rvci4ke3N9YCl9fX07aWYodCYmdHlwZW9mIHQ9PVwib2JqZWN0XCIpZm9yKGxldFtpLG9db2YgT2JqZWN0LmVudHJpZXModCkpaWYobltpXSluW2ldKG8pO2Vsc2UgdGhyb3cgbmV3IE8oYEludmFsaWQgcHJvcGVydHkgJHtpfSBmb3IgXCJsb2dcIiBwcm92aWRlZCB0byBQcmlzbWFDbGllbnQgY29uc3RydWN0b3JgKX19LHRyYW5zYWN0aW9uT3B0aW9uczplPT57aWYoIWUpcmV0dXJuO2xldCByPWUubWF4V2FpdDtpZihyIT1udWxsJiZyPD0wKXRocm93IG5ldyBPKGBJbnZhbGlkIHZhbHVlICR7cn0gZm9yIG1heFdhaXQgaW4gXCJ0cmFuc2FjdGlvbk9wdGlvbnNcIiBwcm92aWRlZCB0byBQcmlzbWFDbGllbnQgY29uc3RydWN0b3IuIG1heFdhaXQgbmVlZHMgdG8gYmUgZ3JlYXRlciB0aGFuIDBgKTtsZXQgdD1lLnRpbWVvdXQ7aWYodCE9bnVsbCYmdDw9MCl0aHJvdyBuZXcgTyhgSW52YWxpZCB2YWx1ZSAke3R9IGZvciB0aW1lb3V0IGluIFwidHJhbnNhY3Rpb25PcHRpb25zXCIgcHJvdmlkZWQgdG8gUHJpc21hQ2xpZW50IGNvbnN0cnVjdG9yLiB0aW1lb3V0IG5lZWRzIHRvIGJlIGdyZWF0ZXIgdGhhbiAwYCl9LG9taXQ6KGUscik9PntpZih0eXBlb2YgZSE9XCJvYmplY3RcIil0aHJvdyBuZXcgTygnXCJvbWl0XCIgb3B0aW9uIGlzIGV4cGVjdGVkIHRvIGJlIGFuIG9iamVjdC4nKTtpZihlPT09bnVsbCl0aHJvdyBuZXcgTygnXCJvbWl0XCIgb3B0aW9uIGNhbiBub3QgYmUgYG51bGxgJyk7bGV0IHQ9W107Zm9yKGxldFtuLGldb2YgT2JqZWN0LmVudHJpZXMoZSkpe2xldCBvPU1mKG4sci5ydW50aW1lRGF0YU1vZGVsKTtpZighbyl7dC5wdXNoKHtraW5kOlwiVW5rbm93bk1vZGVsXCIsbW9kZWxLZXk6bn0pO2NvbnRpbnVlfWZvcihsZXRbcyxhXW9mIE9iamVjdC5lbnRyaWVzKGkpKXtsZXQgbD1vLmZpZWxkcy5maW5kKHU9PnUubmFtZT09PXMpO2lmKCFsKXt0LnB1c2goe2tpbmQ6XCJVbmtub3duRmllbGRcIixtb2RlbEtleTpuLGZpZWxkTmFtZTpzfSk7Y29udGludWV9aWYobC5yZWxhdGlvbk5hbWUpe3QucHVzaCh7a2luZDpcIlJlbGF0aW9uSW5PbWl0XCIsbW9kZWxLZXk6bixmaWVsZE5hbWU6c30pO2NvbnRpbnVlfXR5cGVvZiBhIT1cImJvb2xlYW5cIiYmdC5wdXNoKHtraW5kOlwiSW52YWxpZEZpZWxkVmFsdWVcIixtb2RlbEtleTpuLGZpZWxkTmFtZTpzfSl9fWlmKHQubGVuZ3RoPjApdGhyb3cgbmV3IE8oJGYoZSx0KSl9LF9faW50ZXJuYWw6ZT0+e2lmKCFlKXJldHVybjtsZXQgcj1bXCJkZWJ1Z1wiLFwiZW5naW5lXCIsXCJjb25maWdPdmVycmlkZVwiXTtpZih0eXBlb2YgZSE9XCJvYmplY3RcIil0aHJvdyBuZXcgTyhgSW52YWxpZCB2YWx1ZSAke0pTT04uc3RyaW5naWZ5KGUpfSBmb3IgXCJfX2ludGVybmFsXCIgdG8gUHJpc21hQ2xpZW50IGNvbnN0cnVjdG9yYCk7Zm9yKGxldFt0XW9mIE9iamVjdC5lbnRyaWVzKGUpKWlmKCFyLmluY2x1ZGVzKHQpKXtsZXQgbj1Kcih0LHIpO3Rocm93IG5ldyBPKGBJbnZhbGlkIHByb3BlcnR5ICR7SlNPTi5zdHJpbmdpZnkodCl9IGZvciBcIl9faW50ZXJuYWxcIiBwcm92aWRlZCB0byBQcmlzbWFDbGllbnQgY29uc3RydWN0b3IuJHtufWApfX19O2Z1bmN0aW9uIHB1KGUscil7Zm9yKGxldFt0LG5db2YgT2JqZWN0LmVudHJpZXMoZSkpe2lmKCFzdS5pbmNsdWRlcyh0KSl7bGV0IGk9SnIodCxzdSk7dGhyb3cgbmV3IE8oYFVua25vd24gcHJvcGVydHkgJHt0fSBwcm92aWRlZCB0byBQcmlzbWFDbGllbnQgY29uc3RydWN0b3IuJHtpfWApfUxmW3RdKG4scil9aWYoZS5kYXRhc291cmNlVXJsJiZlLmRhdGFzb3VyY2VzKXRocm93IG5ldyBPKCdDYW4gbm90IHVzZSBcImRhdGFzb3VyY2VVcmxcIiBhbmQgXCJkYXRhc291cmNlc1wiIG9wdGlvbnMgYXQgdGhlIHNhbWUgdGltZS4gUGljayBvbmUgb2YgdGhlbScpfWZ1bmN0aW9uIEpyKGUscil7aWYoci5sZW5ndGg9PT0wfHx0eXBlb2YgZSE9XCJzdHJpbmdcIilyZXR1cm5cIlwiO2xldCB0PUZmKGUscik7cmV0dXJuIHQ/YCBEaWQgeW91IG1lYW4gXCIke3R9XCI/YDpcIlwifWZ1bmN0aW9uIEZmKGUscil7aWYoci5sZW5ndGg9PT0wKXJldHVybiBudWxsO2xldCB0PXIubWFwKGk9Pih7dmFsdWU6aSxkaXN0YW5jZTooMCxjdS5kZWZhdWx0KShlLGkpfSkpO3Quc29ydCgoaSxvKT0+aS5kaXN0YW5jZTxvLmRpc3RhbmNlPy0xOjEpO2xldCBuPXRbMF07cmV0dXJuIG4uZGlzdGFuY2U8Mz9uLnZhbHVlOm51bGx9ZnVuY3Rpb24gTWYoZSxyKXtyZXR1cm4gdXUoci5tb2RlbHMsZSk/P3V1KHIudHlwZXMsZSl9ZnVuY3Rpb24gdXUoZSxyKXtsZXQgdD1PYmplY3Qua2V5cyhlKS5maW5kKG49PlllKG4pPT09cik7aWYodClyZXR1cm4gZVt0XX1mdW5jdGlvbiAkZihlLHIpe2xldCB0PU5yKGUpO2ZvcihsZXQgbyBvZiByKXN3aXRjaChvLmtpbmQpe2Nhc2VcIlVua25vd25Nb2RlbFwiOnQuYXJndW1lbnRzLmdldEZpZWxkKG8ubW9kZWxLZXkpPy5tYXJrQXNFcnJvcigpLHQuYWRkRXJyb3JNZXNzYWdlKCgpPT5gVW5rbm93biBtb2RlbCBuYW1lOiAke28ubW9kZWxLZXl9LmApO2JyZWFrO2Nhc2VcIlVua25vd25GaWVsZFwiOnQuYXJndW1lbnRzLmdldERlZXBGaWVsZChbby5tb2RlbEtleSxvLmZpZWxkTmFtZV0pPy5tYXJrQXNFcnJvcigpLHQuYWRkRXJyb3JNZXNzYWdlKCgpPT5gTW9kZWwgXCIke28ubW9kZWxLZXl9XCIgZG9lcyBub3QgaGF2ZSBhIGZpZWxkIG5hbWVkIFwiJHtvLmZpZWxkTmFtZX1cIi5gKTticmVhaztjYXNlXCJSZWxhdGlvbkluT21pdFwiOnQuYXJndW1lbnRzLmdldERlZXBGaWVsZChbby5tb2RlbEtleSxvLmZpZWxkTmFtZV0pPy5tYXJrQXNFcnJvcigpLHQuYWRkRXJyb3JNZXNzYWdlKCgpPT4nUmVsYXRpb25zIGFyZSBhbHJlYWR5IGV4Y2x1ZGVkIGJ5IGRlZmF1bHQgYW5kIGNhbiBub3QgYmUgc3BlY2lmaWVkIGluIFwib21pdFwiLicpO2JyZWFrO2Nhc2VcIkludmFsaWRGaWVsZFZhbHVlXCI6dC5hcmd1bWVudHMuZ2V0RGVlcEZpZWxkVmFsdWUoW28ubW9kZWxLZXksby5maWVsZE5hbWVdKT8ubWFya0FzRXJyb3IoKSx0LmFkZEVycm9yTWVzc2FnZSgoKT0+XCJPbWl0IGZpZWxkIG9wdGlvbiB2YWx1ZSBtdXN0IGJlIGEgYm9vbGVhbi5cIik7YnJlYWt9bGV0e21lc3NhZ2U6bixhcmdzOml9PU9uKHQsXCJjb2xvcmxlc3NcIik7cmV0dXJuYEVycm9yIHZhbGlkYXRpbmcgXCJvbWl0XCIgb3B0aW9uOlxuXG4ke2l9XG5cbiR7bn1gfWZ1bmN0aW9uIGR1KGUpe3JldHVybiBlLmxlbmd0aD09PTA/UHJvbWlzZS5yZXNvbHZlKFtdKTpuZXcgUHJvbWlzZSgocix0KT0+e2xldCBuPW5ldyBBcnJheShlLmxlbmd0aCksaT1udWxsLG89ITEscz0wLGE9KCk9PntvfHwocysrLHM9PT1lLmxlbmd0aCYmKG89ITAsaT90KGkpOnIobikpKX0sbD11PT57b3x8KG89ITAsdCh1KSl9O2ZvcihsZXQgdT0wO3U8ZS5sZW5ndGg7dSsrKWVbdV0udGhlbihjPT57blt1XT1jLGEoKX0sYz0+e2lmKCFabihjKSl7bChjKTtyZXR1cm59Yy5iYXRjaFJlcXVlc3RJZHg9PT11P2woYyk6KGl8fChpPWMpLGEoKSl9KX0pfXZhciBycj1OKFwicHJpc21hOmNsaWVudFwiKTt0eXBlb2YgZ2xvYmFsVGhpcz09XCJvYmplY3RcIiYmKGdsb2JhbFRoaXMuTk9ERV9DTElFTlQ9ITApO3ZhciBxZj17cmVxdWVzdEFyZ3NUb01pZGRsZXdhcmVBcmdzOmU9PmUsbWlkZGxld2FyZUFyZ3NUb1JlcXVlc3RBcmdzOmU9PmV9LGpmPVN5bWJvbC5mb3IoXCJwcmlzbWEuY2xpZW50LnRyYW5zYWN0aW9uLmlkXCIpLFZmPXtpZDowLG5leHRJZCgpe3JldHVybisrdGhpcy5pZH19O2Z1bmN0aW9uIGJ1KGUpe2NsYXNzIHJ7X29yaWdpbmFsQ2xpZW50PXRoaXM7X3J1bnRpbWVEYXRhTW9kZWw7X3JlcXVlc3RIYW5kbGVyO19jb25uZWN0aW9uUHJvbWlzZTtfZGlzY29ubmVjdGlvblByb21pc2U7X2VuZ2luZUNvbmZpZztfYWNjZWxlcmF0ZUVuZ2luZUNvbmZpZztfY2xpZW50VmVyc2lvbjtfZXJyb3JGb3JtYXQ7X3RyYWNpbmdIZWxwZXI7X21pZGRsZXdhcmVzPW5ldyB6bjtfcHJldmlld0ZlYXR1cmVzO19hY3RpdmVQcm92aWRlcjtfZ2xvYmFsT21pdDtfZXh0ZW5zaW9ucztfZW5naW5lO19hcHBsaWVkUGFyZW50O19jcmVhdGVQcmlzbWFQcm9taXNlPUNvKCk7Y29uc3RydWN0b3Iobil7ZT1uPy5fX2ludGVybmFsPy5jb25maWdPdmVycmlkZT8uKGUpPz9lLHBsKGUpLG4mJnB1KG4sZSk7bGV0IGk9bmV3IGh1LkV2ZW50RW1pdHRlcigpLm9uKFwiZXJyb3JcIiwoKT0+e30pO3RoaXMuX2V4dGVuc2lvbnM9THIuZW1wdHkoKSx0aGlzLl9wcmV2aWV3RmVhdHVyZXM9WW4oZSksdGhpcy5fY2xpZW50VmVyc2lvbj1lLmNsaWVudFZlcnNpb24/P291LHRoaXMuX2FjdGl2ZVByb3ZpZGVyPWUuYWN0aXZlUHJvdmlkZXIsdGhpcy5fZ2xvYmFsT21pdD1uPy5vbWl0LHRoaXMuX3RyYWNpbmdIZWxwZXI9WmwoKTtsZXQgbz1lLnJlbGF0aXZlRW52UGF0aHMmJntyb290RW52UGF0aDplLnJlbGF0aXZlRW52UGF0aHMucm9vdEVudlBhdGgmJnRpLmRlZmF1bHQucmVzb2x2ZShlLmRpcm5hbWUsZS5yZWxhdGl2ZUVudlBhdGhzLnJvb3RFbnZQYXRoKSxzY2hlbWFFbnZQYXRoOmUucmVsYXRpdmVFbnZQYXRocy5zY2hlbWFFbnZQYXRoJiZ0aS5kZWZhdWx0LnJlc29sdmUoZS5kaXJuYW1lLGUucmVsYXRpdmVFbnZQYXRocy5zY2hlbWFFbnZQYXRoKX0scztpZihuPy5hZGFwdGVyKXtzPW4uYWRhcHRlcjtsZXQgbD1lLmFjdGl2ZVByb3ZpZGVyPT09XCJwb3N0Z3Jlc3FsXCJ8fGUuYWN0aXZlUHJvdmlkZXI9PT1cImNvY2tyb2FjaGRiXCI/XCJwb3N0Z3Jlc1wiOmUuYWN0aXZlUHJvdmlkZXI7aWYocy5wcm92aWRlciE9PWwpdGhyb3cgbmV3IFQoYFRoZSBEcml2ZXIgQWRhcHRlciBcXGAke3MuYWRhcHRlck5hbWV9XFxgLCBiYXNlZCBvbiBcXGAke3MucHJvdmlkZXJ9XFxgLCBpcyBub3QgY29tcGF0aWJsZSB3aXRoIHRoZSBwcm92aWRlciBcXGAke2x9XFxgIHNwZWNpZmllZCBpbiB0aGUgUHJpc21hIHNjaGVtYS5gLHRoaXMuX2NsaWVudFZlcnNpb24pO2lmKG4uZGF0YXNvdXJjZXN8fG4uZGF0YXNvdXJjZVVybCE9PXZvaWQgMCl0aHJvdyBuZXcgVChcIkN1c3RvbSBkYXRhc291cmNlIGNvbmZpZ3VyYXRpb24gaXMgbm90IGNvbXBhdGlibGUgd2l0aCBQcmlzbWEgRHJpdmVyIEFkYXB0ZXJzLiBQbGVhc2UgZGVmaW5lIHRoZSBkYXRhYmFzZSBjb25uZWN0aW9uIHN0cmluZyBkaXJlY3RseSBpbiB0aGUgRHJpdmVyIEFkYXB0ZXIgY29uZmlndXJhdGlvbi5cIix0aGlzLl9jbGllbnRWZXJzaW9uKX1sZXQgYT0hcyYmbyYmc3Qobyx7Y29uZmxpY3RDaGVjazpcIm5vbmVcIn0pfHxlLmluamVjdGFibGVFZGdlRW52Py4oKTt0cnl7bGV0IGw9bj8/e30sdT1sLl9faW50ZXJuYWw/P3t9LGM9dS5kZWJ1Zz09PSEwO2MmJk4uZW5hYmxlKFwicHJpc21hOmNsaWVudFwiKTtsZXQgcD10aS5kZWZhdWx0LnJlc29sdmUoZS5kaXJuYW1lLGUucmVsYXRpdmVQYXRoKTt5dS5kZWZhdWx0LmV4aXN0c1N5bmMocCl8fChwPWUuZGlybmFtZSkscnIoXCJkaXJuYW1lXCIsZS5kaXJuYW1lKSxycihcInJlbGF0aXZlUGF0aFwiLGUucmVsYXRpdmVQYXRoKSxycihcImN3ZFwiLHApO2xldCBkPXUuZW5naW5lfHx7fTtpZihsLmVycm9yRm9ybWF0P3RoaXMuX2Vycm9yRm9ybWF0PWwuZXJyb3JGb3JtYXQ6cHJvY2Vzcy5lbnYuTk9ERV9FTlY9PT1cInByb2R1Y3Rpb25cIj90aGlzLl9lcnJvckZvcm1hdD1cIm1pbmltYWxcIjpwcm9jZXNzLmVudi5OT19DT0xPUj90aGlzLl9lcnJvckZvcm1hdD1cImNvbG9ybGVzc1wiOnRoaXMuX2Vycm9yRm9ybWF0PVwiY29sb3JsZXNzXCIsdGhpcy5fcnVudGltZURhdGFNb2RlbD1lLnJ1bnRpbWVEYXRhTW9kZWwsdGhpcy5fZW5naW5lQ29uZmlnPXtjd2Q6cCxkaXJuYW1lOmUuZGlybmFtZSxlbmFibGVEZWJ1Z0xvZ3M6YyxhbGxvd1RyaWdnZXJQYW5pYzpkLmFsbG93VHJpZ2dlclBhbmljLHByaXNtYVBhdGg6ZC5iaW5hcnlQYXRoPz92b2lkIDAsZW5naW5lRW5kcG9pbnQ6ZC5lbmRwb2ludCxnZW5lcmF0b3I6ZS5nZW5lcmF0b3Isc2hvd0NvbG9yczp0aGlzLl9lcnJvckZvcm1hdD09PVwicHJldHR5XCIsbG9nTGV2ZWw6bC5sb2cmJmV1KGwubG9nKSxsb2dRdWVyaWVzOmwubG9nJiYhISh0eXBlb2YgbC5sb2c9PVwic3RyaW5nXCI/bC5sb2c9PT1cInF1ZXJ5XCI6bC5sb2cuZmluZChmPT50eXBlb2YgZj09XCJzdHJpbmdcIj9mPT09XCJxdWVyeVwiOmYubGV2ZWw9PT1cInF1ZXJ5XCIpKSxlbnY6YT8ucGFyc2VkPz97fSxmbGFnczpbXSxlbmdpbmVXYXNtOmUuZW5naW5lV2FzbSxjb21waWxlcldhc206ZS5jb21waWxlcldhc20sY2xpZW50VmVyc2lvbjplLmNsaWVudFZlcnNpb24sZW5naW5lVmVyc2lvbjplLmVuZ2luZVZlcnNpb24scHJldmlld0ZlYXR1cmVzOnRoaXMuX3ByZXZpZXdGZWF0dXJlcyxhY3RpdmVQcm92aWRlcjplLmFjdGl2ZVByb3ZpZGVyLGlubGluZVNjaGVtYTplLmlubGluZVNjaGVtYSxvdmVycmlkZURhdGFzb3VyY2VzOmRsKGwsZS5kYXRhc291cmNlTmFtZXMpLGlubGluZURhdGFzb3VyY2VzOmUuaW5saW5lRGF0YXNvdXJjZXMsaW5saW5lU2NoZW1hSGFzaDplLmlubGluZVNjaGVtYUhhc2gsdHJhY2luZ0hlbHBlcjp0aGlzLl90cmFjaW5nSGVscGVyLHRyYW5zYWN0aW9uT3B0aW9uczp7bWF4V2FpdDpsLnRyYW5zYWN0aW9uT3B0aW9ucz8ubWF4V2FpdD8/MmUzLHRpbWVvdXQ6bC50cmFuc2FjdGlvbk9wdGlvbnM/LnRpbWVvdXQ/PzVlMyxpc29sYXRpb25MZXZlbDpsLnRyYW5zYWN0aW9uT3B0aW9ucz8uaXNvbGF0aW9uTGV2ZWx9LGxvZ0VtaXR0ZXI6aSxpc0J1bmRsZWQ6ZS5pc0J1bmRsZWQsYWRhcHRlcjpzfSx0aGlzLl9hY2NlbGVyYXRlRW5naW5lQ29uZmlnPXsuLi50aGlzLl9lbmdpbmVDb25maWcsYWNjZWxlcmF0ZVV0aWxzOntyZXNvbHZlRGF0YXNvdXJjZVVybDpWcixnZXRCYXRjaFJlcXVlc3RQYXlsb2FkOiRyLHByaXNtYUdyYXBoUUxUb0pTRXJyb3I6cXIsUHJpc21hQ2xpZW50VW5rbm93blJlcXVlc3RFcnJvcjpqLFByaXNtYUNsaWVudEluaXRpYWxpemF0aW9uRXJyb3I6VCxQcmlzbWFDbGllbnRLbm93blJlcXVlc3RFcnJvcjp6LGRlYnVnOk4oXCJwcmlzbWE6Y2xpZW50OmFjY2VsZXJhdGVFbmdpbmVcIiksZW5naW5lVmVyc2lvbjpmdS52ZXJzaW9uLGNsaWVudFZlcnNpb246ZS5jbGllbnRWZXJzaW9ufX0scnIoXCJjbGllbnRWZXJzaW9uXCIsZS5jbGllbnRWZXJzaW9uKSx0aGlzLl9lbmdpbmU9VmwoZSx0aGlzLl9lbmdpbmVDb25maWcpLHRoaXMuX3JlcXVlc3RIYW5kbGVyPW5ldyByaSh0aGlzLGkpLGwubG9nKWZvcihsZXQgZiBvZiBsLmxvZyl7bGV0IGg9dHlwZW9mIGY9PVwic3RyaW5nXCI/ZjpmLmVtaXQ9PT1cInN0ZG91dFwiP2YubGV2ZWw6bnVsbDtoJiZ0aGlzLiRvbihoLGc9PntudC5sb2coYCR7bnQudGFnc1toXT8/XCJcIn1gLGcubWVzc2FnZXx8Zy5xdWVyeSl9KX19Y2F0Y2gobCl7dGhyb3cgbC5jbGllbnRWZXJzaW9uPXRoaXMuX2NsaWVudFZlcnNpb24sbH1yZXR1cm4gdGhpcy5fYXBwbGllZFBhcmVudD1QdCh0aGlzKX1nZXRbU3ltYm9sLnRvU3RyaW5nVGFnXSgpe3JldHVyblwiUHJpc21hQ2xpZW50XCJ9JHVzZShuKXt0aGlzLl9taWRkbGV3YXJlcy51c2Uobil9JG9uKG4saSl7cmV0dXJuIG49PT1cImJlZm9yZUV4aXRcIj90aGlzLl9lbmdpbmUub25CZWZvcmVFeGl0KGkpOm4mJnRoaXMuX2VuZ2luZUNvbmZpZy5sb2dFbWl0dGVyLm9uKG4saSksdGhpc30kY29ubmVjdCgpe3RyeXtyZXR1cm4gdGhpcy5fZW5naW5lLnN0YXJ0KCl9Y2F0Y2gobil7dGhyb3cgbi5jbGllbnRWZXJzaW9uPXRoaXMuX2NsaWVudFZlcnNpb24sbn19YXN5bmMgJGRpc2Nvbm5lY3QoKXt0cnl7YXdhaXQgdGhpcy5fZW5naW5lLnN0b3AoKX1jYXRjaChuKXt0aHJvdyBuLmNsaWVudFZlcnNpb249dGhpcy5fY2xpZW50VmVyc2lvbixufWZpbmFsbHl7UW8oKX19JGV4ZWN1dGVSYXdJbnRlcm5hbChuLGksbyxzKXtsZXQgYT10aGlzLl9hY3RpdmVQcm92aWRlcjtyZXR1cm4gdGhpcy5fcmVxdWVzdCh7YWN0aW9uOlwiZXhlY3V0ZVJhd1wiLGFyZ3M6byx0cmFuc2FjdGlvbjpuLGNsaWVudE1ldGhvZDppLGFyZ3NNYXBwZXI6QW8oe2NsaWVudE1ldGhvZDppLGFjdGl2ZVByb3ZpZGVyOmF9KSxjYWxsc2l0ZTpaZSh0aGlzLl9lcnJvckZvcm1hdCksZGF0YVBhdGg6W10sbWlkZGxld2FyZUFyZ3NNYXBwZXI6c30pfSRleGVjdXRlUmF3KG4sLi4uaSl7cmV0dXJuIHRoaXMuX2NyZWF0ZVByaXNtYVByb21pc2Uobz0+e2lmKG4ucmF3IT09dm9pZCAwfHxuLnNxbCE9PXZvaWQgMCl7bGV0W3MsYV09bXUobixpKTtyZXR1cm4gUm8odGhpcy5fYWN0aXZlUHJvdmlkZXIscy50ZXh0LHMudmFsdWVzLEFycmF5LmlzQXJyYXkobik/XCJwcmlzbWEuJGV4ZWN1dGVSYXdgPFNRTD5gXCI6XCJwcmlzbWEuJGV4ZWN1dGVSYXcoc3FsYDxTUUw+YClcIiksdGhpcy4kZXhlY3V0ZVJhd0ludGVybmFsKG8sXCIkZXhlY3V0ZVJhd1wiLHMsYSl9dGhyb3cgbmV3IFooXCJgJGV4ZWN1dGVSYXdgIGlzIGEgdGFnIGZ1bmN0aW9uLCBwbGVhc2UgdXNlIGl0IGxpa2UgdGhlIGZvbGxvd2luZzpcXG5gYGBcXG5jb25zdCByZXN1bHQgPSBhd2FpdCBwcmlzbWEuJGV4ZWN1dGVSYXdgVVBEQVRFIFVzZXIgU0VUIGNvb2wgPSAke3RydWV9IFdIRVJFIGVtYWlsID0gJHsndXNlckBlbWFpbC5jb20nfTtgXFxuYGBgXFxuXFxuT3IgcmVhZCBvdXIgZG9jcyBhdCBodHRwczovL3d3dy5wcmlzbWEuaW8vZG9jcy9jb25jZXB0cy9jb21wb25lbnRzL3ByaXNtYS1jbGllbnQvcmF3LWRhdGFiYXNlLWFjY2VzcyNleGVjdXRlcmF3XFxuXCIse2NsaWVudFZlcnNpb246dGhpcy5fY2xpZW50VmVyc2lvbn0pfSl9JGV4ZWN1dGVSYXdVbnNhZmUobiwuLi5pKXtyZXR1cm4gdGhpcy5fY3JlYXRlUHJpc21hUHJvbWlzZShvPT4oUm8odGhpcy5fYWN0aXZlUHJvdmlkZXIsbixpLFwicHJpc21hLiRleGVjdXRlUmF3VW5zYWZlKDxTUUw+LCBbLi4udmFsdWVzXSlcIiksdGhpcy4kZXhlY3V0ZVJhd0ludGVybmFsKG8sXCIkZXhlY3V0ZVJhd1Vuc2FmZVwiLFtuLC4uLmldKSkpfSRydW5Db21tYW5kUmF3KG4pe2lmKGUuYWN0aXZlUHJvdmlkZXIhPT1cIm1vbmdvZGJcIil0aHJvdyBuZXcgWihgVGhlICR7ZS5hY3RpdmVQcm92aWRlcn0gcHJvdmlkZXIgZG9lcyBub3Qgc3VwcG9ydCAkcnVuQ29tbWFuZFJhdy4gVXNlIHRoZSBtb25nb2RiIHByb3ZpZGVyLmAse2NsaWVudFZlcnNpb246dGhpcy5fY2xpZW50VmVyc2lvbn0pO3JldHVybiB0aGlzLl9jcmVhdGVQcmlzbWFQcm9taXNlKGk9PnRoaXMuX3JlcXVlc3Qoe2FyZ3M6bixjbGllbnRNZXRob2Q6XCIkcnVuQ29tbWFuZFJhd1wiLGRhdGFQYXRoOltdLGFjdGlvbjpcInJ1bkNvbW1hbmRSYXdcIixhcmdzTWFwcGVyOkJsLGNhbGxzaXRlOlplKHRoaXMuX2Vycm9yRm9ybWF0KSx0cmFuc2FjdGlvbjppfSkpfWFzeW5jICRxdWVyeVJhd0ludGVybmFsKG4saSxvLHMpe2xldCBhPXRoaXMuX2FjdGl2ZVByb3ZpZGVyO3JldHVybiB0aGlzLl9yZXF1ZXN0KHthY3Rpb246XCJxdWVyeVJhd1wiLGFyZ3M6byx0cmFuc2FjdGlvbjpuLGNsaWVudE1ldGhvZDppLGFyZ3NNYXBwZXI6QW8oe2NsaWVudE1ldGhvZDppLGFjdGl2ZVByb3ZpZGVyOmF9KSxjYWxsc2l0ZTpaZSh0aGlzLl9lcnJvckZvcm1hdCksZGF0YVBhdGg6W10sbWlkZGxld2FyZUFyZ3NNYXBwZXI6c30pfSRxdWVyeVJhdyhuLC4uLmkpe3JldHVybiB0aGlzLl9jcmVhdGVQcmlzbWFQcm9taXNlKG89PntpZihuLnJhdyE9PXZvaWQgMHx8bi5zcWwhPT12b2lkIDApcmV0dXJuIHRoaXMuJHF1ZXJ5UmF3SW50ZXJuYWwobyxcIiRxdWVyeVJhd1wiLC4uLm11KG4saSkpO3Rocm93IG5ldyBaKFwiYCRxdWVyeVJhd2AgaXMgYSB0YWcgZnVuY3Rpb24sIHBsZWFzZSB1c2UgaXQgbGlrZSB0aGUgZm9sbG93aW5nOlxcbmBgYFxcbmNvbnN0IHJlc3VsdCA9IGF3YWl0IHByaXNtYS4kcXVlcnlSYXdgU0VMRUNUICogRlJPTSBVc2VyIFdIRVJFIGlkID0gJHsxfSBPUiBlbWFpbCA9ICR7J3VzZXJAZW1haWwuY29tJ307YFxcbmBgYFxcblxcbk9yIHJlYWQgb3VyIGRvY3MgYXQgaHR0cHM6Ly93d3cucHJpc21hLmlvL2RvY3MvY29uY2VwdHMvY29tcG9uZW50cy9wcmlzbWEtY2xpZW50L3Jhdy1kYXRhYmFzZS1hY2Nlc3MjcXVlcnlyYXdcXG5cIix7Y2xpZW50VmVyc2lvbjp0aGlzLl9jbGllbnRWZXJzaW9ufSl9KX0kcXVlcnlSYXdUeXBlZChuKXtyZXR1cm4gdGhpcy5fY3JlYXRlUHJpc21hUHJvbWlzZShpPT57aWYoIXRoaXMuX2hhc1ByZXZpZXdGbGFnKFwidHlwZWRTcWxcIikpdGhyb3cgbmV3IFooXCJgdHlwZWRTcWxgIHByZXZpZXcgZmVhdHVyZSBtdXN0IGJlIGVuYWJsZWQgaW4gb3JkZXIgdG8gYWNjZXNzICRxdWVyeVJhd1R5cGVkIEFQSVwiLHtjbGllbnRWZXJzaW9uOnRoaXMuX2NsaWVudFZlcnNpb259KTtyZXR1cm4gdGhpcy4kcXVlcnlSYXdJbnRlcm5hbChpLFwiJHF1ZXJ5UmF3VHlwZWRcIixuKX0pfSRxdWVyeVJhd1Vuc2FmZShuLC4uLmkpe3JldHVybiB0aGlzLl9jcmVhdGVQcmlzbWFQcm9taXNlKG89PnRoaXMuJHF1ZXJ5UmF3SW50ZXJuYWwobyxcIiRxdWVyeVJhd1Vuc2FmZVwiLFtuLC4uLmldKSl9X3RyYW5zYWN0aW9uV2l0aEFycmF5KHtwcm9taXNlczpuLG9wdGlvbnM6aX0pe2xldCBvPVZmLm5leHRJZCgpLHM9WGwobi5sZW5ndGgpLGE9bi5tYXAoKGwsdSk9PntpZihsPy5bU3ltYm9sLnRvU3RyaW5nVGFnXSE9PVwiUHJpc21hUHJvbWlzZVwiKXRocm93IG5ldyBFcnJvcihcIkFsbCBlbGVtZW50cyBvZiB0aGUgYXJyYXkgbmVlZCB0byBiZSBQcmlzbWEgQ2xpZW50IHByb21pc2VzLiBIaW50OiBQbGVhc2UgbWFrZSBzdXJlIHlvdSBhcmUgbm90IGF3YWl0aW5nIHRoZSBQcmlzbWEgY2xpZW50IGNhbGxzIHlvdSBpbnRlbmRlZCB0byBwYXNzIGluIHRoZSAkdHJhbnNhY3Rpb24gZnVuY3Rpb24uXCIpO2xldCBjPWk/Lmlzb2xhdGlvbkxldmVsPz90aGlzLl9lbmdpbmVDb25maWcudHJhbnNhY3Rpb25PcHRpb25zLmlzb2xhdGlvbkxldmVsLHA9e2tpbmQ6XCJiYXRjaFwiLGlkOm8saW5kZXg6dSxpc29sYXRpb25MZXZlbDpjLGxvY2s6c307cmV0dXJuIGwucmVxdWVzdFRyYW5zYWN0aW9uPy4ocCk/P2x9KTtyZXR1cm4gZHUoYSl9YXN5bmMgX3RyYW5zYWN0aW9uV2l0aENhbGxiYWNrKHtjYWxsYmFjazpuLG9wdGlvbnM6aX0pe2xldCBvPXt0cmFjZXBhcmVudDp0aGlzLl90cmFjaW5nSGVscGVyLmdldFRyYWNlUGFyZW50KCl9LHM9e21heFdhaXQ6aT8ubWF4V2FpdD8/dGhpcy5fZW5naW5lQ29uZmlnLnRyYW5zYWN0aW9uT3B0aW9ucy5tYXhXYWl0LHRpbWVvdXQ6aT8udGltZW91dD8/dGhpcy5fZW5naW5lQ29uZmlnLnRyYW5zYWN0aW9uT3B0aW9ucy50aW1lb3V0LGlzb2xhdGlvbkxldmVsOmk/Lmlzb2xhdGlvbkxldmVsPz90aGlzLl9lbmdpbmVDb25maWcudHJhbnNhY3Rpb25PcHRpb25zLmlzb2xhdGlvbkxldmVsfSxhPWF3YWl0IHRoaXMuX2VuZ2luZS50cmFuc2FjdGlvbihcInN0YXJ0XCIsbyxzKSxsO3RyeXtsZXQgdT17a2luZDpcIml0eFwiLC4uLmF9O2w9YXdhaXQgbih0aGlzLl9jcmVhdGVJdHhDbGllbnQodSkpLGF3YWl0IHRoaXMuX2VuZ2luZS50cmFuc2FjdGlvbihcImNvbW1pdFwiLG8sYSl9Y2F0Y2godSl7dGhyb3cgYXdhaXQgdGhpcy5fZW5naW5lLnRyYW5zYWN0aW9uKFwicm9sbGJhY2tcIixvLGEpLmNhdGNoKCgpPT57fSksdX1yZXR1cm4gbH1fY3JlYXRlSXR4Q2xpZW50KG4pe3JldHVybiBoZShQdChoZShZYSh0aGlzKSxbcmUoXCJfYXBwbGllZFBhcmVudFwiLCgpPT50aGlzLl9hcHBsaWVkUGFyZW50Ll9jcmVhdGVJdHhDbGllbnQobikpLHJlKFwiX2NyZWF0ZVByaXNtYVByb21pc2VcIiwoKT0+Q28obikpLHJlKGpmLCgpPT5uLmlkKV0pKSxbTXIocmwpXSl9JHRyYW5zYWN0aW9uKG4saSl7bGV0IG87dHlwZW9mIG49PVwiZnVuY3Rpb25cIj90aGlzLl9lbmdpbmVDb25maWcuYWRhcHRlcj8uYWRhcHRlck5hbWU9PT1cIkBwcmlzbWEvYWRhcHRlci1kMVwiP289KCk9Pnt0aHJvdyBuZXcgRXJyb3IoXCJDbG91ZGZsYXJlIEQxIGRvZXMgbm90IHN1cHBvcnQgaW50ZXJhY3RpdmUgdHJhbnNhY3Rpb25zLiBXZSByZWNvbW1lbmQgeW91IHRvIHJlZmFjdG9yIHlvdXIgcXVlcmllcyB3aXRoIHRoYXQgbGltaXRhdGlvbiBpbiBtaW5kLCBhbmQgdXNlIGJhdGNoIHRyYW5zYWN0aW9ucyB3aXRoIGBwcmlzbWEuJHRyYW5zYWN0aW9ucyhbXSlgIHdoZXJlIGFwcGxpY2FibGUuXCIpfTpvPSgpPT50aGlzLl90cmFuc2FjdGlvbldpdGhDYWxsYmFjayh7Y2FsbGJhY2s6bixvcHRpb25zOml9KTpvPSgpPT50aGlzLl90cmFuc2FjdGlvbldpdGhBcnJheSh7cHJvbWlzZXM6bixvcHRpb25zOml9KTtsZXQgcz17bmFtZTpcInRyYW5zYWN0aW9uXCIsYXR0cmlidXRlczp7bWV0aG9kOlwiJHRyYW5zYWN0aW9uXCJ9fTtyZXR1cm4gdGhpcy5fdHJhY2luZ0hlbHBlci5ydW5JbkNoaWxkU3BhbihzLG8pfV9yZXF1ZXN0KG4pe24ub3RlbFBhcmVudEN0eD10aGlzLl90cmFjaW5nSGVscGVyLmdldEFjdGl2ZUNvbnRleHQoKTtsZXQgaT1uLm1pZGRsZXdhcmVBcmdzTWFwcGVyPz9xZixvPXthcmdzOmkucmVxdWVzdEFyZ3NUb01pZGRsZXdhcmVBcmdzKG4uYXJncyksZGF0YVBhdGg6bi5kYXRhUGF0aCxydW5JblRyYW5zYWN0aW9uOiEhbi50cmFuc2FjdGlvbixhY3Rpb246bi5hY3Rpb24sbW9kZWw6bi5tb2RlbH0scz17bWlkZGxld2FyZTp7bmFtZTpcIm1pZGRsZXdhcmVcIixtaWRkbGV3YXJlOiEwLGF0dHJpYnV0ZXM6e21ldGhvZDpcIiR1c2VcIn0sYWN0aXZlOiExfSxvcGVyYXRpb246e25hbWU6XCJvcGVyYXRpb25cIixhdHRyaWJ1dGVzOnttZXRob2Q6by5hY3Rpb24sbW9kZWw6by5tb2RlbCxuYW1lOm8ubW9kZWw/YCR7by5tb2RlbH0uJHtvLmFjdGlvbn1gOm8uYWN0aW9ufX19LGE9LTEsbD1hc3luYyB1PT57bGV0IGM9dGhpcy5fbWlkZGxld2FyZXMuZ2V0KCsrYSk7aWYoYylyZXR1cm4gdGhpcy5fdHJhY2luZ0hlbHBlci5ydW5JbkNoaWxkU3BhbihzLm1pZGRsZXdhcmUsUz0+Yyh1LFA9PihTPy5lbmQoKSxsKFApKSkpO2xldHtydW5JblRyYW5zYWN0aW9uOnAsYXJnczpkLC4uLmZ9PXUsaD17Li4ubiwuLi5mfTtkJiYoaC5hcmdzPWkubWlkZGxld2FyZUFyZ3NUb1JlcXVlc3RBcmdzKGQpKSxuLnRyYW5zYWN0aW9uIT09dm9pZCAwJiZwPT09ITEmJmRlbGV0ZSBoLnRyYW5zYWN0aW9uO2xldCBnPWF3YWl0IG9sKHRoaXMsaCk7cmV0dXJuIGgubW9kZWw/ZWwoe3Jlc3VsdDpnLG1vZGVsTmFtZTpoLm1vZGVsLGFyZ3M6aC5hcmdzLGV4dGVuc2lvbnM6dGhpcy5fZXh0ZW5zaW9ucyxydW50aW1lRGF0YU1vZGVsOnRoaXMuX3J1bnRpbWVEYXRhTW9kZWwsZ2xvYmFsT21pdDp0aGlzLl9nbG9iYWxPbWl0fSk6Z307cmV0dXJuIHRoaXMuX3RyYWNpbmdIZWxwZXIucnVuSW5DaGlsZFNwYW4ocy5vcGVyYXRpb24sKCk9Pm5ldyBndS5Bc3luY1Jlc291cmNlKFwicHJpc21hLWNsaWVudC1yZXF1ZXN0XCIpLnJ1bkluQXN5bmNTY29wZSgoKT0+bChvKSkpfWFzeW5jIF9leGVjdXRlUmVxdWVzdCh7YXJnczpuLGNsaWVudE1ldGhvZDppLGRhdGFQYXRoOm8sY2FsbHNpdGU6cyxhY3Rpb246YSxtb2RlbDpsLGFyZ3NNYXBwZXI6dSx0cmFuc2FjdGlvbjpjLHVucGFja2VyOnAsb3RlbFBhcmVudEN0eDpkLGN1c3RvbURhdGFQcm94eUZldGNoOmZ9KXt0cnl7bj11P3Uobik6bjtsZXQgaD17bmFtZTpcInNlcmlhbGl6ZVwifSxnPXRoaXMuX3RyYWNpbmdIZWxwZXIucnVuSW5DaGlsZFNwYW4oaCwoKT0+TW4oe21vZGVsTmFtZTpsLHJ1bnRpbWVEYXRhTW9kZWw6dGhpcy5fcnVudGltZURhdGFNb2RlbCxhY3Rpb246YSxhcmdzOm4sY2xpZW50TWV0aG9kOmksY2FsbHNpdGU6cyxleHRlbnNpb25zOnRoaXMuX2V4dGVuc2lvbnMsZXJyb3JGb3JtYXQ6dGhpcy5fZXJyb3JGb3JtYXQsY2xpZW50VmVyc2lvbjp0aGlzLl9jbGllbnRWZXJzaW9uLHByZXZpZXdGZWF0dXJlczp0aGlzLl9wcmV2aWV3RmVhdHVyZXMsZ2xvYmFsT21pdDp0aGlzLl9nbG9iYWxPbWl0fSkpO3JldHVybiBOLmVuYWJsZWQoXCJwcmlzbWE6Y2xpZW50XCIpJiYocnIoXCJQcmlzbWEgQ2xpZW50IGNhbGw6XCIpLHJyKGBwcmlzbWEuJHtpfSgke3FhKG4pfSlgKSxycihcIkdlbmVyYXRlZCByZXF1ZXN0OlwiKSxycihKU09OLnN0cmluZ2lmeShnLG51bGwsMikrYFxuYCkpLGM/LmtpbmQ9PT1cImJhdGNoXCImJmF3YWl0IGMubG9jayx0aGlzLl9yZXF1ZXN0SGFuZGxlci5yZXF1ZXN0KHtwcm90b2NvbFF1ZXJ5OmcsbW9kZWxOYW1lOmwsYWN0aW9uOmEsY2xpZW50TWV0aG9kOmksZGF0YVBhdGg6byxjYWxsc2l0ZTpzLGFyZ3M6bixleHRlbnNpb25zOnRoaXMuX2V4dGVuc2lvbnMsdHJhbnNhY3Rpb246Yyx1bnBhY2tlcjpwLG90ZWxQYXJlbnRDdHg6ZCxvdGVsQ2hpbGRDdHg6dGhpcy5fdHJhY2luZ0hlbHBlci5nZXRBY3RpdmVDb250ZXh0KCksZ2xvYmFsT21pdDp0aGlzLl9nbG9iYWxPbWl0LGN1c3RvbURhdGFQcm94eUZldGNoOmZ9KX1jYXRjaChoKXt0aHJvdyBoLmNsaWVudFZlcnNpb249dGhpcy5fY2xpZW50VmVyc2lvbixofX0kbWV0cmljcz1uZXcgRnIodGhpcyk7X2hhc1ByZXZpZXdGbGFnKG4pe3JldHVybiEhdGhpcy5fZW5naW5lQ29uZmlnLnByZXZpZXdGZWF0dXJlcz8uaW5jbHVkZXMobil9JGFwcGx5UGVuZGluZ01pZ3JhdGlvbnMoKXtyZXR1cm4gdGhpcy5fZW5naW5lLmFwcGx5UGVuZGluZ01pZ3JhdGlvbnMoKX0kZXh0ZW5kcz16YX1yZXR1cm4gcn1mdW5jdGlvbiBtdShlLHIpe3JldHVybiBCZihlKT9bbmV3IG9lKGUsciksS2xdOltlLFlsXX1mdW5jdGlvbiBCZihlKXtyZXR1cm4gQXJyYXkuaXNBcnJheShlKSYmQXJyYXkuaXNBcnJheShlLnJhdyl9dmFyIFVmPW5ldyBTZXQoW1widG9KU09OXCIsXCIkJHR5cGVvZlwiLFwiYXN5bW1ldHJpY01hdGNoXCIsU3ltYm9sLml0ZXJhdG9yLFN5bWJvbC50b1N0cmluZ1RhZyxTeW1ib2wuaXNDb25jYXRTcHJlYWRhYmxlLFN5bWJvbC50b1ByaW1pdGl2ZV0pO2Z1bmN0aW9uIEV1KGUpe3JldHVybiBuZXcgUHJveHkoZSx7Z2V0KHIsdCl7aWYodCBpbiByKXJldHVybiByW3RdO2lmKCFVZi5oYXModCkpdGhyb3cgbmV3IFR5cGVFcnJvcihgSW52YWxpZCBlbnVtIHZhbHVlOiAke1N0cmluZyh0KX1gKX19KX1mdW5jdGlvbiB3dShlKXtzdChlLHtjb25mbGljdENoZWNrOlwid2FyblwifSl9MCYmKG1vZHVsZS5leHBvcnRzPXtETU1GLERlYnVnLERlY2ltYWwsRXh0ZW5zaW9ucyxNZXRyaWNzQ2xpZW50LFByaXNtYUNsaWVudEluaXRpYWxpemF0aW9uRXJyb3IsUHJpc21hQ2xpZW50S25vd25SZXF1ZXN0RXJyb3IsUHJpc21hQ2xpZW50UnVzdFBhbmljRXJyb3IsUHJpc21hQ2xpZW50VW5rbm93blJlcXVlc3RFcnJvcixQcmlzbWFDbGllbnRWYWxpZGF0aW9uRXJyb3IsUHVibGljLFNxbCxjcmVhdGVQYXJhbSxkZWZpbmVEbW1mUHJvcGVydHksZGVzZXJpYWxpemVKc29uUmVzcG9uc2UsZGVzZXJpYWxpemVSYXdSZXN1bHQsZG1tZlRvUnVudGltZURhdGFNb2RlbCxlbXB0eSxnZXRQcmlzbWFDbGllbnQsZ2V0UnVudGltZSxqb2luLG1ha2VTdHJpY3RFbnVtLG1ha2VUeXBlZFF1ZXJ5RmFjdG9yeSxvYmplY3RFbnVtVmFsdWVzLHJhdyxzZXJpYWxpemVKc29uUXVlcnksc2tpcCxzcWx0YWcsd2FybkVudkNvbmZsaWN0cyx3YXJuT25jZX0pO1xuLyohIEJ1bmRsZWQgbGljZW5zZSBpbmZvcm1hdGlvbjpcblxuZGVjaW1hbC5qcy9kZWNpbWFsLm1qczpcbiAgKCohXG4gICAqICBkZWNpbWFsLmpzIHYxMC41LjBcbiAgICogIEFuIGFyYml0cmFyeS1wcmVjaXNpb24gRGVjaW1hbCB0eXBlIGZvciBKYXZhU2NyaXB0LlxuICAgKiAgaHR0cHM6Ly9naXRodWIuY29tL01pa2VNY2wvZGVjaW1hbC5qc1xuICAgKiAgQ29weXJpZ2h0IChjKSAyMDI1IE1pY2hhZWwgTWNsYXVnaGxpbiA8TThjaDg4bEBnbWFpbC5jb20+XG4gICAqICBNSVQgTGljZW5jZVxuICAgKilcbiovXG4vLyMgc291cmNlTWFwcGluZ1VSTD1saWJyYXJ5LmpzLm1hcFxuIl0sIm5hbWVzIjpbInh1IiwiT2JqZWN0IiwiY3JlYXRlIiwiVnQiLCJkZWZpbmVQcm9wZXJ0eSIsInZ1IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiUHUiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiVHUiLCJnZXRQcm90b3R5cGVPZiIsIlN1IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJPbyIsImUiLCJyIiwibmUiLCJleHBvcnRzIiwidHIiLCJ0IiwiZ2V0IiwiZW51bWVyYWJsZSIsIl9vIiwibiIsImkiLCJjYWxsIiwiQyIsIl9fZXNNb2R1bGUiLCJ2YWx1ZSIsIlJ1IiwieWkiLCJGZyIsInNzIiwicHJvY2VzcyIsImFyZ3YiLCJzdGFydHNXaXRoIiwibGVuZ3RoIiwiaW5kZXhPZiIsInVzIiwiTWciLCJscyIsImpjIiwicmVxdWlyZSIsImFzIiwiZGUiLCJlbnYiLCJHIiwiUWUiLCJGT1JDRV9DT0xPUiIsIk1hdGgiLCJtaW4iLCJwYXJzZUludCIsImJpIiwibGV2ZWwiLCJoYXNCYXNpYyIsImhhczI1NiIsImhhczE2bSIsIkVpIiwiVEVSTSIsInBsYXRmb3JtIiwicmVsZWFzZSIsInNwbGl0IiwiTnVtYmVyIiwic29tZSIsIkNJX05BTUUiLCJ0ZXN0IiwiVEVBTUNJVFlfVkVSU0lPTiIsIkNPTE9SVEVSTSIsIlRFUk1fUFJPR1JBTV9WRVJTSU9OIiwiVEVSTV9QUk9HUkFNIiwiVmMiLCJpc1RUWSIsInN1cHBvcnRzQ29sb3IiLCJzdGRvdXQiLCJpc2F0dHkiLCJzdGRlcnIiLCJkcyIsIiRnIiwicHMiLCJCYyIsImJyIiwiY3MiLCJleGVjIiwibWFqb3IiLCJtaW5vciIsInBhdGNoIiwibWFwIiwid2kiLCJDSSIsIkZPUkNFX0hZUEVSTElOSyIsIk5FVExJRlkiLCJvIiwicyIsIlZURV9WRVJTSU9OIiwiYSIsImwiLCJ1Iiwic3VwcG9ydHNIeXBlcmxpbmsiLCJtcyIsInpnIiwiVWMiLCJuYW1lIiwidmVyc2lvbiIsImRlc2NyaXB0aW9uIiwibWFpbiIsInR5cGVzIiwicmVwb3NpdG9yeSIsInR5cGUiLCJ1cmwiLCJkaXJlY3RvcnkiLCJob21lcGFnZSIsImF1dGhvciIsImJ1Z3MiLCJsaWNlbnNlIiwic2NyaXB0cyIsImRldiIsImJ1aWxkIiwicHJlcHVibGlzaE9ubHkiLCJmaWxlcyIsImRldkRlcGVuZGVuY2llcyIsImFyY2hpdmVyIiwiZG90ZW52IiwiZXNidWlsZCIsImV4ZWNhIiwiZ2xvYmJ5IiwiamVzdCIsImtsZXVyIiwib3BlbiIsInJlc29sdmUiLCJ0ZW1weSIsInRtcCIsInR5cGVzY3JpcHQiLCJ5YXJuIiwiZGVwZW5kZW5jaWVzIiwiYXJnIiwicHJvbXB0cyIsInBlZXJEZXBlbmRlbmNpZXMiLCJwZWVyRGVwZW5kZW5jaWVzTWV0YSIsIm9wdGlvbmFsIiwic2lkZUVmZmVjdHMiLCJTaSIsImJoIiwiS2MiLCJwcmlzbWEiLCJlbmdpbmVzVmVyc2lvbiIsIm9uIiwibm4iLCJicyIsIk9oIiwieXMiLCJtYXRjaCIsInJlZHVjZSIsIkRpIiwiTGgiLCJ4cyIsImluZGVudCIsImluY2x1ZGVFbXB0eUxpbmVzIiwiVHlwZUVycm9yIiwicmVwbGFjZSIsInJlcGVhdCIsIlNzIiwiJGgiLCJUcyIsIm9ubHlGaXJzdCIsImpvaW4iLCJSZWdFeHAiLCJMaSIsInFoIiwiUnMiLCJvcCIsIkFzIiwiVWgiLCJzcCIsImRlZmF1bHQiLCJsaW50IiwicHJldGVzdCIsInByZXJlbGVhc2UiLCJmdW5kaW5nIiwia2V5d29yZHMiLCJyZWFkbWVGaWxlbmFtZSIsImRlY2FjaGUiLCJzaW5vbiIsInN0YW5kYXJkIiwidGFwIiwiZW5naW5lcyIsIm5vZGUiLCJicm93c2VyIiwiZnMiLCJPcyIsIkdoIiwiTGUiLCJNaSIsIiRpIiwiYXAiLCJscCIsInVwIiwiSXMiLCJjcCIsInBwIiwidG9TdHJpbmciLCJ0cmltIiwiZHAiLCJEcyIsIkIiLCJjb25maWdEb3RlbnYiLCJwYXRoIiwicGFyc2VkIiwiRXJyb3IiLCJjb2RlIiwia3MiLCJmcCIsImRlY3J5cHQiLCJjaXBoZXJ0ZXh0Iiwia2V5IiwicGFyc2UiLCJtcCIsImNvbnNvbGUiLCJsb2ciLCJvdCIsIkRPVEVOVl9LRVkiLCJVUkwiLCJwYXNzd29yZCIsInNlYXJjaFBhcmFtcyIsInRvVXBwZXJDYXNlIiwiQXJyYXkiLCJpc0FycmF5IiwiZXhpc3RzU3luYyIsImVuZHNXaXRoIiwiY3dkIiwiQ3MiLCJob21lZGlyIiwic2xpY2UiLCJncCIsImRlYnVnIiwiX3BhcnNlVmF1bHQiLCJwcm9jZXNzRW52IiwicG9wdWxhdGUiLCJocCIsImVuY29kaW5nIiwicHVzaCIsInJlYWRGaWxlU3luYyIsIm1lc3NhZ2UiLCJlcnJvciIsInlwIiwiX2NvbmZpZ1ZhdWx0IiwiYnAiLCJCdWZmZXIiLCJmcm9tIiwic3ViYXJyYXkiLCJjcmVhdGVEZWNpcGhlcml2Iiwic2V0QXV0aFRhZyIsInVwZGF0ZSIsImZpbmFsIiwiUmFuZ2VFcnJvciIsImMiLCJFcCIsIm92ZXJyaWRlIiwia2V5cyIsImNvbmZpZyIsIkZzIiwiWWgiLCJjbiIsInJlcG9VcmwiLCJ1c2VyIiwicmVwbyIsInNldCIsIktpIiwiQWIiLCJvYSIsImNoYXJDb2RlQXQiLCJwIiwiZCIsImYiLCJoIiwiZyIsIlMiLCJQIiwiUiIsImIiLCJEIiwibWUiLCJjYSIsInBhIiwiR2YiLCJETU1GIiwiY3QiLCJEZWJ1ZyIsIk4iLCJEZWNpbWFsIiwidmUiLCJFeHRlbnNpb25zIiwiaWkiLCJNZXRyaWNzQ2xpZW50IiwiRnIiLCJQcmlzbWFDbGllbnRJbml0aWFsaXphdGlvbkVycm9yIiwiVCIsIlByaXNtYUNsaWVudEtub3duUmVxdWVzdEVycm9yIiwieiIsIlByaXNtYUNsaWVudFJ1c3RQYW5pY0Vycm9yIiwibGUiLCJQcmlzbWFDbGllbnRVbmtub3duUmVxdWVzdEVycm9yIiwiaiIsIlByaXNtYUNsaWVudFZhbGlkYXRpb25FcnJvciIsIloiLCJQdWJsaWMiLCJvaSIsIlNxbCIsIm9lIiwiY3JlYXRlUGFyYW0iLCJBYSIsImRlZmluZURtbWZQcm9wZXJ0eSIsIl9hIiwiZGVzZXJpYWxpemVKc29uUmVzcG9uc2UiLCJUciIsImRlc2VyaWFsaXplUmF3UmVzdWx0IiwiZWkiLCJkbW1mVG9SdW50aW1lRGF0YU1vZGVsIiwiWHMiLCJlbXB0eSIsIkZhIiwiZ2V0UHJpc21hQ2xpZW50IiwiYnUiLCJnZXRSdW50aW1lIiwiR24iLCJMYSIsIm1ha2VTdHJpY3RFbnVtIiwiRXUiLCJtYWtlVHlwZWRRdWVyeUZhY3RvcnkiLCJOYSIsIm9iamVjdEVudW1WYWx1ZXMiLCJrbiIsInJhdyIsImlvIiwic2VyaWFsaXplSnNvblF1ZXJ5IiwiTW4iLCJza2lwIiwiRm4iLCJzcWx0YWciLCJvbyIsIndhcm5FbnZDb25mbGljdHMiLCJ3dSIsIndhcm5PbmNlIiwiYXQiLCJtb2R1bGUiLCJkZWZpbmVFeHRlbnNpb24iLCJObyIsImdldEV4dGVuc2lvbkNvbnRleHQiLCJMbyIsIiRleHRlbmRzIiwidmFsaWRhdG9yIiwiRm8iLCJCdCIsIiQiLCJWbyIsImJnQmxhY2siLCJGdSIsImJnQmx1ZSIsImp1IiwiYmdDeWFuIiwiQnUiLCJiZ0dyZWVuIiwiJHUiLCJiZ01hZ2VudGEiLCJWdSIsImJnUmVkIiwiTXUiLCJiZ1doaXRlIiwiVXUiLCJiZ1llbGxvdyIsInF1IiwiYmxhY2siLCJPdSIsImJsdWUiLCJuciIsImJvbGQiLCJXIiwiY3lhbiIsIkRlIiwiZGltIiwiSWUiLCJncmF5IiwiS3IiLCJncmVlbiIsInFlIiwiZ3JleSIsIkx1IiwiaGlkZGVuIiwia3UiLCJpbnZlcnNlIiwiSXUiLCJpdGFsaWMiLCJDdSIsIm1hZ2VudGEiLCJfdSIsInJlZCIsImNlIiwicmVzZXQiLCJBdSIsInN0cmlrZXRocm91Z2giLCJEdSIsInVuZGVybGluZSIsIlkiLCJ3aGl0ZSIsIk51IiwieWVsbG93Iiwia2UiLCJzaSIsIk1vIiwiJG8iLCJxbyIsImpvIiwiTk9ERV9ESVNBQkxFX0NPTE9SUyIsIk5PX0NPTE9SIiwiZW5hYmxlZCIsIkYiLCJHdSIsIkJvIiwiWXIiLCJVbyIsIkRhdGUiLCJub3ciLCJRdSIsImFpIiwiZ2xvYmFsVGhpcyIsIkRFQlVHIiwiREVCVUdfQ09MT1JTIiwienIiLCJlbmFibGUiLCJkaXNhYmxlIiwid2FybiIsImZvcm1hdHRlcnMiLCJXdSIsImNvbG9yIiwibmFtZXNwYWNlIiwiZXh0ZW5kIiwic2hpZnQiLCJKdSIsIlByb3h5IiwiU2V0IiwiSlNPTiIsInN0cmluZ2lmeSIsImhhcyIsImFkZCIsIkdvIiwiUW8iLCJnciIsIldvIiwibGkiLCJQUklTTUFfUVVFUllfRU5HSU5FX0xJQlJBUlkiLCJhcmNoIiwidWkiLCJVdCIsIkd0IiwiaW5jbHVkZXMiLCJZbyIsImZpIiwiS3QiLCJPZSIsIlN5bWJvbCIsImZvciIsIkh1IiwiV3QiLCJjaSIsIlF0IiwiRWUiLCJtYXRjaGVkIiwic2VsZWN0aW9ucyIsImZvckVhY2giLCJldmVyeSIsIlJlZmxlY3QiLCJvd25LZXlzIiwibWF0Y2hlclR5cGUiLCJpcyIsIkdlIiwiZ2V0U2VsZWN0aW9uS2V5cyIsIlpyIiwidmFsdWVzIiwiY29uY2F0IiwicGUiLCJhc3NpZ24iLCJLdSIsImFuZCIsInEiLCJvciIsIll1Iiwic2VsZWN0IiwiSm8iLCJJIiwieWUiLCJqZSIsIlZlIiwibmciLCJCZSIsIm1pbkxlbmd0aCIsIm1heExlbmd0aCIsInJlZ2V4IiwiaWciLCJiZSIsImJldHdlZW4iLCJsdCIsImd0IiwibHRlIiwiZ3RlIiwiaW50IiwiaXNJbnRlZ2VyIiwiZmluaXRlIiwiaXNGaW5pdGUiLCJwb3NpdGl2ZSIsIm5lZ2F0aXZlIiwib2ciLCJVZSIsInNnIiwiYWciLCJsZyIsInVnIiwiY2ciLCJwaSIsImNvbnN0cnVjdG9yIiwiaW5wdXQiLCJkaSIsImhyIiwibWkiLCJzdGF0ZSIsIndpdGgiLCJ3aGVuIiwib3RoZXJ3aXNlIiwiZXhoYXVzdGl2ZSIsInJ1biIsInJldHVyblR5cGUiLCJ6byIsInp1IiwiWnUiLCJQUklTTUFfRElTQUJMRV9XQVJOSU5HUyIsIkp0IiwiWHUiLCJwcm9taXNpZnkiLCJlZSIsImVjIiwiWm8iLCJZdCIsInRhcmdldERpc3RybyIsInRjIiwiY2MiLCJpYyIsImFyY2hGcm9tVW5hbWUiLCJmYW1pbHlEaXN0cm8iLCJsaWJzc2wiLCJvYyIsInJjIiwidG9Mb3dlckNhc2UiLCJpZCIsImlkTGlrZSIsIm9yaWdpbmFsRGlzdHJvIiwicmVhZEZpbGUiLCJuYyIsIlhvIiwiSG8iLCJycyIsIktvIiwic3RyYXRlZ3kiLCJzYyIsInJlYWRkaXIiLCJmaW5kIiwiaXIiLCJiaW5hcnlUYXJnZXQiLCJlcyIsImFjIiwiZ2kiLCJtZW1vaXplZCIsIkh0IiwiUHJvbWlzZSIsImxjIiwidWMiLCJtYWNoaW5lIiwiWHQiLCJiZWVwIiwiRmMiLCJjbGVhclNjcmVlbiIsIk9jIiwiY2xlYXJUZXJtaW5hbCIsIl9jIiwiY3Vyc29yQmFja3dhcmQiLCJ5YyIsImN1cnNvckRvd24iLCJnYyIsImN1cnNvckZvcndhcmQiLCJoYyIsImN1cnNvckdldFBvc2l0aW9uIiwid2MiLCJjdXJzb3JIaWRlIiwiUGMiLCJjdXJzb3JMZWZ0IiwiY3Vyc29yTW92ZSIsImZjIiwiY3Vyc29yTmV4dExpbmUiLCJ4YyIsImN1cnNvclByZXZMaW5lIiwidmMiLCJjdXJzb3JSZXN0b3JlUG9zaXRpb24iLCJFYyIsImN1cnNvclNhdmVQb3NpdGlvbiIsImJjIiwiY3Vyc29yU2hvdyIsIlRjIiwiY3Vyc29yVG8iLCJtYyIsImN1cnNvclVwIiwibnMiLCJlbnRlckFsdGVybmF0aXZlU2NyZWVuIiwiTmMiLCJlcmFzZURvd24iLCJDYyIsImVyYXNlRW5kTGluZSIsIlJjIiwiZXJhc2VMaW5lIiwib3MiLCJlcmFzZUxpbmVzIiwiU2MiLCJlcmFzZVNjcmVlbiIsImhpIiwiZXJhc2VTdGFydExpbmUiLCJBYyIsImVyYXNlVXAiLCJJYyIsImV4aXRBbHRlcm5hdGl2ZVNjcmVlbiIsIkxjIiwiaVRlcm0iLCJxYyIsImltYWdlIiwiJGMiLCJsaW5rIiwiTWMiLCJzY3JvbGxEb3duIiwiRGMiLCJzY3JvbGxVcCIsImtjIiwiWnQiLCJ6dCIsIndpbmRvdyIsImRvY3VtZW50IiwiYmciLCJ2ZXJzaW9ucyIsIkVnIiwiYnVuIiwid2ciLCJEZW5vIiwiZGVubyIsInhnIiwiZWxlY3Ryb24iLCJ2ZyIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsIlBnIiwiV29ya2VyR2xvYmFsU2NvcGUiLCJUZyIsIkRlZGljYXRlZFdvcmtlckdsb2JhbFNjb3BlIiwiU2ciLCJTaGFyZWRXb3JrZXJHbG9iYWxTY29wZSIsIlJnIiwiU2VydmljZVdvcmtlckdsb2JhbFNjb3BlIiwiWHIiLCJ1c2VyQWdlbnREYXRhIiwiQWciLCJDZyIsIklnIiwia2ciLCJtYXhUb3VjaFBvaW50cyIsIkRnIiwiayIsInJ0IiwieXIiLCJldCIsInRzIiwicGMiLCJkYyIsIndpZHRoIiwiaGVpZ2h0IiwicHJlc2VydmVBc3BlY3RSYXRpbyIsInNldEN3ZCIsImFubm90YXRpb24iLCJ4IiwieSIsInJlcGxhY2VBbGwiLCJpc0hpZGRlbiIsImVuIiwidGFyZ2V0IiwiZmFsbGJhY2siLCJpc1N1cHBvcnRlZCIsInhpIiwiR2MiLCJ2aSIsIkVyIiwiUWMiLCJlbmdpbmVUeXBlIiwiV2MiLCJQUklTTUFfQ0xJRU5UX0VOR0lORV9UWVBFIiwicHJldmlld0ZlYXR1cmVzIiwiUGkiLCJjYXVzZSIsInJuIiwib2siLCJmbGF0TWFwIiwic3IiLCJUaSIsImNvbnN1bWVFcnJvciIsInJlZ2lzdGVyZWRFcnJvcnMiLCJyZWdpc3Rlck5ld0Vycm9yIiwidG4iLCJhZGFwdGVyTmFtZSIsImVycm9yUmVnaXN0cnkiLCJxdWVyeVJhdyIsIl9lIiwiYmluZCIsImV4ZWN1dGVSYXciLCJleGVjdXRlU2NyaXB0IiwiZGlzcG9zZSIsInByb3ZpZGVyIiwic3RhcnRUcmFuc2FjdGlvbiIsIkpjIiwiZ2V0Q29ubmVjdGlvbkluZm8iLCJIYyIsIm9wdGlvbnMiLCJjb21taXQiLCJyb2xsYmFjayIsImtpbmQiLCJZYyIsIk0iLCJ6YyIsIlBoIiwiZ3MiLCJfX2Rpcm5hbWUiLCJUaCIsIlJpIiwiaHMiLCJBaSIsInN0YXRTeW5jIiwibW9kZSIsImNobW9kU3luYyIsIkNpIiwicGxhdGZvcm1JbmZvIiwiRXMiLCJJaSIsIndzIiwic24iLCJhbiIsImtpIiwiaG9zdCIsInZzIiwiX2kiLCJTdHJpbmciLCJPaSIsImZyb21FbnZWYXIiLCJiaW5hcnlUYXJnZXRzIiwiWmMiLCJYYyIsIm5hdGl2ZSIsIm1heCIsImVudHJpZXMiLCJwYWRFbmQiLCJlcCIsIm50IiwibnAiLCJpbmZvIiwidHAiLCJycCIsInF1ZXJ5IiwiaXAiLCJzaG91bGQiLCJQcyIsInRhZ3MiLCJ0dCIsIk5pIiwibG4iLCJOZSIsIml0IiwiRmkiLCJzZXAiLCJwb3NpeCIsImppIiwidW4iLCJ3ciIsIl9zIiwiaWdub3JlUHJvY2Vzc0VudiIsInN1YnN0cmluZyIsInFpIiwic3QiLCJyb290RW52UGF0aCIsInNjaGVtYUVudlBhdGgiLCJjb25mbGljdENoZWNrIiwiTnMiLCJ3cCIsIkxzIiwiZG90ZW52UmVzdWx0IiwiZmlsdGVyIiwiQm9vbGVhbiIsInJlbGF0aXZlIiwieHAiLCJET1RFTlZfQ09ORklHX0RFQlVHIiwiVmkiLCJ4ciIsIkJpIiwiY29uZmlndXJhYmxlIiwiTXMiLCJjbGllbnRWZXJzaW9uIiwiZXJyb3JDb2RlIiwiY2FwdHVyZVN0YWNrVHJhY2UiLCJ0b1N0cmluZ1RhZyIsIm1ldGEiLCJiYXRjaFJlcXVlc3RJZHgiLCJ3cml0YWJsZSIsInZyIiwiS2UiLCJVaSIsImZuIiwiZ24iLCJHaSIsInByZWNpc2lvbiIsInJvdW5kaW5nIiwibW9kdWxvIiwidG9FeHBOZWciLCJ0b0V4cFBvcyIsIm1pbkUiLCJtYXhFIiwiY3J5cHRvIiwiVnMiLCJGZSIsInciLCJ5biIsIkhlIiwiQnMiLCJVcyIsIkdzIiwiWCIsImZsb29yIiwiVSIsInBvdyIsInZwIiwiUHAiLCJUcCIsIlFzIiwiZmUiLCJFIiwiU3AiLCJScCIsIlFpIiwibSIsImFic29sdXRlVmFsdWUiLCJhYnMiLCJjZWlsIiwiY2xhbXBlZFRvIiwiY2xhbXAiLCJOYU4iLCJjbXAiLCJjb21wYXJlZFRvIiwiY29zaW5lIiwiY29zIiwic2QiLCJBcCIsIllzIiwibmVnIiwiY3ViZVJvb3QiLCJjYnJ0IiwiaXNaZXJvIiwiSiIsInRvRXhwb25lbnRpYWwiLCJ0aW1lcyIsInBsdXMiLCJMIiwiZXEiLCJjaGFyQXQiLCJkZWNpbWFsUGxhY2VzIiwiZGl2aWRlZEJ5IiwiZGl2IiwiZGl2aWRlZFRvSW50ZWdlckJ5IiwiZGl2VG9JbnQiLCJlcXVhbHMiLCJncmVhdGVyVGhhbiIsImdyZWF0ZXJUaGFuT3JFcXVhbFRvIiwiaHlwZXJib2xpY0Nvc2luZSIsImNvc2giLCJFbiIsIlByIiwibWludXMiLCJoeXBlcmJvbGljU2luZSIsInNpbmgiLCJzcXJ0IiwiaHlwZXJib2xpY1RhbmdlbnQiLCJ0YW5oIiwiaW52ZXJzZUNvc2luZSIsImFjb3MiLCJpc05lZyIsIndlIiwiYXRhbiIsImludmVyc2VIeXBlcmJvbGljQ29zaW5lIiwiYWNvc2giLCJpbnZlcnNlSHlwZXJib2xpY1NpbmUiLCJhc2luaCIsImludmVyc2VIeXBlcmJvbGljVGFuZ2VudCIsImF0YW5oIiwiaW52ZXJzZVNpbmUiLCJhc2luIiwiaW52ZXJzZVRhbmdlbnQiLCJpc0ludCIsImlzTmFOIiwiaXNOZWdhdGl2ZSIsImlzUG9zaXRpdmUiLCJpc1BvcyIsImxlc3NUaGFuIiwibGVzc1RoYW5PckVxdWFsVG8iLCJsb2dhcml0aG0iLCJKZSIsImhuIiwic3ViIiwicmV2ZXJzZSIsInBvcCIsImJuIiwibW9kIiwibmF0dXJhbEV4cG9uZW50aWFsIiwiZXhwIiwiV2kiLCJuYXR1cmFsTG9nYXJpdGhtIiwibmVnYXRlZCIsInVuc2hpZnQiLCJXcyIsInJvdW5kIiwic2luZSIsInNpbiIsIklwIiwic3F1YXJlUm9vdCIsInRhbmdlbnQiLCJ0YW4iLCJtdWwiLCJ0b0JpbmFyeSIsIkppIiwidG9EZWNpbWFsUGxhY2VzIiwidG9EUCIsImllIiwieGUiLCJ0b0ZpeGVkIiwidG9GcmFjdGlvbiIsInRvSGV4YWRlY2ltYWwiLCJ0b0hleCIsInRvTmVhcmVzdCIsInRvTnVtYmVyIiwidG9PY3RhbCIsInRvUG93ZXIiLCJKcyIsIkxOMTAiLCJ0b1ByZWNpc2lvbiIsInRvU2lnbmlmaWNhbnREaWdpdHMiLCJ0b1NEIiwidHJ1bmNhdGVkIiwidHJ1bmMiLCJ2YWx1ZU9mIiwidG9KU09OIiwiV2UiLCJkbiIsImFlIiwiSHIiLCJWIiwidGUiLCJDZSIsIkgiLCJmciIsImp0IiwibmkiLCJLIiwiXyIsIktzIiwicXMiLCIkcyIsIkhzIiwibW4iLCJzZWFyY2giLCJDcCIsImFyIiwia3AiLCJEcCIsIk9wIiwiX3AiLCJOcCIsIkxwIiwiRnAiLCJNcCIsIiRwIiwicXAiLCJqcCIsIlZwIiwiQnAiLCJkZWZhdWx0cyIsImdldFJhbmRvbVZhbHVlcyIsInJhbmRvbUJ5dGVzIiwiVXAiLCJHcCIsInpzIiwianMiLCJST1VORF9VUCIsIlJPVU5EX0RPV04iLCJST1VORF9DRUlMIiwiUk9VTkRfRkxPT1IiLCJST1VORF9IQUxGX1VQIiwiUk9VTkRfSEFMRl9ET1dOIiwiUk9VTkRfSEFMRl9FVkVOIiwiUk9VTkRfSEFMRl9DRUlMIiwiUk9VTkRfSEFMRl9GTE9PUiIsIkVVQ0xJRCIsImNsb25lIiwiaXNEZWNpbWFsIiwiYXRhbjIiLCJRcCIsIldwIiwiSnAiLCJoeXBvdCIsIkhwIiwiS3AiLCJZcCIsImxvZzEwIiwiWnAiLCJsb2cyIiwienAiLCJYcCIsImVkIiwicmQiLCJ0ZCIsIm5kIiwicmFuZG9tIiwib2QiLCJzaWduIiwiYWQiLCJsZCIsInVkIiwiY2QiLCJzdW0iLCJwZCIsImRkIiwibWQiLCJmZCIsImFyZ3VtZW50cyIsIlVpbnQzMkFycmF5IiwiY29weSIsImdkIiwiaGQiLCIkdHlwZSIsIkJpZ0ludCIsImJ1ZmZlciIsImJ5dGVPZmZzZXQiLCJieXRlTGVuZ3RoIiwiVWludDhBcnJheSIsIlBlIiwiX21hcCIsImdldE9yQ3JlYXRlIiwiTWFwIiwiWWUiLCJacyIsInV0IiwibW9kZWxzIiwiSGkiLCJlbnVtcyIsIlNyIiwid24iLCJSciIsIk1vZGVsQWN0aW9uIiwiQXIiLCJkYXRhbW9kZWxFbnVtVG9TY2hlbWFFbnVtIiwieWQiLCJmaW5kVW5pcXVlIiwiZmluZFVuaXF1ZU9yVGhyb3ciLCJmaW5kRmlyc3QiLCJmaW5kRmlyc3RPclRocm93IiwiZmluZE1hbnkiLCJjcmVhdGVNYW55IiwiY3JlYXRlTWFueUFuZFJldHVybiIsInVwZGF0ZU1hbnkiLCJ1cGRhdGVNYW55QW5kUmV0dXJuIiwidXBzZXJ0IiwiZGVsZXRlIiwiZGVsZXRlTWFueSIsImdyb3VwQnkiLCJjb3VudCIsImFnZ3JlZ2F0ZSIsImZpbmRSYXciLCJhZ2dyZWdhdGVSYXciLCJpYSIsIm5hIiwiZWEiLCJrZXl3b3JkIiwiZW50aXR5IiwicHVuY3R1YXRpb24iLCJkaXJlY3RpdmUiLCJmdW5jdGlvbiIsInZhcmlhYmxlIiwic3RyaW5nIiwiYm9vbGVhbiIsIm51bWJlciIsImNvbW1lbnQiLCJiZCIsInhuIiwiRWQiLCJ2IiwibWFudWFsIiwiUHJpc20iLCJkaXNhYmxlV29ya2VyTWVzc2FnZUhhbmRsZXIiLCJ1dGlsIiwiZW5jb2RlIiwiZ2UiLCJjb250ZW50IiwiYWxpYXMiLCJvYmpJZCIsIl9faWQiLCJsYW5ndWFnZXMiLCJpbnNlcnRCZWZvcmUiLCJERlMiLCJwbHVnaW5zIiwiaGlnaGxpZ2h0IiwiZ3JhbW1hciIsImxhbmd1YWdlIiwiaG9va3MiLCJ0b2tlbnMiLCJ0b2tlbml6ZSIsIm1hdGNoR3JhbW1hciIsImluc2lkZSIsImxvb2tiZWhpbmQiLCJncmVlZHkiLCJwYXR0ZXJuIiwiZ2xvYmFsIiwic291cmNlIiwibGFzdEluZGV4IiwiaW5kZXgiLCJzcGxpY2UiLCJhcHBseSIsInJlc3QiLCJhbGwiLCJUb2tlbiIsImNsaWtlIiwib3BlcmF0b3IiLCJqYXZhc2NyaXB0IiwicGFyYW1ldGVyIiwiY29uc3RhbnQiLCJtYXJrdXAiLCJ0YWciLCJhZGRJbmxpbmVkIiwiYnVpbHRpbiIsIndkIiwicmEiLCJ4ZCIsInRhIiwidm4iLCJyZWFkIiwiZnJvbUNvbnRlbnQiLCJmaXJzdExpbmVOdW1iZXIiLCJsaW5lcyIsImxhc3RMaW5lTnVtYmVyIiwibWFwTGluZUF0IiwibWFwTGluZXMiLCJsaW5lQXQiLCJwcmVwZW5kU3ltYm9sQXQiLCJ2ZCIsImhpZ2hsaWdodFNvdXJjZSIsIlBkIiwiVGQiLCJvcmlnaW5hbE1ldGhvZCIsImlzUGFuaWMiLCJjYWxsQXJndW1lbnRzIiwiZnVuY3Rpb25OYW1lIiwiU2QiLCJjYWxsc2l0ZSIsImdldExvY2F0aW9uIiwibGluZU51bWJlciIsImNvbHVtbk51bWJlciIsImZpbGVOYW1lIiwiQWQiLCJSZCIsImxvY2F0aW9uIiwib3BlbmluZ0JyYWNlSW5kZXgiLCJjb250ZXh0TGluZXMiLCJwYWRTdGFydCIsImxhc3RJbmRleE9mIiwiQ2QiLCJJZCIsIlBuIiwic2hvd0NvbG9ycyIsIm1hIiwibGEiLCJ1YSIsImtkIiwiT2QiLCJUbiIsImFkZEVycm9yTWVzc2FnZSIsImVycm9ycyIsInNlbGVjdGlvblBhdGgiLCJhcmd1bWVudFBhdGgiLCJhcmd1bWVudCIsInR5cGVOYW1lcyIsIkRkIiwic2EiLCJhYSIsInVlIiwiaXNSZXF1aXJlZCIsIm1ha2VSZXF1aXJlZCIsIndyaXRlIiwiY29sb3JzIiwiY29udGV4dCIsImFkZE1hcmdpblN5bWJvbCIsIkNyIiwiY3VycmVudExpbmUiLCJjdXJyZW50SW5kZW50Iiwid3JpdGVKb2luZWQiLCJ3cml0ZUxpbmUiLCJuZXdMaW5lIiwiaW5kZW50ZWRDdXJyZW50TGluZSIsIm1hcmdpblN5bWJvbCIsImFmdGVyTmV4dE5ld0xpbmVDYWxsYmFjayIsIndpdGhJbmRlbnQiLCJ1bmluZGVudCIsImFmdGVyTmV4dE5ld2xpbmUiLCJnZXRDdXJyZW50TGluZUxlbmd0aCIsIlNuIiwibWFya0FzRXJyb3IiLCJSbiIsIkFuIiwiZGEiLCJJciIsIlRlIiwiaXNVbmRlcmxpbmVkIiwiY29udGVudHMiLCJzZXRDb2xvciIsInplIiwiaGFzRXJyb3IiLCJrciIsImFkZEl0ZW0iLCJpdGVtcyIsImdldEZpZWxkIiwiZ2V0UHJpbnRXaWR0aCIsIndyaXRlRW1wdHkiLCJ3cml0ZVdpdGhJdGVtcyIsImFzT2JqZWN0IiwiRHIiLCJhZGRGaWVsZCIsImZpZWxkcyIsImFkZFN1Z2dlc3Rpb24iLCJzdWdnZXN0aW9ucyIsImdldERlZXBGaWVsZCIsImdldERlZXBGaWVsZFZhbHVlIiwiaGFzRmllbGQiLCJyZW1vdmVBbGxGaWVsZHMiLCJyZW1vdmVGaWVsZCIsImdldEZpZWxkcyIsImlzRW1wdHkiLCJnZXRGaWVsZFZhbHVlIiwiZ2V0RGVlcFN1YlNlbGVjdGlvblZhbHVlIiwiZ2V0U3ViU2VsZWN0aW9uVmFsdWUiLCJnZXREZWVwU2VsZWN0aW9uUGFyZW50IiwiZ2V0U2VsZWN0aW9uUGFyZW50Iiwid3JpdGVXaXRoQ29udGVudHMiLCJRIiwidGV4dCIsInB0IiwiX2QiLCJOZCIsIkxkIiwicWQiLCJqZCIsIlZkIiwiQmQiLCJVZCIsIkdkIiwiUWQiLCJXZCIsIkpkIiwiSGQiLCJmaXJzdEZpZWxkIiwic2Vjb25kRmllbGQiLCJPciIsIm91dHB1dFR5cGUiLCJpc1JlbGF0aW9uIiwiZHQiLCJGZCIsIk1kIiwiJGQiLCJoYSIsInlhIiwicGFyZW50S2luZCIsImZpZWxkIiwicGFyZW50IiwiS2QiLCJZZCIsImZpZWxkTmFtZSIsInVuZGVybHlpbmdFcnJvciIsInpkIiwiZmEiLCJiYSIsImlucHV0VHlwZSIsIlhkIiwiaW5wdXRUeXBlcyIsImdhIiwiZGVwZW5kZW50QXJndW1lbnRQYXRoIiwiZWxlbWVudFR5cGUiLCJDbiIsImluZmVycmVkVHlwZSIsImNvbnN0cmFpbnRzIiwibWluRmllbGRDb3VudCIsInJlcXVpcmVkRmllbGRzIiwibWF4RmllbGRDb3VudCIsIlpkIiwibXQiLCJtb2RlbE5hbWUiLCJ0eXBlTmFtZSIsImlzTGlzdCIsImlzRW51bSIsIl90b0dyYXBoUUxJbnB1dFR5cGUiLCJfciIsIkluIiwiemkiLCJXZWFrTWFwIiwiTWUiLCJfZ2V0TmFtZSIsIl9nZXROYW1lc3BhY2UiLCJmdCIsIlppIiwiaHQiLCJ5dCIsImNsYXNzZXMiLCJEYk51bGwiLCJKc29uTnVsbCIsIkFueU51bGwiLCJpbnN0YW5jZXMiLCJFYSIsIkRuIiwiWGkiLCJlcnJvck1lc3NhZ2VzIiwicmVuZGVyQWxsTWVzc2FnZXMiLCJOciIsIndhIiwieGEiLCJpc0J1ZmZlciIsInRvSVNPU3RyaW5nIiwiZW0iLCJPbiIsImFyZ3MiLCJfbiIsImVycm9yRm9ybWF0IiwiZ2xvYmFsT21pdCIsIlNlIiwiUGEiLCJyZXN1bHQiLCIkYWxsTW9kZWxzIiwicm0iLCJ2YSIsIm5lZWRzIiwiY29tcHV0ZSIsInRtIiwiVGEiLCJTYSIsIk5uIiwiY29tcHV0ZWRGaWVsZHNDYWNoZSIsIm1vZGVsRXh0ZW5zaW9uc0NhY2hlIiwicXVlcnlDYWxsYmFja3NDYWNoZSIsImNsaWVudEV4dGVuc2lvbnMiLCJleHRlbnNpb24iLCJjbGllbnQiLCJwcmV2aW91cyIsImdldEFsbENsaWVudEV4dGVuc2lvbnMiLCJiYXRjaENhbGxiYWNrcyIsImdldEFsbEJhdGNoUXVlcnlDYWxsYmFja3MiLCIkX19pbnRlcm5hbEJhdGNoIiwiZ2V0QWxsQ29tcHV0ZWRGaWVsZHMiLCJnZXRBbGxNb2RlbEV4dGVuc2lvbnMiLCJtb2RlbCIsImdldEFsbFF1ZXJ5Q2FsbGJhY2tzIiwiJGFsbE9wZXJhdGlvbnMiLCJMciIsImhlYWQiLCJzaW5nbGUiLCJhcHBlbmQiLCJMbiIsIlJhIiwiQ2EiLCJidCIsImlmVW5kZWZpbmVkIiwiUmUiLCJubSIsInJ1bkNvbW1hbmRSYXciLCJJYSIsImFjdGlvbiIsInJ1bnRpbWVEYXRhTW9kZWwiLCJleHRlbnNpb25zIiwiY2xpZW50TWV0aG9kIiwiZW8iLCJyb290QXJncyIsIkV0IiwiaW5jbHVkZSIsIm9taXQiLCJEYSIsInNlbGVjdGlvbiIsImltIiwidGhyb3dWYWxpZGF0aW9uRXJyb3IiLCJnZXRTZWxlY3Rpb25QYXRoIiwibG0iLCJvbSIsIm1vZGVsT3JUeXBlIiwiaXNSYXdBY3Rpb24iLCIkY29tcG9zaXRlcyIsIiRzY2FsYXJzIiwic20iLCJhbSIsIm5lc3RTZWxlY3Rpb24iLCJybyIsImZpbmRGaWVsZCIsImdldE91dHB1dFR5cGVEZXNjcmlwdGlvbiIsImdldENvbXB1dGVkRmllbGRzIiwiZ2V0R2xvYmFsT21pdCIsImthIiwiZ2V0QXJndW1lbnRQYXRoIiwiZ2V0QXJndW1lbnROYW1lIiwiX3JlZiIsIl9jb250YWluZXIiLCJ1bSIsIkFycmF5QnVmZmVyIiwiaXNWaWV3IiwiY20iLCJwbSIsIm5lc3RBcmd1bWVudCIsImlzUHJldmlld0ZlYXR1cmVPbiIsIl9fcHJpc21hUmF3UGFyYW1ldGVyc19fIiwicGFyYW1zIiwic2hvdWxkQXBwbHlHbG9iYWxPbWl0IiwiT2EiLCJfaGFzUHJldmlld0ZsYWciLCJfY2xpZW50VmVyc2lvbiIsIl9jbGllbnQiLCJwcm9tZXRoZXVzIiwiX2VuZ2luZSIsIm1ldHJpY3MiLCJmb3JtYXQiLCJqc29uIiwiZG0iLCJkYXRhbW9kZWwiLCJ0byIsIm5vIiwiJG4iLCJ3dCIsInNxbCIsInFuIiwiZnUiLCJndSIsImh1IiwieXUiLCJ0aSIsInN0cmluZ3MiLCJzdGF0ZW1lbnQiLCJpbnNwZWN0IiwiZmlsbCIsInh0IiwiZ2V0S2V5cyIsImdldFByb3BlcnR5VmFsdWUiLCJyZSIsImxyIiwiZ2V0UHJvcGVydHlEZXNjcmlwdG9yIiwiam4iLCJWbiIsIk1hIiwiaGUiLCJtbSIsIiRhIiwiTXIiLCIkciIsImJhdGNoIiwidHJhbnNhY3Rpb24iLCJpc29sYXRpb25MZXZlbCIsInFhIiwiZm0iLCJxciIsInVzZXJfZmFjaW5nX2Vycm9yIiwiZXJyb3JfY29kZSIsImdtIiwiYmF0Y2hfcmVxdWVzdF9pZHgiLCJ2dCIsImphIiwiYm0iLCJ3bSIsIlBtIiwiQW0iLCJTbSIsImhtIiwieW0iLCJmaWxlIiwibWV0aG9kTmFtZSIsImNvbHVtbiIsIkVtIiwieG0iLCJ2bSIsIlRtIiwiUm0iLCJzbyIsImFvIiwiX2Vycm9yIiwic3RhY2siLCJaZSIsIiRFbmFibGVkQ2FsbFNpdGUiLCJWYSIsIl9hdmciLCJfY291bnQiLCJfc3VtIiwiX21pbiIsIl9tYXgiLCJqciIsIkltIiwiX2FsbCIsIkJuIiwiQmEiLCJ1bnBhY2tlciIsImFyZ3NNYXBwZXIiLCJrbSIsIkRtIiwiVWEiLCJPbSIsImJ5IiwiX20iLCJHYSIsIlFhIiwiV2EiLCJyZWxhdGlvbk5hbWUiLCJKYSIsImxvIiwiSGEiLCJyZWR1Y2VSaWdodCIsIk5tIiwiTG0iLCJ1byIsIl9ydW50aW1lRGF0YU1vZGVsIiwiX2Vycm9yRm9ybWF0IiwiZGF0YVBhdGgiLCJGbSIsIk1tIiwiJG0iLCJjbyIsIl9leHRlbnNpb25zIiwicW0iLCJWbSIsIl9hcHBsaWVkUGFyZW50IiwiX2NyZWF0ZVByaXNtYVByb21pc2UiLCJqc01vZGVsTmFtZSIsIl9yZXF1ZXN0Iiwiam0iLCJLYSIsInBvIiwiUHQiLCJCbSIsIlVtIiwiX29yaWdpbmFsQ2xpZW50IiwiWWEiLCJ6YSIsIl9fQWNjZWxlcmF0ZUVuZ2luZSIsIl9hY2NlbGVyYXRlRW5naW5lQ29uZmlnIiwiJHVzZSIsIiRvbiIsIlphIiwiR20iLCJRbSIsIlVuIiwidmlzaXRvciIsIlhhIiwiaW5jbHVkZU9yU2VsZWN0IiwicGFyZW50TW9kZWxOYW1lIiwiZWwiLCJXbSIsInJsIiwidGwiLCJKbSIsIkhtIiwiVHQiLCJpbCIsImN1c3RvbURhdGFQcm94eUZldGNoIiwibG9jayIsInRoZW4iLCJfZXhlY3V0ZVJlcXVlc3QiLCJvcGVyYXRpb24iLCJfX2ludGVybmFsUGFyYW1zIiwibGwiLCJvbCIsInNsIiwicmVxdWVzdHMiLCJhbCIsInF1ZXJpZXMiLCJubCIsInVsIiwiY2wiLCJWZXJjZWwiLCJwbCIsInBvc3RpbnN0YWxsIiwiY2lOYW1lIiwiZGwiLCJkYXRhc291cmNlcyIsImRhdGFzb3VyY2VVcmwiLCJLbSIsIlltIiwiQnVuIiwiem0iLCJabSIsIk5ldGxpZnkiLCJYbSIsIkVkZ2VSdW50aW1lIiwiZWYiLCJyZiIsInRmIiwid29ya2VyZCIsIm5ldGxpZnkiLCJwcmV0dHlOYW1lIiwiaXNFZGdlIiwieWwiLCJTdCIsIlFuIiwicnVudGltZUJpbmFyeVRhcmdldCIsIm5mIiwiZ2VuZXJhdG9yIiwiZ2VuZXJhdG9yQmluYXJ5VGFyZ2V0cyIsIlhlIiwiZXIiLCJzZWFyY2hlZExvY2F0aW9ucyIsIm1sIiwiV24iLCJKbiIsImVycm9yU3RhY2siLCJmbCIsInF1ZXJ5RW5naW5lTmFtZSIsImV4cGVjdGVkTG9jYXRpb24iLCJnbCIsImhsIiwib2YiLCJzZiIsImJsIiwiYmluYXJ5IiwiUFJJU01BX1FVRVJZX0VOR0lORV9CSU5BUlkiLCJsaWJyYXJ5IiwicHJpc21hUGF0aCIsImVuZ2luZVBhdGgiLCJhZiIsIl9fZmlsZW5hbWUiLCJFbCIsImRpcm5hbWUiLCJvdXRwdXQiLCJtbyIsIndsIiwieGwiLCJ2bCIsIlBsIiwidGl0bGUiLCJ0ZW1wbGF0ZSIsImJvZHkiLCJUbCIsImVuZ2luZVZlcnNpb24iLCJkYXRhYmFzZSIsIlNsIiwiVnIiLCJpbmxpbmVEYXRhc291cmNlcyIsIm92ZXJyaWRlRGF0YXNvdXJjZXMiLCJIbiIsInNlIiwiaXNSZXRyeWFibGUiLCJBIiwidXIiLCJSbCIsInByb3RvY29sIiwiaHJlZiIsImFwaUtleSIsIkFsIiwiS24iLCJ0cmFjaW5nSGVscGVyIiwibG9nTGV2ZWwiLCJsb2dRdWVyaWVzIiwiZW5naW5lSGFzaCIsInRyYWNlcGFyZW50IiwidHJhbnNhY3Rpb25JZCIsIkFjY2VwdCIsIkF1dGhvcml6YXRpb24iLCJpc0VuYWJsZWQiLCJnZXRUcmFjZVBhcmVudCIsInVmIiwiZm8iLCJCciIsImNyIiwicmVzcG9uc2UiLCJoZWFkZXJzIiwicHIiLCJnbyIsIlJ0IiwiQXQiLCJsb2dzIiwiQ3QiLCJJdCIsImhvIiwia3QiLCJjZiIsIkR0IiwicGYiLCJPdCIsInlvIiwiX3QiLCJibyIsIlVyIiwiRW8iLCJOdCIsIndvIiwiTHQiLCJkZiIsInJlYXNvbiIsIkZ0IiwiRW5naW5lTm90U3RhcnRlZCIsIm1zZyIsIkVuZ2luZVN0YXJ0dXBFcnJvciIsIktub3duRW5naW5lU3RhcnR1cEVycm9yIiwiSGVhbHRoY2hlY2tUaW1lb3V0IiwiSURQYXJzZUVycm9yIiwiTm9RdWVyeUVuZ2luZUZvdW5kRXJyb3IiLCJUcmFuc2FjdGlvblN0YXJ0RXJyb3IiLCJJbnRlcmFjdGl2ZVRyYW5zYWN0aW9uTWlzcm91dGVkIiwiSW52YWxpZFJlcXVlc3RFcnJvciIsInN0YXR1cyIsIkdyIiwiQ2wiLCJzZXRUaW1lb3V0IiwiJGUiLCJJbCIsIlRleHRFbmNvZGVyIiwia2wiLCJEbCIsIk10IiwiZHIiLCJmZXRjaCIsImZmIiwiT2wiLCJnZiIsIlBSSVNNQV9DTElFTlRfREFUQV9QUk9YWV9DTElFTlRfVkVSU0lPTiIsImhmIiwic3RhdHVzVGV4dCIsIl9sIiwiZW5jb2RlVVJJIiwiTmwiLCIkdCIsInF0IiwiaW5saW5lU2NoZW1hIiwiaW5saW5lU2NoZW1hSGFzaCIsImxvZ0VtaXR0ZXIiLCJoZWFkZXJCdWlsZGVyIiwic3RhcnQiLCJzdGFydFByb21pc2UiLCJnZXRVUkxBbmRBUElLZXkiLCJyZW1vdGVDbGllbnRWZXJzaW9uIiwic3RvcCIsInByb3BhZ2F0ZVJlc3BvbnNlRXh0ZW5zaW9ucyIsImVtaXQiLCJ0aW1lc3RhbXAiLCJhdHRyaWJ1dGVzIiwiZHVyYXRpb24iLCJkdXJhdGlvbl9tcyIsInRyYWNlcyIsImRpc3BhdGNoRW5naW5lU3BhbnMiLCJvbkJlZm9yZUV4aXQiLCJ1cGxvYWRTY2hlbWEiLCJpbnRlcm5hbCIsInJ1bkluQ2hpbGRTcGFuIiwibWV0aG9kIiwicmVxdWVzdCIsImludGVyYWN0aXZlVHJhbnNhY3Rpb24iLCJyZXF1ZXN0SW50ZXJuYWwiLCJyZXF1ZXN0QmF0Y2giLCJjb252ZXJ0UHJvdG9jb2xFcnJvcnNUb0NsaWVudEVycm9yIiwid2l0aFJldHJ5IiwiYWN0aW9uR2VydW5kIiwiY2FsbGJhY2siLCJsb2dIdHRwQ2FsbCIsInBheWxvYWQiLCJlbmRwb2ludCIsImhhbmRsZUVycm9yIiwiYmF0Y2hSZXN1bHQiLCJtYXhfd2FpdCIsIm1heFdhaXQiLCJ0aW1lb3V0IiwiaXNvbGF0aW9uX2xldmVsIiwiYWN0aXZlUHJvdmlkZXIiLCJhcHBseVBlbmRpbmdNaWdyYXRpb25zIiwiTGwiLCJ2byIsIkZsIiwieG8iLCJ5ZiIsImJmIiwidG9OYW1lc3BhY2VkUGF0aCIsImNvbnN0YW50cyIsImRsb3BlbiIsIlJUTERfTEFaWSIsIlJUTERfREVFUEJJTkQiLCJNbCIsImxvYWRMaWJyYXJ5IiwiUG8iLCIkbCIsImFkYXB0ZXIiLCJlbmdpbmVXYXNtIiwiZ2V0UXVlcnlFbmdpbmVXYXNtTW9kdWxlIiwiV2ViQXNzZW1ibHkiLCJJbnN0YW5jZSIsIl9fd2JpbmRnZW5fc3RhcnQiLCJfX3diZ19zZXRfd2FzbSIsIlF1ZXJ5RW5naW5lIiwiZGVidWdQYW5pYyIsInJlamVjdCIsImRtbWYiLCJFZiIsIkFlIiwid2YiLCJpdGVtX3R5cGUiLCJ4ZiIsInFsIiwidmYiLCJUbyIsIlBmIiwiUXIiLCJsaWJyYXJ5TG9hZGVyIiwibGlicmFyeVN0YXJ0ZWQiLCJlbmFibGVEZWJ1Z0xvZ3MiLCJkYXRhc291cmNlT3ZlcnJpZGVzIiwibGlicmFyeUluc3RhbnRpYXRpb25Qcm9taXNlIiwiaW5zdGFudGlhdGVMaWJyYXJ5Iiwid3JhcEVuZ2luZSIsImNvbW1pdFRyYW5zYWN0aW9uIiwid2l0aFJlcXVlc3RJZCIsImNvbm5lY3QiLCJkaXNjb25uZWN0Iiwicm9sbGJhY2tUcmFuc2FjdGlvbiIsInNkbFNjaGVtYSIsInRyYWNlIiwiZnJlZSIsImVuZ2luZSIsInNwYW5zIiwiYWRhcHRlclByb21pc2UiLCJwYXJzZUVuZ2luZVJlc3BvbnNlIiwiVGYiLCJnZXRFeHRlcm5hbEFkYXB0ZXJFcnJvciIsImdldEN1cnJlbnRCaW5hcnlUYXJnZXQiLCJsb2FkRW5naW5lIiwiUXVlcnlFbmdpbmVDb25zdHJ1Y3RvciIsIldlYWtSZWYiLCJpZ25vcmVFbnZWYXJFcnJvcnMiLCJjb25maWdEaXIiLCJlbmdpbmVQcm90b2NvbCIsImVuYWJsZVRyYWNpbmciLCJkZXJlZiIsImxvZ2dlciIsInBhcnNlSW5pdEVycm9yIiwibW9kdWxlX3BhdGgiLCJsb2dnZXJSdXN0UGFuaWMiLCJTbyIsImxpbmUiLCJwYXJzZVJlcXVlc3RFcnJvciIsImxpYnJhcnlTdG9wcGluZ1Byb21pc2UiLCJsaWJyYXJ5U3RhcnRpbmdQcm9taXNlIiwiZXhlY3V0aW5nUXVlcnlQcm9taXNlIiwic2V0SW1tZWRpYXRlIiwidmVyc2lvbkluZm8iLCJsYXN0UXVlcnkiLCJidWlsZFF1ZXJ5RXJyb3IiLCJkYXRhIiwiYmFja3RyYWNlIiwiaXNfcGFuaWMiLCJqbCIsImNvcHlFbmdpbmUiLCJ0YXJnZXRCdWlsZFR5cGUiLCJfdGFnIiwiYWNjZWxlcmF0ZSIsInBwZyIsImRyaXZlckFkYXB0ZXJzIiwiZGlhZ25vc3RpY3MiLCJ3YXJuaW5ncyIsImlzVXNpbmciLCJWbCIsIlluIiwiQmwiLCJjb21tYW5kIiwiVWwiLCJXciIsIkdsIiwiV2wiLCJwcmlzbWFfX3R5cGUiLCJwcmlzbWFfX3ZhbHVlIiwiU2YiLCJKbCIsIlNoYXJlZEFycmF5QnVmZmVyIiwiUWwiLCJSZiIsIkhsIiwiUm8iLCJBbyIsInBhcmFtZXRlcnMiLCJLbCIsInJlcXVlc3RBcmdzVG9NaWRkbGV3YXJlQXJncyIsIm1pZGRsZXdhcmVBcmdzVG9SZXF1ZXN0QXJncyIsIllsIiwiQ28iLCJ6bCIsInNwZWMiLCJjYXRjaCIsImZpbmFsbHkiLCJyZXF1ZXN0VHJhbnNhY3Rpb24iLCJBZiIsIkNmIiwiZ2V0QWN0aXZlQ29udGV4dCIsIklvIiwiZ2V0R2xvYmFsVHJhY2luZ0hlbHBlciIsIlBSSVNNQV9JTlNUUlVNRU5UQVRJT04iLCJoZWxwZXIiLCJabCIsIlhsIiwiZXUiLCJ6biIsInVzZSIsIl9taWRkbGV3YXJlcyIsInR1IiwiWm4iLCJydSIsImtvIiwic29ydCIsIklmIiwiY3JlYXRlT25lIiwiZGVsZXRlT25lIiwidXBkYXRlT25lIiwidXBzZXJ0T25lIiwiRG8iLCJYbiIsInRpY2tBY3RpdmUiLCJiYXRjaGVzIiwiYmF0Y2hCeSIsIm5leHRUaWNrIiwiZGlzcGF0Y2hCYXRjaGVzIiwic2luZ2xlTG9hZGVyIiwiYmF0Y2hPcmRlciIsImJhdGNoTG9hZGVyIiwibXIiLCJrZiIsInJvd3MiLCJjb2x1bW5zIiwiRGYiLCJyaSIsImRhdGFsb2FkZXIiLCJvdGVsUGFyZW50Q3R4IiwicHJvdG9jb2xRdWVyeSIsIl90cmFjaW5nSGVscGVyIiwiT2YiLCJjb250YWluc1dyaXRlIiwibWFwUXVlcnlFbmdpbmVSZXN1bHQiLCJudSIsImlzV3JpdGUiLCJoYW5kbGVBbmRMb2dSZXF1ZXN0RXJyb3IiLCJ1bnBhY2siLCJQUklTTUFfQ0xJRU5UX0dFVF9USU1FIiwiaGFuZGxlUmVxdWVzdEVycm9yIiwiX2YiLCJOZiIsIml1Iiwic2FuaXRpemVNZXNzYWdlIiwib3UiLCJjdSIsIk8iLCJzdSIsImF1IiwibHUiLCJMZiIsImRhdGFzb3VyY2VOYW1lcyIsIkpyIiwidHJhbnNhY3Rpb25PcHRpb25zIiwiTWYiLCJtb2RlbEtleSIsIiRmIiwiX19pbnRlcm5hbCIsInB1IiwiRmYiLCJkaXN0YW5jZSIsInV1IiwiZHUiLCJyciIsIk5PREVfQ0xJRU5UIiwicWYiLCJqZiIsIlZmIiwibmV4dElkIiwiJG1ldHJpY3MiLCJjb25maWdPdmVycmlkZSIsIkV2ZW50RW1pdHRlciIsIl9wcmV2aWV3RmVhdHVyZXMiLCJfYWN0aXZlUHJvdmlkZXIiLCJfZ2xvYmFsT21pdCIsInJlbGF0aXZlRW52UGF0aHMiLCJpbmplY3RhYmxlRWRnZUVudiIsInJlbGF0aXZlUGF0aCIsIl9lbmdpbmVDb25maWciLCJhbGxvd1RyaWdnZXJQYW5pYyIsImJpbmFyeVBhdGgiLCJlbmdpbmVFbmRwb2ludCIsImZsYWdzIiwiY29tcGlsZXJXYXNtIiwiaXNCdW5kbGVkIiwiYWNjZWxlcmF0ZVV0aWxzIiwicmVzb2x2ZURhdGFzb3VyY2VVcmwiLCJnZXRCYXRjaFJlcXVlc3RQYXlsb2FkIiwicHJpc21hR3JhcGhRTFRvSlNFcnJvciIsIl9yZXF1ZXN0SGFuZGxlciIsIiRjb25uZWN0IiwiJGRpc2Nvbm5lY3QiLCIkZXhlY3V0ZVJhd0ludGVybmFsIiwibWlkZGxld2FyZUFyZ3NNYXBwZXIiLCIkZXhlY3V0ZVJhdyIsIm11IiwiJGV4ZWN1dGVSYXdVbnNhZmUiLCIkcnVuQ29tbWFuZFJhdyIsIiRxdWVyeVJhd0ludGVybmFsIiwiJHF1ZXJ5UmF3IiwiJHF1ZXJ5UmF3VHlwZWQiLCIkcXVlcnlSYXdVbnNhZmUiLCJfdHJhbnNhY3Rpb25XaXRoQXJyYXkiLCJwcm9taXNlcyIsIl90cmFuc2FjdGlvbldpdGhDYWxsYmFjayIsIl9jcmVhdGVJdHhDbGllbnQiLCIkdHJhbnNhY3Rpb24iLCJydW5JblRyYW5zYWN0aW9uIiwibWlkZGxld2FyZSIsImFjdGl2ZSIsImVuZCIsIkFzeW5jUmVzb3VyY2UiLCJydW5JbkFzeW5jU2NvcGUiLCJvdGVsQ2hpbGRDdHgiLCIkYXBwbHlQZW5kaW5nTWlncmF0aW9ucyIsIkJmIiwiVWYiLCJpdGVyYXRvciIsImlzQ29uY2F0U3ByZWFkYWJsZSIsInRvUHJpbWl0aXZlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./generated/prisma/runtime/library.js\n");

/***/ }),

/***/ "(rsc)/./src/app/api/rooms/route.ts":
/*!************************************!*\
  !*** ./src/app/api/rooms/route.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/web/exports/next-response */ \"(rsc)/./node_modules/next/dist/server/web/exports/next-response.js\");\n/* harmony import */ var _lib_prisma__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/prisma */ \"(rsc)/./src/lib/prisma.ts\");\n\n\nasync function GET(request) {\n    try {\n        const { searchParams } = new URL(request.url);\n        const search = searchParams.get(\"search\");\n        const available = searchParams.get(\"available\");\n        const checkIn = searchParams.get(\"checkIn\");\n        const checkOut = searchParams.get(\"checkOut\");\n        if (search) {\n            const rooms = await _lib_prisma__WEBPACK_IMPORTED_MODULE_1__.prisma.room.findMany({\n                where: {\n                    name: {\n                        contains: search,\n                        mode: \"insensitive\"\n                    }\n                },\n                orderBy: {\n                    name: \"asc\"\n                }\n            });\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json(rooms);\n        }\n        if (available === \"true\" && checkIn && checkOut) {\n            const checkInDate = new Date(checkIn);\n            const checkOutDate = new Date(checkOut);\n            const rooms = await _lib_prisma__WEBPACK_IMPORTED_MODULE_1__.prisma.room.findMany({\n                where: {\n                    reservationRooms: {\n                        none: {\n                            reservation: {\n                                OR: [\n                                    {\n                                        AND: [\n                                            {\n                                                checkInDate: {\n                                                    lte: checkInDate\n                                                }\n                                            },\n                                            {\n                                                checkOutDate: {\n                                                    gt: checkInDate\n                                                }\n                                            }\n                                        ]\n                                    },\n                                    {\n                                        AND: [\n                                            {\n                                                checkInDate: {\n                                                    lt: checkOutDate\n                                                }\n                                            },\n                                            {\n                                                checkOutDate: {\n                                                    gte: checkOutDate\n                                                }\n                                            }\n                                        ]\n                                    },\n                                    {\n                                        AND: [\n                                            {\n                                                checkInDate: {\n                                                    gte: checkInDate\n                                                }\n                                            },\n                                            {\n                                                checkOutDate: {\n                                                    lte: checkOutDate\n                                                }\n                                            }\n                                        ]\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                },\n                orderBy: {\n                    name: \"asc\"\n                }\n            });\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json(rooms);\n        }\n        const rooms = await _lib_prisma__WEBPACK_IMPORTED_MODULE_1__.prisma.room.findMany({\n            orderBy: {\n                name: \"asc\"\n            }\n        });\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json(rooms);\n    } catch (error) {\n        console.error(\"Error fetching rooms:\", error);\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n            error: \"Failed to fetch rooms\"\n        }, {\n            status: 500\n        });\n    }\n}\nasync function POST(request) {\n    try {\n        const data = await request.json();\n        const room = await _lib_prisma__WEBPACK_IMPORTED_MODULE_1__.prisma.room.create({\n            data\n        });\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json(room, {\n            status: 201\n        });\n    } catch (error) {\n        console.error(\"Error creating room:\", error);\n        if (error.code === \"P2002\") {\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                error: \"A room with this number already exists\"\n            }, {\n                status: 409\n            });\n        }\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n            error: \"Failed to create room\"\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvYXBwL2FwaS9yb29tcy9yb3V0ZS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQXVEO0FBQ2xCO0FBRzlCLGVBQWVFLElBQUlDLE9BQW9CO0lBQzVDLElBQUk7UUFDRixNQUFNLEVBQUVDLFlBQVksRUFBRSxHQUFHLElBQUlDLElBQUlGLFFBQVFHLEdBQUc7UUFDNUMsTUFBTUMsU0FBU0gsYUFBYUksR0FBRyxDQUFDO1FBQ2hDLE1BQU1DLFlBQVlMLGFBQWFJLEdBQUcsQ0FBQztRQUNuQyxNQUFNRSxVQUFVTixhQUFhSSxHQUFHLENBQUM7UUFDakMsTUFBTUcsV0FBV1AsYUFBYUksR0FBRyxDQUFDO1FBRWxDLElBQUlELFFBQVE7WUFDVixNQUFNSyxRQUFRLE1BQU1YLCtDQUFNQSxDQUFDWSxJQUFJLENBQUNDLFFBQVEsQ0FBQztnQkFDdkNDLE9BQU87b0JBQ0xDLE1BQU07d0JBQUVDLFVBQVVWO3dCQUFRVyxNQUFNO29CQUFjO2dCQUNoRDtnQkFDQUMsU0FBUztvQkFBRUgsTUFBTTtnQkFBTTtZQUN6QjtZQUNBLE9BQU9oQixrRkFBWUEsQ0FBQ29CLElBQUksQ0FBQ1I7UUFDM0I7UUFFQSxJQUFJSCxjQUFjLFVBQVVDLFdBQVdDLFVBQVU7WUFDL0MsTUFBTVUsY0FBYyxJQUFJQyxLQUFLWjtZQUM3QixNQUFNYSxlQUFlLElBQUlELEtBQUtYO1lBRTlCLE1BQU1DLFFBQVEsTUFBTVgsK0NBQU1BLENBQUNZLElBQUksQ0FBQ0MsUUFBUSxDQUFDO2dCQUN2Q0MsT0FBTztvQkFDTFMsa0JBQWtCO3dCQUNoQkMsTUFBTTs0QkFDSkMsYUFBYTtnQ0FDWEMsSUFBSTtvQ0FDRjt3Q0FDRUMsS0FBSzs0Q0FDSDtnREFBRVAsYUFBYTtvREFBRVEsS0FBS1I7Z0RBQVk7NENBQUU7NENBQ3BDO2dEQUFFRSxjQUFjO29EQUFFTyxJQUFJVDtnREFBWTs0Q0FBRTt5Q0FDckM7b0NBQ0g7b0NBQ0E7d0NBQ0VPLEtBQUs7NENBQ0g7Z0RBQUVQLGFBQWE7b0RBQUVVLElBQUlSO2dEQUFhOzRDQUFFOzRDQUNwQztnREFBRUEsY0FBYztvREFBRVMsS0FBS1Q7Z0RBQWE7NENBQUU7eUNBQ3ZDO29DQUNIO29DQUNBO3dDQUNFSyxLQUFLOzRDQUNIO2dEQUFFUCxhQUFhO29EQUFFVyxLQUFLWDtnREFBWTs0Q0FBRTs0Q0FDcEM7Z0RBQUVFLGNBQWM7b0RBQUVNLEtBQUtOO2dEQUFhOzRDQUFFO3lDQUN2QztvQ0FDSDtpQ0FDRDs0QkFDSDt3QkFDRjtvQkFDRjtnQkFDRjtnQkFDQUosU0FBUztvQkFBRUgsTUFBTTtnQkFBTTtZQUN6QjtZQUNBLE9BQU9oQixrRkFBWUEsQ0FBQ29CLElBQUksQ0FBQ1I7UUFDM0I7UUFFQSxNQUFNQSxRQUFRLE1BQU1YLCtDQUFNQSxDQUFDWSxJQUFJLENBQUNDLFFBQVEsQ0FBQztZQUN2Q0ssU0FBUztnQkFBRUgsTUFBTTtZQUFNO1FBQ3pCO1FBQ0EsT0FBT2hCLGtGQUFZQSxDQUFDb0IsSUFBSSxDQUFDUjtJQUMzQixFQUFFLE9BQU9xQixPQUFPO1FBQ2RDLFFBQVFELEtBQUssQ0FBQyx5QkFBeUJBO1FBQ3ZDLE9BQU9qQyxrRkFBWUEsQ0FBQ29CLElBQUksQ0FDdEI7WUFBRWEsT0FBTztRQUF3QixHQUNqQztZQUFFRSxRQUFRO1FBQUk7SUFFbEI7QUFDRjtBQUVPLGVBQWVDLEtBQUtqQyxPQUFvQjtJQUM3QyxJQUFJO1FBQ0YsTUFBTWtDLE9BQXVCLE1BQU1sQyxRQUFRaUIsSUFBSTtRQUUvQyxNQUFNUCxPQUFPLE1BQU1aLCtDQUFNQSxDQUFDWSxJQUFJLENBQUN5QixNQUFNLENBQUM7WUFDcENEO1FBQ0Y7UUFFQSxPQUFPckMsa0ZBQVlBLENBQUNvQixJQUFJLENBQUNQLE1BQU07WUFBRXNCLFFBQVE7UUFBSTtJQUMvQyxFQUFFLE9BQU9GLE9BQVk7UUFDbkJDLFFBQVFELEtBQUssQ0FBQyx3QkFBd0JBO1FBRXRDLElBQUlBLE1BQU1NLElBQUksS0FBSyxTQUFTO1lBQzFCLE9BQU92QyxrRkFBWUEsQ0FBQ29CLElBQUksQ0FDdEI7Z0JBQUVhLE9BQU87WUFBeUMsR0FDbEQ7Z0JBQUVFLFFBQVE7WUFBSTtRQUVsQjtRQUVBLE9BQU9uQyxrRkFBWUEsQ0FBQ29CLElBQUksQ0FDdEI7WUFBRWEsT0FBTztRQUF3QixHQUNqQztZQUFFRSxRQUFRO1FBQUk7SUFFbEI7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL2Nvb2wtY2F0LXJlc29ydC1iYWNrb2ZmaWNlLy4vc3JjL2FwcC9hcGkvcm9vbXMvcm91dGUudHM/MGVmMSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZXh0UmVxdWVzdCwgTmV4dFJlc3BvbnNlIH0gZnJvbSAnbmV4dC9zZXJ2ZXInXG5pbXBvcnQgeyBwcmlzbWEgfSBmcm9tICdAL2xpYi9wcmlzbWEnXG5pbXBvcnQgeyBDcmVhdGVSb29tRGF0YSB9IGZyb20gJ0AvdHlwZXMvcm9vbSdcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIEdFVChyZXF1ZXN0OiBOZXh0UmVxdWVzdCkge1xuICB0cnkge1xuICAgIGNvbnN0IHsgc2VhcmNoUGFyYW1zIH0gPSBuZXcgVVJMKHJlcXVlc3QudXJsKVxuICAgIGNvbnN0IHNlYXJjaCA9IHNlYXJjaFBhcmFtcy5nZXQoJ3NlYXJjaCcpXG4gICAgY29uc3QgYXZhaWxhYmxlID0gc2VhcmNoUGFyYW1zLmdldCgnYXZhaWxhYmxlJylcbiAgICBjb25zdCBjaGVja0luID0gc2VhcmNoUGFyYW1zLmdldCgnY2hlY2tJbicpXG4gICAgY29uc3QgY2hlY2tPdXQgPSBzZWFyY2hQYXJhbXMuZ2V0KCdjaGVja091dCcpXG4gICAgXG4gICAgaWYgKHNlYXJjaCkge1xuICAgICAgY29uc3Qgcm9vbXMgPSBhd2FpdCBwcmlzbWEucm9vbS5maW5kTWFueSh7XG4gICAgICAgIHdoZXJlOiB7XG4gICAgICAgICAgbmFtZTogeyBjb250YWluczogc2VhcmNoLCBtb2RlOiAnaW5zZW5zaXRpdmUnIH1cbiAgICAgICAgfSxcbiAgICAgICAgb3JkZXJCeTogeyBuYW1lOiAnYXNjJyB9XG4gICAgICB9KVxuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHJvb21zKVxuICAgIH1cbiAgICBcbiAgICBpZiAoYXZhaWxhYmxlID09PSAndHJ1ZScgJiYgY2hlY2tJbiAmJiBjaGVja091dCkge1xuICAgICAgY29uc3QgY2hlY2tJbkRhdGUgPSBuZXcgRGF0ZShjaGVja0luKVxuICAgICAgY29uc3QgY2hlY2tPdXREYXRlID0gbmV3IERhdGUoY2hlY2tPdXQpXG4gICAgICBcbiAgICAgIGNvbnN0IHJvb21zID0gYXdhaXQgcHJpc21hLnJvb20uZmluZE1hbnkoe1xuICAgICAgICB3aGVyZToge1xuICAgICAgICAgIHJlc2VydmF0aW9uUm9vbXM6IHtcbiAgICAgICAgICAgIG5vbmU6IHtcbiAgICAgICAgICAgICAgcmVzZXJ2YXRpb246IHtcbiAgICAgICAgICAgICAgICBPUjogW1xuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBBTkQ6IFtcbiAgICAgICAgICAgICAgICAgICAgICB7IGNoZWNrSW5EYXRlOiB7IGx0ZTogY2hlY2tJbkRhdGUgfSB9LFxuICAgICAgICAgICAgICAgICAgICAgIHsgY2hlY2tPdXREYXRlOiB7IGd0OiBjaGVja0luRGF0ZSB9IH1cbiAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgQU5EOiBbXG4gICAgICAgICAgICAgICAgICAgICAgeyBjaGVja0luRGF0ZTogeyBsdDogY2hlY2tPdXREYXRlIH0gfSxcbiAgICAgICAgICAgICAgICAgICAgICB7IGNoZWNrT3V0RGF0ZTogeyBndGU6IGNoZWNrT3V0RGF0ZSB9IH1cbiAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgQU5EOiBbXG4gICAgICAgICAgICAgICAgICAgICAgeyBjaGVja0luRGF0ZTogeyBndGU6IGNoZWNrSW5EYXRlIH0gfSxcbiAgICAgICAgICAgICAgICAgICAgICB7IGNoZWNrT3V0RGF0ZTogeyBsdGU6IGNoZWNrT3V0RGF0ZSB9IH1cbiAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgb3JkZXJCeTogeyBuYW1lOiAnYXNjJyB9XG4gICAgICB9KVxuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHJvb21zKVxuICAgIH1cbiAgICBcbiAgICBjb25zdCByb29tcyA9IGF3YWl0IHByaXNtYS5yb29tLmZpbmRNYW55KHtcbiAgICAgIG9yZGVyQnk6IHsgbmFtZTogJ2FzYycgfVxuICAgIH0pXG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHJvb21zKVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIHJvb21zOicsIGVycm9yKVxuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcbiAgICAgIHsgZXJyb3I6ICdGYWlsZWQgdG8gZmV0Y2ggcm9vbXMnIH0sXG4gICAgICB7IHN0YXR1czogNTAwIH1cbiAgICApXG4gIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIFBPU1QocmVxdWVzdDogTmV4dFJlcXVlc3QpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCBkYXRhOiBDcmVhdGVSb29tRGF0YSA9IGF3YWl0IHJlcXVlc3QuanNvbigpXG4gICAgXG4gICAgY29uc3Qgcm9vbSA9IGF3YWl0IHByaXNtYS5yb29tLmNyZWF0ZSh7XG4gICAgICBkYXRhXG4gICAgfSlcbiAgICBcbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24ocm9vbSwgeyBzdGF0dXM6IDIwMSB9KVxuICB9IGNhdGNoIChlcnJvcjogYW55KSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgY3JlYXRpbmcgcm9vbTonLCBlcnJvcilcbiAgICBcbiAgICBpZiAoZXJyb3IuY29kZSA9PT0gJ1AyMDAyJykge1xuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxuICAgICAgICB7IGVycm9yOiAnQSByb29tIHdpdGggdGhpcyBudW1iZXIgYWxyZWFkeSBleGlzdHMnIH0sXG4gICAgICAgIHsgc3RhdHVzOiA0MDkgfVxuICAgICAgKVxuICAgIH1cbiAgICBcbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXG4gICAgICB7IGVycm9yOiAnRmFpbGVkIHRvIGNyZWF0ZSByb29tJyB9LFxuICAgICAgeyBzdGF0dXM6IDUwMCB9XG4gICAgKVxuICB9XG59Il0sIm5hbWVzIjpbIk5leHRSZXNwb25zZSIsInByaXNtYSIsIkdFVCIsInJlcXVlc3QiLCJzZWFyY2hQYXJhbXMiLCJVUkwiLCJ1cmwiLCJzZWFyY2giLCJnZXQiLCJhdmFpbGFibGUiLCJjaGVja0luIiwiY2hlY2tPdXQiLCJyb29tcyIsInJvb20iLCJmaW5kTWFueSIsIndoZXJlIiwibmFtZSIsImNvbnRhaW5zIiwibW9kZSIsIm9yZGVyQnkiLCJqc29uIiwiY2hlY2tJbkRhdGUiLCJEYXRlIiwiY2hlY2tPdXREYXRlIiwicmVzZXJ2YXRpb25Sb29tcyIsIm5vbmUiLCJyZXNlcnZhdGlvbiIsIk9SIiwiQU5EIiwibHRlIiwiZ3QiLCJsdCIsImd0ZSIsImVycm9yIiwiY29uc29sZSIsInN0YXR1cyIsIlBPU1QiLCJkYXRhIiwiY3JlYXRlIiwiY29kZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/rooms/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/prisma.ts":
/*!***************************!*\
  !*** ./src/lib/prisma.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   prisma: () => (/* binding */ prisma)\n/* harmony export */ });\n/* harmony import */ var _generated_prisma__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../generated/prisma */ \"(rsc)/./generated/prisma/index.js\");\n/* harmony import */ var _generated_prisma__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_generated_prisma__WEBPACK_IMPORTED_MODULE_0__);\n\n// Create a global variable to store the Prisma client\nconst globalForPrisma = globalThis;\n// Create Prisma client\nconst createPrismaClient = ()=>{\n    return new _generated_prisma__WEBPACK_IMPORTED_MODULE_0__.PrismaClient({\n        log:  true ? [\n            \"query\",\n            \"error\",\n            \"warn\"\n        ] : 0\n    });\n};\n// Use existing client or create new one\nconst prisma = globalForPrisma.prisma ?? createPrismaClient();\n// In development, store the client globally to prevent multiple instances\nif (true) {\n    globalForPrisma.prisma = prisma;\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (prisma);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGliL3ByaXNtYS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQXFEO0FBRXJELHNEQUFzRDtBQUN0RCxNQUFNQyxrQkFBa0JDO0FBSXhCLHVCQUF1QjtBQUN2QixNQUFNQyxxQkFBcUI7SUFDekIsT0FBTyxJQUFJSCwyREFBWUEsQ0FBQztRQUN0QkksS0FBS0MsS0FBeUIsR0FBZ0I7WUFBQztZQUFTO1lBQVM7U0FBTyxHQUFHLENBQVM7SUFDdEY7QUFDRjtBQUVBLHdDQUF3QztBQUNqQyxNQUFNQyxTQUFTTCxnQkFBZ0JLLE1BQU0sSUFBSUgscUJBQW9CO0FBRXBFLDBFQUEwRTtBQUMxRSxJQUFJRSxJQUF5QixFQUFjO0lBQ3pDSixnQkFBZ0JLLE1BQU0sR0FBR0E7QUFDM0I7QUFFQSxpRUFBZUEsTUFBTUEsRUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Nvb2wtY2F0LXJlc29ydC1iYWNrb2ZmaWNlLy4vc3JjL2xpYi9wcmlzbWEudHM/MDFkNyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQcmlzbWFDbGllbnQgfSBmcm9tICcuLi8uLi9nZW5lcmF0ZWQvcHJpc21hJ1xuXG4vLyBDcmVhdGUgYSBnbG9iYWwgdmFyaWFibGUgdG8gc3RvcmUgdGhlIFByaXNtYSBjbGllbnRcbmNvbnN0IGdsb2JhbEZvclByaXNtYSA9IGdsb2JhbFRoaXMgYXMgdW5rbm93biBhcyB7XG4gIHByaXNtYTogUHJpc21hQ2xpZW50IHwgdW5kZWZpbmVkXG59XG5cbi8vIENyZWF0ZSBQcmlzbWEgY2xpZW50XG5jb25zdCBjcmVhdGVQcmlzbWFDbGllbnQgPSAoKSA9PiB7XG4gIHJldHVybiBuZXcgUHJpc21hQ2xpZW50KHtcbiAgICBsb2c6IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnID8gWydxdWVyeScsICdlcnJvcicsICd3YXJuJ10gOiBbJ2Vycm9yJ10sXG4gIH0pXG59XG5cbi8vIFVzZSBleGlzdGluZyBjbGllbnQgb3IgY3JlYXRlIG5ldyBvbmVcbmV4cG9ydCBjb25zdCBwcmlzbWEgPSBnbG9iYWxGb3JQcmlzbWEucHJpc21hID8/IGNyZWF0ZVByaXNtYUNsaWVudCgpXG5cbi8vIEluIGRldmVsb3BtZW50LCBzdG9yZSB0aGUgY2xpZW50IGdsb2JhbGx5IHRvIHByZXZlbnQgbXVsdGlwbGUgaW5zdGFuY2VzXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBnbG9iYWxGb3JQcmlzbWEucHJpc21hID0gcHJpc21hXG59XG5cbmV4cG9ydCBkZWZhdWx0IHByaXNtYSJdLCJuYW1lcyI6WyJQcmlzbWFDbGllbnQiLCJnbG9iYWxGb3JQcmlzbWEiLCJnbG9iYWxUaGlzIiwiY3JlYXRlUHJpc21hQ2xpZW50IiwibG9nIiwicHJvY2VzcyIsInByaXNtYSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/prisma.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Frooms%2Froute&page=%2Fapi%2Frooms%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Frooms%2Froute.ts&appDir=%2FUsers%2Faunz%2FMyProject%2FNew%2Fcool_cat_resort%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Faunz%2FMyProject%2FNew%2Fcool_cat_resort&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();