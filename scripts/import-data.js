const fs = require('fs');
const path = require('path');
const csv = require('csv-parser');

// Function to read CSV file and return parsed data
function readCSV(filePath) {
  return new Promise((resolve, reject) => {
    const results = [];
    fs.createReadStream(filePath)
      .pipe(csv())
      .on('data', (data) => results.push(data))
      .on('end', () => resolve(results))
      .on('error', (error) => reject(error));
  });
}

// Function to add room via API
async function addRoom(roomData) {
  try {
    const response = await fetch('http://localhost:3000/api/rooms', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(roomData),
    });
    
    if (!response.ok) {
      const error = await response.json();
      throw new Error(error.error || 'Failed to create room');
    }
    
    return await response.json();
  } catch (error) {
    console.error('Error adding room:', error.message);
    throw error;
  }
}

// Function to add customer via API
async function addCustomer(customerData) {
  try {
    const response = await fetch('http://localhost:3000/api/customers', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(customerData),
    });
    
    if (!response.ok) {
      const error = await response.json();
      throw new Error(error.error || 'Failed to create customer');
    }
    
    return await response.json();
  } catch (error) {
    console.error('Error adding customer:', error.message);
    throw error;
  }
}

// Main function to import data
async function importData() {
  try {
    console.log('üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...');
    
    // Import rooms
    console.log('üìã ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å‡∏à‡∏≤‡∏Å rooms.csv...');
    const roomsPath = path.join(__dirname, '..', 'rooms.csv');
    const roomsData = await readCSV(roomsPath);
    
    console.log(`üìä ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å ${roomsData.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    
    let roomsAdded = 0;
    let roomsSkipped = 0;
    
    for (const room of roomsData) {
      try {
        const roomData = {
          name: room.name,
          price: parseFloat(room.price)
        };
        
        await addRoom(roomData);
        roomsAdded++;
        console.log(`‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å: ${room.name} (${room.price} ‡∏ö‡∏≤‡∏ó)`);
      } catch (error) {
        roomsSkipped++;
        console.log(`‚ö†Ô∏è  ‡∏Ç‡πâ‡∏≤‡∏°‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å: ${room.name} - ${error.message}`);
      }
    }
    
    // Import customers
    console.log('\nüìã ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å users_no_id_date.csv...');
    const customersPath = path.join(__dirname, '..', 'users_no_id_date.csv');
    const customersData = await readCSV(customersPath);
    
    console.log(`üìä ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ ${customersData.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    
    let customersAdded = 0;
    let customersSkipped = 0;
    
    for (const customer of customersData) {
      try {
        const customerData = {
          name: customer.name,
          address: customer.address,
          taxId: customer.taxId
        };
        
        await addCustomer(customerData);
        customersAdded++;
        console.log(`‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: ${customer.name}`);
      } catch (error) {
        customersSkipped++;
        console.log(`‚ö†Ô∏è  ‡∏Ç‡πâ‡∏≤‡∏°‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: ${customer.name} - ${error.message}`);
      }
    }
    
    // Summary
    console.log('\nüéâ ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:');
    console.log(`üì¶ ‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ${roomsAdded} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£, ‡∏Ç‡πâ‡∏≤‡∏° ${roomsSkipped} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    console.log(`üë• ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ${customersAdded} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£, ‡∏Ç‡πâ‡∏≤‡∏° ${customersSkipped} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    console.log('‚ú® ‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!');
    
  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:', error.message);
    process.exit(1);
  }
}

// Check if server is running
async function checkServer() {
  try {
    const response = await fetch('http://localhost:3000/api/rooms');
    return response.ok;
  } catch (error) {
    return false;
  }
}

// Run the import
async function main() {
  console.log('üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå...');
  
  const serverRunning = await checkServer();
  if (!serverRunning) {
    console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà http://localhost:3000');
    console.log('üí° ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: npm run dev');
    process.exit(1);
  }
  
  console.log('‚úÖ ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');
  await importData();
}

if (require.main === module) {
  main();
}

module.exports = { importData, addRoom, addCustomer };