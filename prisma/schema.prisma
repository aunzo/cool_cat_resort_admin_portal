// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String
  address   String
  taxId     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  reservations Reservation[]
  
  @@map("users")
}

model Room {
  id        String   @id @default(cuid())
  name      String   @unique
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  reservationRooms ReservationRoom[]
  
  @@map("rooms")
}

model Reservation {
  id           String   @id @default(cuid())
  number       Int
  userId       String
  checkInDate  DateTime
  checkOutDate DateTime
  totalAmount  Float
  extraBed     Boolean  @default(false)
  notes        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  user  User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  rooms ReservationRoom[]
  
  @@map("reservations")
}

model ReservationRoom {
  id            String      @id @default(cuid())
  reservationId String
  roomId        String
  createdAt     DateTime    @default(now())
  
  // Relations
  reservation   Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)
  room          Room        @relation(fields: [roomId], references: [id], onDelete: Cascade)
  
  @@unique([reservationId, roomId])
  @@map("reservation_rooms")
}